!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
AeadDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadDecryptor {$/;"	i
AeadEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadEncryptor {$/;"	i
Aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Aes,$/;"	e	enum:SymmetricCipherSpec
AesBitValueOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesBitValueOps: BitXor<Output = Self> + BitAnd<Output = Self> + Not<Output = Self> + Defau/;"	i
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadDecryptor for AesGcm<'static> {$/;"	c
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadEncryptor for AesGcm<'static> {$/;"	c
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AesGcm<'a> {$/;"	c
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^pub struct AesGcm<'a> {$/;"	s
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiDecryptor {$/;"	c
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockDecryptor for AesNiDecryptor {$/;"	c
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	c
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiDecryptor {$/;"	s
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiEncryptor {$/;"	c
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockEncryptor for AesNiEncryptor {$/;"	c
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	c
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiEncryptor {$/;"	s
AesOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesOps {$/;"	i
BI	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static BI: [GePrecomp; 8] = [$/;"	v
Batch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^pub trait Batch<K: Key> {$/;"	i
Bcrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Bcrypt,$/;"	e	enum:KdfSpec
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Blake2b,$/;"	e	enum:DigestSpec
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Blake2b {$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Digest for Blake2b {$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Mac for Blake2b {$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^pub struct Blake2b {$/;"	s
Blake2bParam	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^struct Blake2bParam {$/;"	s
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Blake2s {$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Digest for Blake2s {$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Mac for Blake2s {$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^pub struct Blake2s {$/;"	s
Blake2sParam	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^struct Blake2sParam {$/;"	s
Block	/home/lieroz/blockchain_rust/src/block.rs	/^impl Block {$/;"	c
Block	/home/lieroz/blockchain_rust/src/block.rs	/^pub struct Block {$/;"	s
BlockDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptor {$/;"	i
BlockDecryptorX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptorX8 {$/;"	i
BlockEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptor {$/;"	i
BlockEncryptorX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptorX8 {$/;"	i
BlockEngine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <P: BlockProcessor, X: PaddingProcessor> BlockEngine<P, X> {$/;"	c
BlockEngine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct BlockEngine<P, X> {$/;"	s
BlockEngineState	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^enum BlockEngineState {$/;"	g
BlockModeSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum BlockModeSpec {$/;"	g
BlockProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^trait BlockProcessor {$/;"	i
Blockchain	/home/lieroz/blockchain_rust/src/blockchain.rs	/^impl Blockchain {$/;"	c
Blockchain	/home/lieroz/blockchain_rust/src/blockchain.rs	/^pub struct Blockchain {$/;"	s
BlodeModePaddingSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum BlodeModePaddingSpec {$/;"	g
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Blowfish,$/;"	e	enum:SymmetricCipherSpec
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockDecryptor for Blowfish {$/;"	c
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockEncryptor for Blowfish {$/;"	c
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl Blowfish {$/;"	c
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^pub struct Blowfish {$/;"	s
BorrowedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> BorrowedWriteBuffer<'a> {$/;"	c
BorrowedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for BorrowedWriteBuffer<'a> {$/;"	c
BorrowedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct BorrowedWriteBuffer<'a> {$/;"	s
Box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Decryptor for Box<SynchronousStreamCipher + 'static> {$/;"	c
Box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Encryptor for Box<SynchronousStreamCipher + 'static> {$/;"	c
Box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl SynchronousStreamCipher for Box<SynchronousStreamCipher + 'static> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf2Ops for Bs2State<T> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs2State<T> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T> Bs2State<T> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs2State<T>(T, T);$/;"	s
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf4Ops for Bs4State<T> {$/;"	c
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs4State<T> {$/;"	c
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs4State<T> {$/;"	c
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs4State<T>(T, T, T, T);$/;"	s
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: AesBitValueOps + Copy + 'static> AesOps for Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy + Default> Gf8Ops for Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Not<Output = T> + Copy> Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs8State<T>(T, T, T, T, T, T, T, T);$/;"	s
BufferOverflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    BufferOverflow$/;"	e	enum:BufferResult
BufferResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub enum BufferResult {$/;"	g
BufferUnderflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    BufferUnderflow,$/;"	e	enum:BufferResult
C	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^unsafe impl<C: Comparator> InternalComparator for C {}$/;"	c
C0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C0: [u64; 256] = [$/;"	v
C1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C1: [u32; 16] = [$/;"	v
C1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C1: [u64; 256] = [$/;"	v
C2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C2: [u32; 16] = [$/;"	v
C2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C2: [u64; 256] = [$/;"	v
C3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C3: [u32; 16] = [$/;"	v
C3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C3: [u64; 256] = [$/;"	v
C4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C4: [u32; 16] = [$/;"	v
C4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C4: [u64; 256] = [$/;"	v
C5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C5: [u64; 256] = [$/;"	v
C6	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C6: [u64; 256] = [$/;"	v
C7	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C7: [u64; 256] = [$/;"	v
CASES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    static CASES: &'static [(&'static [u8], &'static [u8], &'static [u8], &'static [u8])] = &[$/;"	v	module:test
Cache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^impl Cache {$/;"	c
Cache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^pub struct Cache {$/;"	s
Cbc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Cbc,$/;"	e	enum:BlockModeSpec
CbcDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> CbcDecryptor<T, X> {$/;"	c
CbcDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for CbcDecryptor<T, X> {$/;"	c
CbcDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcDecryptor<T, X> {$/;"	s
CbcDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for CbcDecryptorProcessor<T> {$/;"	c
CbcDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcDecryptorProcessor<T> {$/;"	s
CbcEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> CbcEncryptor<T, X> {$/;"	c
CbcEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for CbcEncryptor<T, X> {$/;"	c
CbcEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcEncryptor<T, X> {$/;"	s
CbcEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for CbcEncryptorProcessor<T> {$/;"	c
CbcEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcEncryptorProcessor<T> {$/;"	s
CbcTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CbcTest {$/;"	c	module:test
CbcTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CbcTest {$/;"	s	module:test
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    ChaCha20,$/;"	e	enum:SymmetricCipherSpec
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Decryptor for ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Encryptor for ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl SynchronousStreamCipher for ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^pub struct ChaCha20 {$/;"	s
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadDecryptor for ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadEncryptor for ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^pub struct ChaCha20Poly1305 {$/;"	s
ChaChaState	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^struct ChaChaState {$/;"	s
CipherTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    trait CipherTest {$/;"	i	module:test
Compaction	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/compaction.rs	/^pub trait Compaction<'a, K: Key + 'a> {$/;"	i
Comparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^pub trait Comparator {$/;"	i
Ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ctr,$/;"	e	enum:BlockModeSpec
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Decryptor for CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Encryptor for CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> SynchronousStreamCipher for CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrMode<A> {$/;"	s
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Decryptor for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Encryptor for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> SynchronousStreamCipher for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrModeX8<A> {$/;"	s
CtrTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct CtrTest {$/;"	s	module:test
CtrTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CtrTest {$/;"	c	module:test
CtrTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CtrTest {$/;"	s	module:test
CurveGen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    impl CurveGen {$/;"	c	module:tests
CurveGen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    impl Iterator for CurveGen {$/;"	c	module:tests
CurveGen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    struct CurveGen {$/;"	s	module:tests
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^impl<K: Key> Batch<K> for Database<K> {$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/compaction.rs	/^impl<'a, K: Key + 'a> Compaction<'a, K> for Database<K> {$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a, K: Key + 'a> Iterable<'a, K> for Database<K> {$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^impl<K: Key> KV<K> for Database<K> {$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^impl<K: Key> Database<K> {$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub struct Database<K: Key> {$/;"	s
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^unsafe impl<K: Key> Send for Database<K> {}$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^unsafe impl<K: Key> Sync for Database<K> {}$/;"	c
Database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^impl<K: Key> Snapshots<K> for Database<K> {$/;"	c
DecPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> DecPadding<X> {$/;"	c
DecPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for DecPadding<X> {$/;"	c
DecPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct DecPadding<X> {$/;"	s
Decryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    Decryption$/;"	e	enum:KeyType
Decryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    Decryption$/;"	e	enum:KeyType
Decryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Decryptor {$/;"	i
DefaultComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^impl Comparator for DefaultComparator {$/;"	c
DefaultComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^pub struct DefaultComparator;$/;"	s
Des	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Des,$/;"	e	enum:SymmetricCipherSpec
Digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^pub trait Digest {$/;"	i
DigestSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum DigestSpec {$/;"	g
ERR_STR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	v	function:pbkdf2_check
ERR_STR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	v	function:scrypt_check
Ebc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ebc,$/;"	e	enum:BlockModeSpec
EcbDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for EcbDecryptor<T, X> {$/;"	c
EcbDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> EcbDecryptor<T, X> {$/;"	c
EcbDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbDecryptor<T, X> {$/;"	s
EcbDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for EcbDecryptorProcessor<T> {$/;"	c
EcbDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbDecryptorProcessor<T> {$/;"	s
EcbEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> EcbEncryptor<T, X> {$/;"	c
EcbEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for EcbEncryptor<T, X> {$/;"	c
EcbEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbEncryptor<T, X> {$/;"	s
EcbEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for EcbEncryptorProcessor<T> {$/;"	c
EcbEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbEncryptorProcessor<T> {$/;"	s
EcbTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for EcbTest {$/;"	c	module:test
EcbTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct EcbTest {$/;"	s	module:test
EncPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> EncPadding<X> {$/;"	c
EncPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for EncPadding<X> {$/;"	c
EncPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EncPadding<X> {$/;"	s
Encryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    Encryption,$/;"	e	enum:KeyType
Encryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    Encryption,$/;"	e	enum:KeyType
Encryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Encryptor {$/;"	i
Engine256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256 {$/;"	c
Engine256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256 {$/;"	s
Engine256State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256State {$/;"	c
Engine256State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256State {$/;"	s
Engine512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512 {$/;"	c
Engine512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512 {$/;"	s
Engine512State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512State {$/;"	c
Engine512State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512State {$/;"	s
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^impl Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^impl std::error::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^impl std::fmt::Display for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^pub struct Error {$/;"	s
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    Error(SymmetricCipherError)$/;"	e	enum:BlockEngineState
FE_D	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D : Fe = Fe([-10913610,13857413,-15372611,6949391,114729,-8787816,-6275908,-3247719,-1/;"	v
FE_D2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D2 : Fe = Fe([-21827239,-5839606,-30745221,13898782,229458,15978800,-12551817,-6495438/;"	v
FE_ONE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ONE : Fe = Fe([1,0,0,0,0,0,0,0,0,0]);$/;"	v
FE_SQRTM1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_SQRTM1 : Fe = Fe([-32595792,-7943725,9377950,3500415,12389472,-272473,-25146209,-20056/;"	v
FE_ZERO	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ZERO : Fe = Fe([0,0,0,0,0,0,0,0,0,0]);$/;"	v
FastMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    FastMode,$/;"	e	enum:BlockEngineState
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Eq for Fe { }$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Mul for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl PartialEq for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct Fe(pub [i32; 10]);$/;"	s
FilterPolicy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/filter_policy.rs	/^pub trait FilterPolicy {$/;"	i
Finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    Finished,$/;"	e	enum:BlockEngineState
FixedBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait FixedBuffer {$/;"	i
FixedBuffer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	c
FixedBuffer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer128 {$/;"	c
FixedBuffer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer128 {$/;"	s
FixedBuffer64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	c
FixedBuffer64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer64 {$/;"	c
FixedBuffer64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer64 {$/;"	s
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Fortuna {$/;"	c
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Rng for Fortuna {$/;"	c
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl<'a> SeedableRng<&'a [u8]> for Fortuna {$/;"	c
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^pub struct Fortuna {$/;"	s
FortunaGenerator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl FortunaGenerator {$/;"	c
FortunaGenerator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^struct FortunaGenerator {$/;"	s
G	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	M
G	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	M
GE_PRECOMP_BASE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static GE_PRECOMP_BASE : [[GePrecomp; 8]; 32] = [$/;"	v
GeCached	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeCached {$/;"	s
GeP1P1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP1P1 {$/;"	c
GeP1P1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP1P1 {$/;"	s
GeP2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP2 {$/;"	c
GeP2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP2 {$/;"	s
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GeCached> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GePrecomp> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GeCached> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GePrecomp> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP3 {$/;"	s
GePrecomp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GePrecomp {$/;"	c
GePrecomp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GePrecomp {$/;"	s
Gf128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl BitXor for Gf128 {$/;"	c
Gf128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Gf128 {$/;"	c
Gf128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	s
Gf2Ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf2Ops {$/;"	i
Gf4Ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf4Ops {$/;"	i
Gf8Ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf8Ops {$/;"	i
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	c
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Ghash {$/;"	c
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Mac for Ghash {$/;"	c
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^pub struct Ghash {$/;"	s
GhashWithC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	c
GhashWithC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl GhashWithC {$/;"	c
GhashWithC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^pub struct GhashWithC {$/;"	s
H224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H224: [u32; STATE_LEN] = [$/;"	v
H256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H256: [u32; STATE_LEN] = [$/;"	v
H384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H384: [u64; STATE_LEN] = [$/;"	v
H512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512: [u64; STATE_LEN] = [$/;"	v
H512_TRUNC_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_224: [u64; STATE_LEN] = [$/;"	v
H512_TRUNC_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_256: [u64; STATE_LEN] = [$/;"	v
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Hc128,$/;"	e	enum:SymmetricCipherSpec
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Decryptor for Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Encryptor for Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl SynchronousStreamCipher for Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^pub struct Hc128 {$/;"	s
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Hmac,$/;"	e	enum:MacSpec
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Hmac<D> {$/;"	c
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Mac for Hmac<D> {$/;"	c
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^pub struct Hmac<D> {$/;"	s
IV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^static IV : [u64; 8] = [$/;"	v
IV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^static IV : [u32; 8] = [$/;"	v
InternalComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^unsafe trait InternalComparator : Comparator where Self: Sized {$/;"	i
InvalidLength	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    InvalidLength,$/;"	e	enum:SymmetricCipherError
InvalidPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    InvalidPadding$/;"	e	enum:SymmetricCipherError
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^  type Item = (K,Vec<u8>);$/;"	t	implementation:Iterator
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^  type Item = K;$/;"	t	implementation:KeyIterator
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^  type Item = Vec<u8>;$/;"	t	implementation:ValueIterator
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        type Item = Fe;$/;"	t	implementation:tests::CurveGen
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    type Item = T;$/;"	t
Iterable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^pub trait Iterable<'a, K: Key + 'a> {$/;"	i
Iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a, K: Key> Iterator<'a, K> {$/;"	c
Iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a, K: Key> LevelDBIterator<'a, K> for Iterator<'a,K> {$/;"	c
Iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a,K: Key> iter::Iterator for Iterator<'a,K> {$/;"	c
Iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^pub struct Iterator<'a, K: Key + 'a> {$/;"	s
K	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    type K: Key;$/;"	t	interface:WritebatchIterator
K	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    type K: Key;$/;"	t	interface:Comparator
K	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^  type K = K;$/;"	t	implementation:OrdComparator
K	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^  type K = i32;$/;"	t	implementation:DefaultComparator
K	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/filter_policy.rs	/^    type K: Key;$/;"	t	interface:FilterPolicy
KV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^pub trait KV<K: Key> {$/;"	i
KdfSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum KdfSpec {$/;"	g
Keccak224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak224,$/;"	e	enum:Sha3Mode
Keccak256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak256,$/;"	e	enum:Sha3Mode
Keccak384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak384,$/;"	e	enum:Sha3Mode
Keccak512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak512,$/;"	e	enum:Sha3Mode
KeyIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a, K: Key> iter::Iterator for KeyIterator<'a,K> {$/;"	c
KeyIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a,K: Key> KeyIterator<'a,K> {$/;"	c
KeyIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a,K: Key> LevelDBIterator<'a, K> for KeyIterator<'a,K> {$/;"	c
KeyIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^pub struct KeyIterator<'a, K: Key + 'a> {$/;"	s
KeySize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub enum KeySize {$/;"	g
KeySize128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize128,$/;"	e	enum:KeySize
KeySize192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize192,$/;"	e	enum:KeySize
KeySize256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize256$/;"	e	enum:KeySize
KeyType	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^enum KeyType {$/;"	g
KeyType	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^enum KeyType {$/;"	g
L	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^static L: [u8; 32] =$/;"	v
LastInput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    LastInput,$/;"	e	enum:BlockEngineState
LastInput2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    LastInput2,$/;"	e	enum:BlockEngineState
LevelDBIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^pub trait LevelDBIterator<'a, K: Key> {$/;"	i
Mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^pub trait Mac {$/;"	i
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl Eq for MacResult { }$/;"	c
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl MacResult {$/;"	c
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl PartialEq for MacResult {$/;"	c
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^pub struct MacResult {$/;"	s
MacSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum MacSpec {$/;"	g
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Md5,$/;"	e	enum:DigestSpec
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Digest for Md5 {$/;"	c
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Md5 {$/;"	c
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^pub struct Md5 {$/;"	s
Md5State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Md5State {$/;"	c
Md5State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^struct Md5State {$/;"	s
NeedInput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    NeedInput,$/;"	e	enum:BlockEngineState
NeedOutput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    NeedOutput,$/;"	e	enum:BlockEngineState
NoPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    NoPadding,$/;"	e	enum:BlodeModePaddingSpec
NoPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for NoPadding {$/;"	c
NoPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct NoPadding;$/;"	s
Options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^impl Options {$/;"	c
Options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^pub struct Options {$/;"	s
OrdComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^impl<K: Key + Ord> Comparator for OrdComparator<K> {$/;"	c
OrdComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^impl<K: Key + Ord> OrdComparator<K> {$/;"	c
OrdComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^pub struct OrdComparator<K: Key + Ord> {$/;"	s
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    type Output = u32x4;$/;"	t	implementation:u32x4
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = Fe;$/;"	t	implementation:Fe
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = GeP1P1;$/;"	t	implementation:GeP3
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    type Output = Gf128;$/;"	t	implementation:Gf128
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u32x4;$/;"	t	implementation:fake::u32x4
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u64x2;$/;"	t	implementation:fake::u64x2
OwnedReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedReadBuffer {$/;"	c
OwnedReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl ReadBuffer for OwnedReadBuffer {$/;"	c
OwnedReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedReadBuffer {$/;"	s
OwnedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedWriteBuffer {$/;"	c
OwnedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl WriteBuffer for OwnedWriteBuffer {$/;"	c
OwnedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedWriteBuffer {$/;"	s
PaddingProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub trait PaddingProcessor {$/;"	i
Pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Pbkdf2,$/;"	e	enum:KdfSpec
Pkcs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Pkcs,$/;"	e	enum:BlodeModePaddingSpec
PkcsPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for PkcsPadding {$/;"	c
PkcsPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct PkcsPadding;$/;"	s
Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^impl Mac for Poly1305 {$/;"	c
Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^impl Poly1305 {$/;"	c
Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^pub struct Poly1305 {$/;"	s
Pool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Pool {$/;"	c
Pool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^struct Pool {$/;"	s
ProofOfWork	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^impl<'a> ProofOfWork<'a> {$/;"	c
ProofOfWork	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^pub struct ProofOfWork<'a> {$/;"	s
R	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static R: usize = 10;$/;"	v
RC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static RC: [u64; 11 \/* R + 1 *\/] = [$/;"	v
RCON	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^static RCON: [u32; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];$/;"	v
Range	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> RangeExt<T> for Range<T> where$/;"	c
RangeExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^pub trait RangeExt<T> {$/;"	i
RawCache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^impl Drop for RawCache {$/;"	c
RawCache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^struct RawCache {$/;"	s
RawComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^impl Drop for RawComparator {$/;"	c
RawComparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^struct RawComparator {$/;"	s
RawDB	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^impl Drop for RawDB {$/;"	c
RawDB	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^struct RawDB {$/;"	s
RawIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl Drop for RawIterator {$/;"	c
RawIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^struct RawIterator {$/;"	s
RawSnapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^impl Drop for RawSnapshot {$/;"	c
RawSnapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^struct RawSnapshot {$/;"	s
RawWritebatch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^impl Drop for RawWritebatch {$/;"	c
RawWritebatch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^struct RawWritebatch {$/;"	s
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Rc4,$/;"	e	enum:SymmetricCipherSpec
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Decryptor for Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Encryptor for Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl SynchronousStreamCipher for Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^pub struct Rc4 {$/;"	s
ReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub trait ReadBuffer {$/;"	i
ReadOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^impl<'a, K: Key + 'a> ReadOptions<'a, K> {$/;"	c
ReadOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^pub struct ReadOptions<'a, K: Key + 'a> {$/;"	s
RefReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> ReadBuffer for RefReadBuffer<'a> {$/;"	c
RefReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefReadBuffer<'a> {$/;"	c
RefReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefReadBuffer<'a> {$/;"	s
RefWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefWriteBuffer<'a> {$/;"	c
RefWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for RefWriteBuffer<'a> {$/;"	c
RefWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefWriteBuffer<'a> {$/;"	s
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ripemd160,$/;"	e	enum:DigestSpec
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Digest for Ripemd160 {$/;"	c
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Ripemd160 {$/;"	c
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^pub struct Ripemd160 {$/;"	s
RoundSetupInfo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^type RoundSetupInfo = (u8, fn(&[u8], KeyType, &mut [u8]));$/;"	t
S12	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S12:u32x4 = u32x4(12, 12, 12, 12);$/;"	v
S16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S16:u32x4 = u32x4(16, 16, 16, 16);$/;"	v
S32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S32:u32x4 = u32x4(32, 32, 32, 32);$/;"	v
S7	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S7:u32x4 = u32x4(7, 7, 7, 7);$/;"	v
S8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S8:u32x4 = u32x4(8, 8, 8, 8);$/;"	v
SIGMA	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^static SIGMA : [[usize; 16]; 12] = [$/;"	v
SIGMA	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^static SIGMA : [[usize; 16]; 10] = [$/;"	v
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Salsa20,$/;"	e	enum:SymmetricCipherSpec
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Decryptor for Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Encryptor for Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl SynchronousStreamCipher for Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^pub struct Salsa20 {$/;"	s
SalsaState	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^struct SalsaState {$/;"	s
Scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Scrypt,$/;"	e	enum:KdfSpec
ScryptParams	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^impl ScryptParams {$/;"	c
ScryptParams	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub struct ScryptParams {$/;"	s
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha1,$/;"	e	enum:DigestSpec
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^impl Digest for Sha1 {$/;"	c
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^impl Sha1 {$/;"	c
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub struct Sha1 {$/;"	s
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha224,$/;"	e	enum:DigestSpec
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha224 {$/;"	c
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha224 {$/;"	c
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha224 {$/;"	s
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha256,$/;"	e	enum:DigestSpec
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha256 {$/;"	c
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha256 {$/;"	c
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha256 {$/;"	s
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Clone for Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Copy for Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Digest for Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^pub struct Sha3 {$/;"	s
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha384,$/;"	e	enum:DigestSpec
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha384 {$/;"	c
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha384 {$/;"	c
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha384 {$/;"	s
Sha3Mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3Mode {$/;"	c
Sha3Mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^pub enum Sha3Mode {$/;"	g
Sha3_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_224,$/;"	e	enum:Sha3Mode
Sha3_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_256,$/;"	e	enum:Sha3Mode
Sha3_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_384,$/;"	e	enum:Sha3Mode
Sha3_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_512,$/;"	e	enum:Sha3Mode
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha512,$/;"	e	enum:DigestSpec
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512 {$/;"	c
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512 {$/;"	c
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512 {$/;"	s
Sha512Trunc224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc224 {$/;"	c
Sha512Trunc224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc224 {$/;"	c
Sha512Trunc224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc224 {$/;"	s
Sha512Trunc256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc256 {$/;"	c
Sha512Trunc256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc256 {$/;"	c
Sha512Trunc256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc256 {$/;"	s
Shake128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Shake128,$/;"	e	enum:Sha3Mode
Shake256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Shake256,$/;"	e	enum:Sha3Mode
SimdExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^pub trait SimdExt {$/;"	i
Snapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^impl<'a, K: Key + 'a> Iterable<'a, K> for Snapshot<'a, K> {$/;"	c
Snapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^impl<'a, K: Key> Snapshot<'a, K> {$/;"	c
Snapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^pub struct Snapshot<'a, K: Key + 'a> {$/;"	s
Snapshots	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^pub trait Snapshots<K: Key> {$/;"	i
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sosemanuk,$/;"	e	enum:SymmetricCipherSpec
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Decryptor for Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Encryptor for Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl SynchronousStreamCipher for Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^pub struct Sosemanuk {$/;"	s
StandardPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait StandardPadding {$/;"	i
StepUp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> Iterator for StepUp<T> where$/;"	c
StepUp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^pub struct StepUp<T> {$/;"	s
SymmetricCipherError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub enum SymmetricCipherError {$/;"	g
SymmetricCipherSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum SymmetricCipherSpec {$/;"	g
SynchronousStreamCipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait SynchronousStreamCipher {$/;"	i
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T: FixedBuffer> StandardPadding for T {$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T> WriteExt for T where T: io::Write {$/;"	c
TESTS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	v	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test {$/;"	s	function:test::test_bcrypt_hash
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test{$/;"	s	function:test::test_openbsd_vectors
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    struct Test {$/;"	s	module:digest_tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    struct Test {$/;"	s	module:digest_tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    struct Test {$/;"	s	module:tests
TestData	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct TestData {$/;"	s	module:test
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    struct TestVector {$/;"	s	module:test
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s	function:test::test_chacha20_256_tls_vectors
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s	function:test::test_chacha20_256_tls_vectors_96_nonce
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  struct TestVector {$/;"	s	module:test
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    struct TestVector<D: Digest>{$/;"	s	module:test
ValueIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a, K: Key> iter::Iterator for ValueIterator<'a,K> {$/;"	c
ValueIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a,K: Key> LevelDBIterator<'a, K> for ValueIterator<'a,K> {$/;"	c
ValueIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^impl<'a,K: Key> ValueIterator<'a,K> {$/;"	c
ValueIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^pub struct ValueIterator<'a, K: Key + 'a> {$/;"	s
Version	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/lib.rs	/^pub trait Version {$/;"	i
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Whirlpool,$/;"	e	enum:DigestSpec
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Digest for Whirlpool {$/;"	c
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Whirlpool {$/;"	c
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^pub struct Whirlpool {$/;"	s
WriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub trait WriteBuffer {$/;"	i
WriteExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait WriteExt {$/;"	i
WriteOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^impl WriteOptions {$/;"	c
WriteOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^pub struct WriteOptions {$/;"	s
Writebatch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^impl<K: Key> Writebatch<K> {$/;"	c
Writebatch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^pub struct Writebatch<K: Key> {$/;"	s
WritebatchIterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^pub trait WritebatchIterator {$/;"	i
XSalsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    XSalsa20,$/;"	e	enum:SymmetricCipherSpec
a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  a: u32x4,$/;"	m	struct:ChaChaState
a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  a: u32x4,$/;"	m	struct:SalsaState
a_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    a_len: usize,$/;"	m	struct:Ghash
a_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    a_len: usize,$/;"	m	struct:GhashWithC
aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                aad: Vec<u8>,$/;"	m	struct:test::TestVector
aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    aad: Vec<u8>,$/;"	m	struct:test::TestVector
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GeCached) -> GeP1P1 {$/;"	P	implementation:GeP3
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	P	implementation:GeP3
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u64x2) -> u64x2 {$/;"	P	implementation:fake::u64x2
add_block	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn add_block(&mut self, data: &str) {$/;"	P	implementation:Blockchain
add_bytes_to_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits(bits: u64, bytes: u64) -> u64 {$/;"	f
add_bytes_to_bits_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits_tuple$/;"	f
add_ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn add_ctr(ctr: &mut [u8], mut ammount: u8) {$/;"	f
add_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn add_input(st: &mut Sha1, msg: &[u8]) {$/;"	f
add_random_event	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn add_random_event(&mut self, s: u8, i: usize, e: &[u8]) {$/;"	P	implementation:Fortuna
add_rotate_xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! add_rotate_xor {$/;"	M
add_round_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Bs8State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs8State
add_round_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Self) -> Self;$/;"	P	interface:AesOps
advance	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn advance(&mut self) -> bool {$/;"	P	interface:LevelDBIterator
advance_state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn advance_state(&mut self) {$/;"	P	implementation:Sosemanuk
aead	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aead;$/;"	n
aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes;$/;"	n
aes_cbc_no_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding() {$/;"	f	module:test
aes_cbc_no_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding_tests() -> Vec<CbcTest> {$/;"	f	module:test
aes_cbc_pkcs_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding() {$/;"	f	module:test
aes_cbc_pkcs_padding_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_cbc_pkcs_padding_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_cbc_pkcs_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding_tests() -> Vec<CbcTest> {$/;"	f	module:test
aes_ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr() {$/;"	f	module:test
aes_ctr_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ctr_box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_box() {$/;"	f	module:test
aes_ctr_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f	module:test
aes_ctr_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f	module:test
aes_ctr_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_x8() {$/;"	f	module:test
aes_ctr_x8_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_x8_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ecb_no_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding() {$/;"	f	module:test
aes_ecb_no_padding_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ecb_no_padding_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ecb_no_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding_tests() -> Vec<EcbTest> {$/;"	f	module:test
aes_ecb_pkcs_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding() {$/;"	f	module:test
aes_ecb_pkcs_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding_tests() -> Vec<EcbTest> {$/;"	f	module:test
aes_gcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes_gcm;$/;"	n
aes_gcm_decrypt_fail_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_fail_test() {$/;"	f	module:test
aes_gcm_decrypt_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_test() {$/;"	f	module:test
aes_gcm_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_test() {$/;"	f	module:test
aes_safe_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_safe_x8_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_x8_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aesni;$/;"	n
aesni_128_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_128_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_192_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_192_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_256_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_256_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aesni_bench(bh: &mut Bencher, key_size: KeySize) {$/;"	f	module:bench
aessafe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aessafe;$/;"	n
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: A,$/;"	m	struct:CtrMode
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: A,$/;"	m	struct:CtrModeX8
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T$/;"	m	struct:EcbDecryptorProcessor
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T$/;"	m	struct:EcbEncryptorProcessor
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T,$/;"	m	struct:CbcDecryptorProcessor
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T,$/;"	m	struct:CbcEncryptorProcessor
ammount	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    ammount: T$/;"	m	struct:StepUp
apply_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_key(&mut self) {$/;"	P	implementation:Blake2b
apply_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_key(&mut self) {$/;"	P	implementation:Blake2s
apply_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_param(&mut self) {$/;"	P	implementation:Blake2b
apply_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_param(&mut self) {$/;"	P	implementation:Blake2s
b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  b: u32x4,$/;"	m	struct:ChaChaState
b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  b: u32x4,$/;"	m	struct:SalsaState
base_example	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn base_example() {$/;"	f	module:tests
batch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod batch;$/;"	n
bcrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^pub fn bcrypt(cost: u32, salt: &[u8], password: &[u8], output: &mut [u8]) {$/;"	f
bcrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt;$/;"	n
bcrypt_16_5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    pub fn bcrypt_16_5(bh: & mut Bencher) {$/;"	f	module:bench
bcrypt_pbkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^pub fn bcrypt_pbkdf(password: &[u8], salt: &[u8], rounds: u32, output: &mut [u8]) {$/;"	f
bcrypt_pbkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt_pbkdf;$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod bench {$/;"	n
bench_bcrypt_pbkdf_5_32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn bench_bcrypt_pbkdf_5_32(b: &mut Bencher) {$/;"	f	module:bench
big_sigma0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	M	function:sha256_digest_round_x2
big_sigma0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	M	function:sha512_digest_round
big_sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	M	function:sha256_digest_round_x2
big_sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	M	function:sha512_digest_round
bit_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    bit_length: [u8; 32],$/;"	m	struct:Whirlpool
bit_slice_1x128_with_u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x128_with_u32x4(data: &[u8]) -> Bs8State<u32x4> {$/;"	f
bit_slice_1x16_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x16_with_u16(data: &[u8]) -> Bs8State<u16> {$/;"	f
bit_slice_4x1_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x1_with_u16(a: u32) -> Bs8State<u16> {$/;"	f
bit_slice_4x4_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x4_with_u16(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u16> {$/;"	f
bit_slice_fill_4x4_with_u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_fill_4x4_with_u32x4(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u32x4> {$/;"	f
bitand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitand(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitor(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bitxor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn bitxor(self, rhs: Gf128) -> Gf128 {$/;"	P	implementation:Gf128
bitxor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitxor(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	P	implementation:Blake2b
blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2b;$/;"	n
blake2b_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_10(bh: & mut Bencher) {$/;"	f	module:bench
blake2b_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_1k(bh: & mut Bencher) {$/;"	f	module:bench
blake2b_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_64k(bh: & mut Bencher) {$/;"	f	module:bench
blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	P	implementation:Blake2s
blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2s;$/;"	n
blake2s_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_10(bh: & mut Bencher) {$/;"	f	module:bench
blake2s_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_1k(bh: & mut Bencher) {$/;"	f	module:bench
blake2s_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_64k(bh: & mut Bencher) {$/;"	f	module:bench
block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn block(&mut self, m: &[u8]) {$/;"	P	implementation:Poly1305
block	/home/lieroz/blockchain_rust/src/main.rs	/^mod block;$/;"	n
block	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    block: &'a Block,$/;"	m	struct:ProofOfWork
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<CbcDecryptorProcessor<T>, X>$/;"	m	struct:CbcDecryptor
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<CbcEncryptorProcessor<T>, X>$/;"	m	struct:CbcEncryptor
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<EcbDecryptorProcessor<T>, X>$/;"	m	struct:EcbDecryptor
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<EcbEncryptorProcessor<T>, X>$/;"	m	struct:EcbEncryptor
block_restart_interval	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub block_restart_interval: Option<i32>,$/;"	m	struct:Options
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub block_size: Option<size_t>,$/;"	m	struct:Options
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	P	implementation:AesNiDecryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	P	implementation:AesNiEncryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2B_BLOCKBYTES }$/;"	P	implementation:Blake2b
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2S_BLOCKBYTES }$/;"	P	implementation:Blake2s
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_size: usize,$/;"	m	struct:BlockEngine
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Blowfish
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:Digest
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Md5
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Ripemd160
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha1
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha384
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512Trunc224
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512Trunc256
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha224
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha256
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Sha3
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockDecryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockDecryptorX8
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockEncryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockEncryptorX8
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Whirlpool
blockchain	/home/lieroz/blockchain_rust/src/main.rs	/^mod blockchain;$/;"	n
blockmodes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blockmodes;$/;"	n
blocks	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub blocks: Vec<Block>,$/;"	m	struct:Blockchain
blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn blowfish(bh: &mut Bencher) {$/;"	f	module:bench
blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blowfish;$/;"	n
bool3ary_150	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_150 {$/;"	M	function:sha1rnds4p
bool3ary_202	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha1rnds4c
bool3ary_202	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha256_digest_round_x2
bool3ary_202	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha512_digest_round
bool3ary_232	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha1rnds4m
bool3ary_232	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha256_digest_round_x2
bool3ary_232	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha512_digest_round
borrow_write_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn borrow_write_buffer(&mut self) -> BorrowedWriteBuffer {$/;"	P	implementation:OwnedReadBuffer
buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    buf: [u8; 2*BLAKE2B_BLOCKBYTES],$/;"	m	struct:Blake2b
buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    buf: [u8; 2*BLAKE2S_BLOCKBYTES],$/;"	m	struct:Blake2s
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: &'a [u8],$/;"	m	struct:RefReadBuffer
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: &'a mut [u8],$/;"	m	struct:RefWriteBuffer
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: Vec<u8>,$/;"	m	struct:OwnedReadBuffer
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: Vec<u8>,$/;"	m	struct:OwnedWriteBuffer
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer: [u8; 128],$/;"	m	struct:FixedBuffer128
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer: [u8; 64],$/;"	m	struct:FixedBuffer64
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod buffer;$/;"	n
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Md5
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    buffer    : [u8; 16],$/;"	m	struct:Poly1305
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Ripemd160
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Sha1
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    buffer: FixedBuffer128,$/;"	m	struct:Engine512
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Engine256
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Whirlpool
buffer_idx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer_idx: usize,$/;"	m	struct:FixedBuffer128
buffer_idx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer_idx: usize,$/;"	m	struct:FixedBuffer64
buflen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    buflen: usize,$/;"	m	struct:Blake2b
buflen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    buflen: usize,$/;"	m	struct:Blake2s
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    bytes: OwnedReadBuffer$/;"	m	struct:CtrMode
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    bytes: OwnedReadBuffer$/;"	m	struct:CtrModeX8
c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  c: u32x4,$/;"	m	struct:ChaChaState
c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        c: u32,$/;"	m	struct:test::Test
c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  c: u32x4,$/;"	m	struct:SalsaState
c_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    c_len: usize,$/;"	m	struct:GhashWithC
c_options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^pub unsafe fn c_options(options: &Options,$/;"	f
c_readoptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^pub unsafe fn c_readoptions<'a, K>(options: &ReadOptions<'a, K>) -> *mut leveldb_readoptions_t$/;"	f
c_writeoptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^pub unsafe fn c_writeoptions(options: WriteOptions) -> *mut leveldb_writeoptions_t {$/;"	f
cache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod cache;$/;"	n
cache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub cache: Option<Cache>,$/;"	m	struct:Options
calculate_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^fn calculate_block<M: Mac>($/;"	f
can_absorb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    can_absorb: bool,  \/\/ Can absorb$/;"	m	struct:Sha3
can_squeeze	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    can_squeeze: bool,  \/\/ Can squeeze$/;"	m	struct:Sha3
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.buff.len() }$/;"	P	implementation:RefReadBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:BorrowedWriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:OwnedReadBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:OwnedWriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:RefWriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	P	interface:ReadBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	P	interface:WriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn capacity(&self) -> usize {$/;"	P	implementation:Sha3Mode
cause	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^    fn cause(&self) -> Option<&std::error::Error> {$/;"	P	implementation:Error
cbc_decryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
cbc_encryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
chacha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20;$/;"	n
chacha20_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_10(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_1k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_64k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20poly1305;$/;"	n
chacha20poly1305_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_10(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_1k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_64k(bh: & mut Bencher) {$/;"	f	module:bench
change_basis_a2x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_a2x(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_s2x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_s2x(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_x2a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2a(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_x2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2s(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
check_s_lt_l	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^fn check_s_lt_l(s: &[u8]) -> bool$/;"	f
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CtrTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::TestData
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    cipher: Box<SynchronousStreamCipher + 'a>,$/;"	m	struct:AesGcm
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CbcTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CtrTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::EcbTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    cipher  : ChaCha20,$/;"	m	struct:ChaCha20Poly1305
cipher_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                cipher_text:  Vec<u8>,$/;"	m	struct:test::TestVector
cipher_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    cipher_text: Vec<u8>,$/;"	m	struct:test::TestVector
ciphertext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        ciphertext: Vec<u8>$/;"	m	struct:test::Test
circular_shift	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^fn circular_shift(bits: u32, word: u32) -> u32 {$/;"	f
clear	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Writebatch
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	P	implementation:AesNiDecryptor
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	P	implementation:AesNiEncryptor
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	P	implementation:Blake2b
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	P	implementation:Blake2s
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	P	implementation:ChaCha20
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	P	implementation:FixedBuffer128
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	P	implementation:FixedBuffer64
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	P	implementation:Ghash
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	P	implementation:GhashWithC
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	P	implementation:Hc128
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	P	implementation:Rc4
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	P	implementation:Salsa20
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Sha3
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	P	implementation:Sosemanuk
cnt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    cnt: usize,$/;"	m	struct:Hc128
code	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    code: Vec<u8>$/;"	m	struct:MacResult
code	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn code<'s>(&'s self) -> &'s [u8] {$/;"	P	implementation:MacResult
columnround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^fn columnround(state: &mut SalsaState) -> () {$/;"	f
compact	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/compaction.rs	/^    fn compact(&self, start: &'a K, limit: &'a K) {$/;"	P	implementation:Database
compact	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/compaction.rs	/^    fn compact(&self, start: &'a K, limit: &'a K);$/;"	P	interface:Compaction
compaction	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod compaction;$/;"	n
comparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    comparator: Option<RawComparator>,$/;"	m	struct:Database
comparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod comparator;$/;"	n
compare	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    extern "C" fn compare(state: *mut c_void,$/;"	P	interface:InternalComparator
compare	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn compare(&self, _a: &i32, _b: &i32) -> Ordering {$/;"	P	implementation:DefaultComparator
compare	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn compare(&self, a: &K, b: &K) -> Ordering {$/;"	P	implementation:OrdComparator
compare	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn compare(&self, a: &Self::K, b: &Self::K) -> Ordering;$/;"	P	interface:Comparator
compress	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn compress(&mut self) {$/;"	P	implementation:Blake2b
compress	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn compress(&mut self) {$/;"	P	implementation:Blake2s
compression	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub compression: Compression,$/;"	m	struct:Options
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    computed: bool, \/\/ whether the final digest has been computed$/;"	m	struct:Blake2b
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    computed: bool, \/\/ whether the final digest has been computed$/;"	m	struct:Blake2s
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    computed: bool,$/;"	m	struct:Ripemd160
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    computed: bool,$/;"	m	struct:Sha1
cond_xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn cond_xor(self, x: Gf128, y: Gf128) -> Gf128 {$/;"	P	implementation:Gf128
construct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn construct(a: u32, b: u32, c: u32, d: u32, bit: u32) -> u16 {$/;"	f	function:bit_slice_4x4_with_u16
construct_ctr_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn construct_ctr_x8(in_ctr: &[u8], out_ctr_x8: &mut [u8]) {$/;"	f
copy_memory	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn copy_memory(src: &[u8], dst: &mut [u8]) {$/;"	f
cost	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        cost: u32,$/;"	m	struct:test::Test
count	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    count: usize$/;"	m	struct:Pool
create_comparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^pub fn create_comparator<T: Comparator>(x: Box<T>) -> *mut leveldb_comparator_t {$/;"	f
create_filter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/filter_policy.rs	/^    fn create_filter(&self, key_array: &[Self::K], num_keys: i64, filter_length: i64) -> ;$/;"	P	interface:FilterPolicy
create_if_missing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub create_if_missing: bool,$/;"	m	struct:Options
create_keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn create_keys<D: Digest>(digest: &mut D, key: &[u8]) -> (Vec<u8>, Vec<u8>) {$/;"	f
cryptoutil	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod cryptoutil;$/;"	n
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        ctr: Vec<u8>,$/;"	m	struct:test::CtrTest
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ctr($/;"	f
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        ctr: Vec<u8>,$/;"	m	struct:test::CtrTest
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    ctr: Vec<u8>,$/;"	m	struct:CtrMode
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    ctr: [u8; CTR_LEN],$/;"	m	struct:FortunaGenerator
ctr_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    ctr_x8: Vec<u8>,$/;"	m	struct:CtrModeX8
current_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn current_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	P	interface:FixedBuffer
curve25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519(n: &[u8], p: &[u8]) -> [u8; 32] {$/;"	f
curve25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod curve25519;$/;"	n
curve25519_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519_base(x: &[u8]) -> [u8; 32] {$/;"	f
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  d: u32x4$/;"	m	struct:ChaChaState
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	m	struct:Gf128
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  d: u32x4$/;"	m	struct:SalsaState
data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        data: Vec<TestData>$/;"	m	struct:test::Test
data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        data: Vec<u8>,$/;"	m	struct:test::Test
data	/home/lieroz/blockchain_rust/src/block.rs	/^    data: String,$/;"	m	struct:Block
data	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn data(&self) -> &str {$/;"	P	implementation:Block
data_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    data_len: usize$/;"	m	struct:ChaCha20Poly1305
database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    database: PhantomData<&'a Database<K>>,$/;"	m	struct:Iterator
database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    database: PhantomData<&'a Database<K>>,$/;"	m	struct:KeyIterator
database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    database: PhantomData<&'a Database<K>>,$/;"	m	struct:ValueIterator
database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    database: RawDB,$/;"	m	struct:Database
database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    database: &'a Database<K>,$/;"	m	struct:Snapshot
database	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/lib.rs	/^pub mod database;$/;"	n
db_ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    db_ptr: *mut leveldb_t,$/;"	m	struct:RawSnapshot
dbl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	P	implementation:GeP2
dbl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	P	implementation:GeP3
deconstruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn deconstruct(bs: &Bs8State<u16>, bit: u32) -> u32 {$/;"	f	function:un_bit_slice_4x4_with_u16
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^	fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool;$/;"	P	interface:AeadDecryptor
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8])  -> bool {$/;"	P	implementation:AesGcm
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrMode
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrModeX8
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:CbcDecryptor
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:EcbDecryptor
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	P	implementation:Blowfish
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:ChaCha20
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool {$/;"	P	implementation:ChaCha20Poly1305
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Hc128
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Rc4
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Salsa20
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Sosemanuk
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Box
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	interface:Decryptor
decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:AesNiDecryptor
decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Blowfish
decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockDecryptor
decrypt_block_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn decrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockDecryptorX8
decrypt_core	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn decrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
decrypt_eay_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_eay_test_vectors() {$/;"	f	module:test
default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn default() -> u32x4 {$/;"	P	implementation:u32x4
default_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn default_param(outlen: u8) -> Blake2bParam {$/;"	P	implementation:Blake2b
default_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn default_param(outlen: u8) -> Blake2sParam {$/;"	P	implementation:Blake2s
define_aes_dec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec($/;"	M
define_aes_dec_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec_x8($/;"	M
define_aes_enc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc($/;"	M
define_aes_enc_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc_x8($/;"	M
define_aes_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl($/;"	M
define_aes_impl_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl_x8($/;"	M
define_aes_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct($/;"	M
define_aes_struct_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct_x8($/;"	M
delete	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    pub fn delete(&mut self, key: K) {$/;"	P	implementation:Writebatch
delete	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^    fn delete<BK: Borrow<K>>(&self, options: WriteOptions, key: BK) -> Result<(), Error> {$/;"	P	implementation:Database
delete	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^    fn delete<BK: Borrow<K>>(&self, options: WriteOptions, key: BK) -> Result<(), Error>;$/;"	P	interface:KV
deleted	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    fn deleted(&mut self, key: Self::K);$/;"	P	interface:WritebatchIterator
deleted_callback	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^extern "C" fn deleted_callback<K: Key, T: WritebatchIterator<K = K>>(state: *mut c_void,$/;"	f
depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    depth: u8,$/;"	m	struct:Blake2bParam
depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    depth: u8,$/;"	m	struct:Blake2sParam
derive_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn derive_key(key: &mut [u8], mask: u8) {$/;"	f
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
destroy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/management.rs	/^pub fn destroy(name: &Path, options: Options) -> Result<(), Error> {$/;"	f
destructor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    extern "C" fn destructor(state: *mut c_void) {$/;"	P	interface:InternalComparator
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        digest: D,$/;"	m	struct:test::TestVector
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    digest: D,$/;"	m	struct:Hmac
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod digest;$/;"	n
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    digest_length: u8,$/;"	m	struct:Blake2b
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    digest_length: u8,$/;"	m	struct:Blake2bParam
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    digest_length: u8,$/;"	m	struct:Blake2s
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    digest_length: u8,$/;"	m	struct:Blake2sParam
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn digest_length(&self) -> usize {$/;"	P	implementation:Sha3Mode
digest_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod digest_tests {$/;"	n
digest_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod digest_tests {$/;"	n
donna_self_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn donna_self_test() {$/;"	f	module:test
double_scalarmult_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn double_scalarmult_vartime(a_scalar: &[u8], a_point: GeP3, b_scalar: &[u8]) -> GeP2 {$/;"	P	implementation:GeP2
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RawWritebatch
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RawCache
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RawIterator
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RawComparator
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RawDB
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RawSnapshot
eay_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn eay_test_vectors() -> Vec<Test> {$/;"	f	module:test
ecb_decryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ecb_encryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ed25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ed25519;$/;"	n
edwards_to_montgomery_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^fn edwards_to_montgomery_x(ed_y: Fe) -> Fe {$/;"	f
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^	fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]);$/;"	P	interface:AeadEncryptor
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]) {$/;"	P	implementation:AesGcm
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrMode
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrModeX8
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:CbcEncryptor
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:EcbEncryptor
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn encrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	P	implementation:Blowfish
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:ChaCha20
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], out_tag: &mut [u8]) {$/;"	P	implementation:ChaCha20Poly1305
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Hc128
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Rc4
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Salsa20
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Sosemanuk
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Box
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	interface:Encryptor
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:AesNiEncryptor
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Blowfish
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockEncryptor
encrypt_block_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn encrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockEncryptorX8
encrypt_core	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn encrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
encrypt_eay_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_eay_test_vectors() {$/;"	f	module:test
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    end: T,$/;"	m	struct:StepUp
end_tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    end_tag: [u8; 16]$/;"	m	struct:AesGcm
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine256$/;"	m	struct:Sha224
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine256$/;"	m	struct:Sha256
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha384
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512Trunc224
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512Trunc256
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn eq(&self, other: &Fe) -> bool {$/;"	P	implementation:Fe
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn eq(&self, x: &MacResult) -> bool {$/;"	P	implementation:MacResult
equal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn equal(b: u8, c: u8) -> i32 {$/;"	f
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod error;$/;"	n
error_if_exists	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub error_if_exists: bool,$/;"	m	struct:Options
exchange	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn exchange(public_key: &[u8], private_key: &[u8]) -> [u8; 32] {$/;"	f
expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> ChaChaState {$/;"	P	implementation:ChaCha20
expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> SalsaState {$/;"	P	implementation:Salsa20
expand_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn expand_key(&mut self, key: &[u8]) {$/;"	P	implementation:Blowfish
expand_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn expand_key<D: Digest>(digest: &mut D, key: &[u8]) -> Vec<u8> {$/;"	f
expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    f: [u64; 2],$/;"	m	struct:Blake2b
f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    f: [u32; 2],$/;"	m	struct:Blake2s
f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn f(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
f1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^fn f1(x: u32) -> u32 {$/;"	f
f2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^fn f2(x: u32) -> u32 {$/;"	f
fake	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^mod fake {$/;"	n
fanout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fanout: u8,$/;"	m	struct:Blake2bParam
fanout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fanout: u8,$/;"	m	struct:Blake2sParam
fast_mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn fast_mode<R: ReadBuffer, W: WriteBuffer>($/;"	P	implementation:BlockEngine
ffmulx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn ffmulx(x: u32) -> u32 {$/;"	f
fill_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:Fortuna
fill_cache	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub fill_cache: bool,$/;"	m	struct:ReadOptions
finalize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	P	implementation:Blake2b
finalize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	P	implementation:Blake2s
finalize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn finalize(&mut self) {$/;"	P	implementation:Sha3
finalized	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    finalized : bool,$/;"	m	struct:Poly1305
finalized	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    finalized: bool,$/;"	m	struct:Whirlpool
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Poly1305
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Engine256
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Engine512
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    finished: bool,$/;"	m	struct:AesGcm
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    finished: bool,$/;"	m	struct:ChaCha20Poly1305
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    finished: bool$/;"	m	struct:Ghash
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    finished: bool$/;"	m	struct:Hmac
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    finished: bool,$/;"	m	struct:Md5
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    finished: bool,$/;"	m	struct:Engine256
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    finished: bool,$/;"	m	struct:Engine512
fixed_time_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn fixed_time_eq(lhs: &[u8], rhs: &[u8]) -> bool {$/;"	f
flush	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn flush(&mut self) {$/;"	P	implementation:Ghash
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {$/;"	P	implementation:Error
fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod fortuna;$/;"	n
fortuna_new_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_1k(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_32(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64k(bh: &mut Bencher) {$/;"	f	module:bench
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from(mut self, key: &'a K) -> Self {$/;"	P	implementation:Iterator
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from(mut self, key: &'a K) -> Self {$/;"	P	implementation:KeyIterator
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from(mut self, key: &'a K) -> Self {$/;"	P	implementation:ValueIterator
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from(self, key: &'a K) -> Self;$/;"	P	interface:LevelDBIterator
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    from: Option<&'a K>,$/;"	m	struct:Iterator
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    from: Option<&'a K>,$/;"	m	struct:KeyIterator
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    from: Option<&'a K>,$/;"	m	struct:ValueIterator
from_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes(s: &[u8]) -> Fe {$/;"	P	implementation:Fe
from_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn from_bytes(bytes: &[u8]) -> Gf128 {$/;"	P	implementation:Gf128
from_bytes_negate_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes_negate_vartime(s: &[u8]) -> Option<GeP3> {$/;"	P	implementation:GeP3
from_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from_key(&self) -> Option<&K> {$/;"	P	implementation:Iterator
from_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from_key(&self) -> Option<&K> {$/;"	P	implementation:KeyIterator
from_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from_key(&self) -> Option<&K> {$/;"	P	implementation:ValueIterator
from_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn from_key(&self) -> Option<&K>;$/;"	P	interface:LevelDBIterator
from_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn from_seed(seed: &'a [u8]) -> Fortuna {$/;"	P	implementation:Fortuna
from_to_bytes_preserves	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn from_to_bytes_preserves() {$/;"	f	module:tests
fsm_r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fsm_r: [u32; 2],$/;"	m	struct:Sosemanuk
full_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn full_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	P	interface:FixedBuffer
g	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn g(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
ge_scalarmult_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn ge_scalarmult_base(a: &[u8]) -> GeP3 {$/;"	f
generate_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_blocks(&mut self, k: usize, out: &mut [u8]) {$/;"	P	implementation:FortunaGenerator
generate_random_data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_random_data(&mut self, out: &mut [u8]) {$/;"	P	implementation:FortunaGenerator
generator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    generator: FortunaGenerator,$/;"	m	struct:Fortuna
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^    fn get<'a, BK: Borrow<K>>(&self, options: ReadOptions<'a, K>, key: BK) -> Result<Option<Vec</;"	P	implementation:Database
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^    fn get<'a, BK: Borrow<K>>(&self, options: ReadOptions<'a, K>, key: BK) -> Result<Option<Vec</;"	P	interface:KV
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    pub fn get<BK: Borrow<K>>(&'a self,$/;"	P	implementation:Snapshot
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CbcTest
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CtrTest
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::EcbTest
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8];$/;"	P	interface:test::CipherTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CbcTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CtrTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::EcbTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8];$/;"	P	interface:test::CipherTest
get_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn get_test_vectors()-> [TestVector; 5]{$/;"	f	module:test
get_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn get_test_vectors()-> Vec<TestVector>{$/;"	f	module:test
ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ghash;$/;"	n
ghash_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_10(bh: & mut Bencher) {$/;"	f	module:bench
ghash_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_1k(bh: & mut Bencher) {$/;"	f	module:bench
ghash_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_64k(bh: & mut Bencher) {$/;"	f	module:bench
gsm_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_10(bh: & mut Bencher) {$/;"	f	module:bench
gsm_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_1k(bh: & mut Bencher) {$/;"	f	module:bench
gsm_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_64k(bh: & mut Bencher) {$/;"	f	module:bench
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    h: [u64; 8],$/;"	m	struct:Blake2b
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    h: [u32; 8],$/;"	m	struct:Blake2s
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn h(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    h         : [u32; 5],$/;"	m	struct:Poly1305
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    h: [u32; DIGEST_BUF_LEN],$/;"	m	struct:Ripemd160
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    h: [u32; STATE_LEN],$/;"	m	struct:Sha1
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    h: [u32; 8],$/;"	m	struct:Engine256State
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    h: [u64; 8]$/;"	m	struct:Engine512State
has_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn has_next<R: ReadBuffer, W: WriteBuffer>($/;"	f	method:BlockEngine::fast_mode
hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn hash() {$/;"	f	module:test
hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hash(&mut self) {$/;"	P	implementation:Salsa20
hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    hash: [u64; 8],$/;"	m	struct:Whirlpool
hash	/home/lieroz/blockchain_rust/src/block.rs	/^    hash: String,$/;"	m	struct:Block
hash	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn hash(&self) -> &str {$/;"	P	implementation:Block
hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hc128;$/;"	n
hc128_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_10(bh: & mut Bencher) {$/;"	f	module:bench
hc128_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_1k(bh: & mut Bencher) {$/;"	f	module:bench
hc128_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_64k(bh: & mut Bencher) {$/;"	f	module:bench
hchacha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn hchacha20(&mut self, out: &mut [u8]) -> () {$/;"	P	implementation:ChaCha20
hex_to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn hex_to_bytes(raw_hex: &str) -> Vec<u8> {$/;"	f	module:test
hkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hkdf;$/;"	n
hkdf_expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_expand<D: Digest>(mut digest: D, prk: &[u8], info: &[u8], okm: &mut [u8]) {$/;"	f
hkdf_extract	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_extract<D: Digest>(mut digest: D, salt: &[u8], ikm: &[u8], prk: &mut [u8]) {$/;"	f
hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hmac;$/;"	n
hpass	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            hpass: [u8; 64],$/;"	m	struct:test::test_bcrypt_hash::Test
hs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    hs: [Gf128; 128],$/;"	m	struct:Ghash
hs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    hs: [Gf128; 128],$/;"	m	struct:GhashWithC
hsalsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^pub fn hsalsa20(key: &[u8], nonce: &[u8], out: &mut [u8]) {$/;"	f
hsalsa20_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hsalsa20_hash(&mut self, out: &mut [u8]) {$/;"	P	implementation:Salsa20
hsalt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            hsalt: [u8; 64],$/;"	m	struct:test::test_bcrypt_hash::Test
i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn i(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    i: u8,$/;"	m	struct:Rc4
i_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    i_key: Vec<u8>,$/;"	m	struct:Hmac
ikm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        ikm: Vec<u8>,$/;"	m	struct:test::TestVector
impl_fixed_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^macro_rules! impl_fixed_buffer( ($name:ident, $size:expr) => ($/;"	M
in_hist	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    in_hist: Vec<u8>,$/;"	m	struct:BlockEngine
in_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    in_scratch: OwnedWriteBuffer,$/;"	m	struct:BlockEngine
increment_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn increment_counter(&mut self, inc : u64) {$/;"	P	implementation:Blake2b
increment_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn increment_counter(&mut self, inc : u32) {$/;"	P	implementation:Blake2s
increment_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn increment_counter(&mut self) {$/;"	P	implementation:FortunaGenerator
info	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        info: Vec<u8>,$/;"	m	struct:test::TestVector
init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn init(&mut self, key : &[u8], nonce : &[u8]) {$/;"	P	implementation:Hc128
init0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init0(param: Blake2bParam, digest_length: u8, key: &[u8]) -> Blake2b {$/;"	P	implementation:Blake2b
init0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init0(param: Blake2sParam, digest_length: u8, key: &[u8]) -> Blake2s {$/;"	P	implementation:Blake2s
init_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init_param( p: Blake2bParam, key: &[u8] ) -> Blake2b {$/;"	P	implementation:Blake2b
init_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init_param( p: Blake2sParam, key: &[u8] ) -> Blake2s {$/;"	P	implementation:Blake2s
init_state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn init_state() -> Blowfish {$/;"	P	implementation:Blowfish
inner_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    inner_length: u8,$/;"	m	struct:Blake2bParam
inner_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    inner_length: u8,$/;"	m	struct:Blake2sParam
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        input: Vec<u8>,$/;"	m	struct:test::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        input: Vec<u8>,$/;"	m	struct:digest_tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Blake2b
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	P	implementation:Blake2b
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        input: Vec<u8>,$/;"	m	struct:digest_tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Blake2s
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	P	implementation:Blake2s
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn input<F: FnMut(&[u8])>(&mut self, input: &[u8], func: F);$/;"	P	interface:FixedBuffer
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn input(&mut self, input: &[u8]);$/;"	P	interface:Digest
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Pool
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Ghash
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Hmac
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn input(&mut self, data: &[u8]);$/;"	P	interface:Mac
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Md5
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Poly1305
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        input: &'static str,$/;"	m	struct:test::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn input(&mut self, msg: &[u8]) {$/;"	P	implementation:Ripemd160
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn input(&mut self, msg: &[u8]) { add_input(self, msg); }$/;"	P	implementation:Sha1
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha224
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha256
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha384
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512Trunc224
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512Trunc256
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Engine256
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Engine512
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Sha3
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn input(&mut self, source: &[u8]) {$/;"	P	implementation:Whirlpool
input_a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_a(mut self, a: &[u8]) -> Ghash {$/;"	P	implementation:Ghash
input_c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	P	implementation:Ghash
input_c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	P	implementation:GhashWithC
input_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn input_str(&mut self, input: &str) {$/;"	P	interface:Digest
integerify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn integerify(x: &[u8], n: usize) -> usize {$/;"	f	function:scrypt_ro_mix
into_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_read_buffer(self) -> OwnedReadBuffer {$/;"	P	implementation:OwnedWriteBuffer
into_write_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_write_buffer(self) -> OwnedWriteBuffer {$/;"	P	implementation:OwnedReadBuffer
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Self;$/;"	P	interface:Gf8Ops
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs4State<T> {$/;"	P	implementation:Bs4State
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	P	interface:Gf2Ops
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	P	interface:Gf4Ops
inv_mcol	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn inv_mcol(x: u32) -> u32 {$/;"	f
inv_mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Self;$/;"	P	interface:AesOps
inv_shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> Self;$/;"	P	interface:AesBitValueOps
inv_shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u16 {$/;"	P	implementation:u16
inv_shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u32x4 {$/;"	P	implementation:u32x4
inv_shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Self;$/;"	P	interface:AesOps
inv_sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Self;$/;"	P	interface:AesOps
invert	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn invert(&self) -> Fe {$/;"	P	implementation:Fe
invert_inverts	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn invert_inverts() {$/;"	f	module:tests
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:BorrowedWriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:OwnedWriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:RefWriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.buff.len() }$/;"	P	implementation:RefReadBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.len }$/;"	P	implementation:OwnedReadBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	P	interface:ReadBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	P	interface:WriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	P	implementation:OwnedReadBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	P	implementation:RefReadBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:BorrowedWriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:OwnedWriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:RefWriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	P	interface:ReadBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	P	interface:WriteBuffer
is_keccak	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_keccak(&self) -> bool {$/;"	P	implementation:Sha3Mode
is_negative	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_negative(&self) -> bool {$/;"	P	implementation:Fe
is_nonzero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_nonzero(&self) -> bool {$/;"	P	implementation:Fe
is_shake	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_shake(&self) -> bool {$/;"	P	implementation:Sha3Mode
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn iter(&'a self, options: ReadOptions<'a, K>) -> Iterator<K> {$/;"	P	implementation:Database
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn iter(&'a self, options: ReadOptions<'a, K>) -> Iterator<K>;$/;"	P	interface:Iterable
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    iter: RawIterator,$/;"	m	struct:Iterator
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    iter: RawIterator,$/;"	m	struct:KeyIterator
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    iter: RawIterator,$/;"	m	struct:ValueIterator
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    fn iter(&'a self, mut options: ReadOptions<'a, K>) -> Iterator<K> {$/;"	P	implementation:Snapshot
iterate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    pub fn iterate<T: WritebatchIterator<K = K>>(&mut self, iterator: Box<T>) -> Box<T> {$/;"	P	implementation:Writebatch
iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod iterator;$/;"	n
iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                iv:  Vec<u8>,$/;"	m	struct:test::TestVector
iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        iv: Vec<u8>,$/;"	m	struct:test::CbcTest
j	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    j: u8,$/;"	m	struct:Rc4
join	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs2State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs2State
join	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs4State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs4State
keccak224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak224() -> Sha3 {$/;"	P	implementation:Sha3
keccak256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak256() -> Sha3 {$/;"	P	implementation:Sha3
keccak384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak384() -> Sha3 {$/;"	P	implementation:Sha3
keccak512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak512() -> Sha3 {$/;"	P	implementation:Sha3
keccak_f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^fn keccak_f(state: &mut [u8]) {$/;"	f
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn key(&self) -> K {$/;"	P	interface:LevelDBIterator
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CtrTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                key:  Vec<u8>,$/;"	m	struct:test::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        key: Option<Vec<u8>>,$/;"	m	struct:digest_tests::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key: [u8; BLAKE2B_KEYBYTES],$/;"	m	struct:Blake2b
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        key: Option<Vec<u8>>,$/;"	m	struct:digest_tests::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key: [u8; BLAKE2S_KEYBYTES],$/;"	m	struct:Blake2s
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CbcTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CtrTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::EcbTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            key:   [u8; 32],$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            key:   [u8; 32],$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    key:   [u8; 32],$/;"	m	struct:test::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    key: [u8; KEY_LEN],$/;"	m	struct:FortunaGenerator
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        key: &'static str,$/;"	m	struct:test::Test
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key_length: u8,$/;"	m	struct:Blake2b
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key_length: u8,$/;"	m	struct:Blake2bParam
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key_length: u8,$/;"	m	struct:Blake2s
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key_length: u8,$/;"	m	struct:Blake2sParam
key_may_match	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/filter_policy.rs	/^    fn key_may_match(&self, key: &Self::K) -> bool;$/;"	P	interface:FilterPolicy
keypair_cases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_cases() {$/;"	f	module:tests
keypair_matches_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_matches_mont() {$/;"	f	module:tests
keys_iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn keys_iter(&'a self, options: ReadOptions<'a, K>) -> KeyIterator<K> {$/;"	P	implementation:Database
keys_iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn keys_iter(&'a self, options: ReadOptions<'a, K>) -> KeyIterator<K>;$/;"	P	interface:Iterable
keys_iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    fn keys_iter(&'a self, mut options: ReadOptions<'a, K>) -> KeyIterator<K> {$/;"	P	implementation:Snapshot
keystream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            keystream: Vec<u8>,$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
keystream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            keystream: Vec<u8>,$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
kv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod kv;$/;"	n
l	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        l: usize,$/;"	m	struct:test::TestVector
last	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    pub fn last(self) -> Option<(K, Vec<u8>)> {$/;"	P	implementation:Iterator
last	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    pub fn last(self) -> Option<K> {$/;"	P	implementation:KeyIterator
last	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    pub fn last(self) -> Option<Vec<u8>> {$/;"	P	implementation:ValueIterator
last_node	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    last_node: u8,$/;"	m	struct:Blake2b
last_node	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    last_node: u8,$/;"	m	struct:Blake2s
last_reseed_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    last_reseed_time: f64$/;"	m	struct:Fortuna
leaf_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    leaf_length: u32,$/;"	m	struct:Blake2bParam
leaf_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    leaf_length: u32,$/;"	m	struct:Blake2sParam
leftover	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    leftover  : usize,$/;"	m	struct:Poly1305
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize$/;"	m	struct:BorrowedWriteBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:OwnedReadBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:OwnedWriteBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:RefWriteBuffer
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    length_bits: u64,$/;"	m	struct:Ripemd160
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    length_bits: u64,$/;"	m	struct:Sha1
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    length_bits: (u64, u64),$/;"	m	struct:Engine512
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    length_bits: u64,$/;"	m	struct:Engine256
length_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    length_bytes: u64,$/;"	m	struct:Md5
lfsr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    lfsr: [u32; 10],$/;"	m	struct:Sosemanuk
load_3i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3i(s: &[u8]) -> i64 {$/;"	f
load_3u	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3u(s: &[u8]) -> u64 {$/;"	f
load_4i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4i(s: &[u8]) -> i64 {$/;"	f
load_4u	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4u(s: &[u8]) -> u64 {$/;"	f
log_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        log_n: u8,$/;"	m	struct:test::Test
log_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    log_n: u8,$/;"	m	struct:ScryptParams
lsh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn lsh(self, s: u32) -> u32x4 {$/;"	P	implementation:u32x4
mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    mac: Ghash,$/;"	m	struct:AesGcm
mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    mac: Poly1305,$/;"	m	struct:ChaCha20Poly1305
mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod mac;$/;"	n
mac_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod mac_tests {$/;"	n
mac_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod mac_tests {$/;"	n
main	/home/lieroz/blockchain_rust/src/main.rs	/^fn main() {$/;"	f
major	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/lib.rs	/^    fn major() -> isize {$/;"	P	interface:Version
management	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod management;$/;"	n
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    marker: PhantomData<K>,$/;"	m	struct:Writebatch
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    marker: PhantomData<K>,$/;"	m	struct:OrdComparator
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    marker: PhantomData<K>,$/;"	m	struct:Database
max_open_files	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub max_open_files: Option<i32>,$/;"	m	struct:Options
maybe_set	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &Fe, do_swap: i32) {$/;"	P	implementation:Fe
maybe_set	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &GePrecomp, do_swap: i32) {$/;"	P	implementation:GePrecomp
maybe_swap_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_swap_with(&mut self, other: &mut Fe, do_swap: i32) {$/;"	P	implementation:Fe
md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod md5;$/;"	n
md5_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_10(bh: & mut Bencher) {$/;"	f	module:bench
md5_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_1k(bh: & mut Bencher) {$/;"	f	module:bench
md5_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_64k(bh: & mut Bencher) {$/;"	f	module:bench
message	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^    message: String,$/;"	m	struct:Error
minor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/lib.rs	/^    fn minor() -> isize {$/;"	P	interface:Version
mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Self;$/;"	P	interface:AesOps
mk_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn mk_result(st: &mut Sha1, rs: &mut [u8]) {$/;"	f
mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    mode: Sha3Mode,$/;"	m	struct:Sha3
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs2State<T>) -> Bs2State<T> {$/;"	P	implementation:Bs2State
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs4State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs4State
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	P	interface:Gf2Ops
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	P	interface:Gf4Ops
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
mul_121666	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_121666(&self) -> Fe {$/;"	P	implementation:Fe
mul_assoc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_assoc() {$/;"	f	module:tests
mul_commutes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_commutes() {$/;"	f	module:tests
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    extern "C" fn name(state: *mut c_void) -> *const c_char {$/;"	P	interface:InternalComparator
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn name(&self) -> *const c_char {$/;"	P	implementation:DefaultComparator
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn name(&self) -> *const c_char {$/;"	P	implementation:OrdComparator
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn name(&self) -> *const c_char;$/;"	P	interface:Comparator
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    name: String,$/;"	m	struct:OrdComparator
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/filter_policy.rs	/^    fn name(&self) -> *const c_char;$/;"	P	interface:FilterPolicy
neg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn neg(&self) -> Fe {$/;"	P	implementation:Fe
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    pub fn new() -> Writebatch<K> {$/;"	P	implementation:Writebatch
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^    pub fn new(size: size_t) -> Cache {$/;"	P	implementation:Cache
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    pub fn new(name: &str) -> OrdComparator<K> {$/;"	P	implementation:OrdComparator
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^    pub fn new(message: String) -> Error {$/;"	P	implementation:Error
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn new(database: &'a Database<K>, options: ReadOptions<'a, K>) -> Iterator<'a, K> {$/;"	P	implementation:Iterator
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn new(database: &'a Database<K>, options: ReadOptions<'a, K>) -> KeyIterator<'a, K> {$/;"	P	implementation:KeyIterator
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn new(database: &'a Database<K>, options: ReadOptions<'a, K>) -> ValueIterator<'a, K> {$/;"	P	implementation:ValueIterator
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    fn new(database: *mut leveldb_t,$/;"	P	implementation:Database
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub fn new() -> Options {$/;"	P	implementation:Options
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub fn new() -> ReadOptions<'a, K> {$/;"	P	implementation:ReadOptions
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub fn new() -> WriteOptions {$/;"	P	implementation:WriteOptions
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn new (key_size: KeySize, key: &[u8], nonce: &[u8], aad: &[u8]) -> AesGcm<'a> {$/;"	P	implementation:AesGcm
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiDecryptor {$/;"	P	implementation:AesNiDecryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiEncryptor {$/;"	P	implementation:AesNiEncryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new(outlen: usize) -> Blake2b {$/;"	P	implementation:Blake2b
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new(outlen: usize) -> Blake2s {$/;"	P	implementation:Blake2s
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new(processor: P, padding: X, block_size: usize) -> BlockEngine<P, X> {$/;"	P	implementation:BlockEngine
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: &[u8]) -> CtrModeX8<A> {$/;"	P	implementation:CtrModeX8
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: Vec<u8>) -> CtrMode<A> {$/;"	P	implementation:CtrMode
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbDecryptor<T, DecPadding<X>> {$/;"	P	implementation:EcbDecryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbEncryptor<T, EncPadding<X>> {$/;"	P	implementation:EcbEncryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcDecryptor<T, DecPadding<X>> {$/;"	P	implementation:CbcDecryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcEncryptor<T, EncPadding<X>> {$/;"	P	implementation:CbcEncryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn new(key: &[u8]) -> Blowfish {$/;"	P	implementation:Blowfish
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn new(parent: &mut OwnedReadBuffer) -> BorrowedWriteBuffer {$/;"	P	implementation:BorrowedWriteBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &[u8]) -> RefReadBuffer {$/;"	P	implementation:RefReadBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &mut [u8]) -> RefWriteBuffer {$/;"	P	implementation:RefWriteBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedReadBuffer {$/;"	P	implementation:OwnedReadBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedWriteBuffer {$/;"	P	implementation:OwnedWriteBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	P	implementation:ChaCha20
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  pub fn new(key: &[u8], nonce: &[u8], aad: &[u8]) -> ChaCha20Poly1305 {$/;"	P	implementation:ChaCha20Poly1305
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer128 {$/;"	P	implementation:FixedBuffer128
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer64 {$/;"	P	implementation:FixedBuffer64
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        fn new(seed: u32) -> CurveGen {$/;"	P	implementation:tests::CurveGen
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> FortunaGenerator {$/;"	P	implementation:FortunaGenerator
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> Pool {$/;"	P	implementation:Pool
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn new(a: u32, b: u32, c: u32, d: u32) -> Gf128 {$/;"	P	implementation:Gf128
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn new(h: &[u8]) -> Ghash {$/;"	P	implementation:Ghash
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Hc128 {$/;"	P	implementation:Hc128
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    pub fn new(mut digest: D, key: &[u8]) -> Hmac<D> {$/;"	P	implementation:Hmac
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new(code: &[u8]) -> MacResult {$/;"	P	implementation:MacResult
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn new() -> Md5State {$/;"	P	implementation:Md5State
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn new() -> Md5 {$/;"	P	implementation:Md5
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn new(key: &[u8]) -> Poly1305 {$/;"	P	implementation:Poly1305
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn new(key: &[u8]) -> Rc4 {$/;"	P	implementation:Rc4
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn new() -> Ripemd160 {$/;"	P	implementation:Ripemd160
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	P	implementation:Salsa20
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    pub fn new(log_n: u8, r: u32, p: u32) -> ScryptParams {$/;"	P	implementation:ScryptParams
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn new() -> Sha1 {$/;"	P	implementation:Sha1
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha224 {$/;"	P	implementation:Sha224
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha256 {$/;"	P	implementation:Sha256
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha384 {$/;"	P	implementation:Sha384
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512 {$/;"	P	implementation:Sha512
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc224 {$/;"	P	implementation:Sha512Trunc224
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc256 {$/;"	P	implementation:Sha512Trunc256
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn new(mode: Sha3Mode) -> Sha3 {$/;"	P	implementation:Sha3
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Sosemanuk {$/;"	P	implementation:Sosemanuk
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    pub fn new() -> Whirlpool {$/;"	P	implementation:Whirlpool
new	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn new(data: &str, prev_block_hash: &str) -> Block {$/;"	P	implementation:Block
new	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn new() -> Blockchain {$/;"	P	implementation:Blockchain
new	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    pub fn new(block: &Block) -> ProofOfWork {$/;"	P	implementation:ProofOfWork
new_from_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/error.rs	/^    pub fn new_from_i8(message: *const i8) -> Error {$/;"	P	implementation:Error
new_from_owned	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new_from_owned(code: Vec<u8>) -> MacResult {$/;"	P	implementation:MacResult
new_genesis_block	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn new_genesis_block() -> Block {$/;"	P	implementation:Block
new_keyed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2b {$/;"	P	implementation:Blake2b
new_keyed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2s {$/;"	P	implementation:Blake2s
new_unseeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn new_unseeded() -> Fortuna {$/;"	P	implementation:Fortuna
new_with_history	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new_with_history($/;"	P	implementation:BlockEngine
new_with_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new_with_len<'a>(buff: Vec<u8>, len: usize) -> OwnedReadBuffer {$/;"	P	implementation:OwnedReadBuffer
new_xchacha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new_xchacha20(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	P	implementation:ChaCha20
new_xsalsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new_xsalsa20(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	P	implementation:Salsa20
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn next(&mut self) -> Option<(K, Vec<u8>)> {$/;"	P	implementation:Iterator
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn next(&mut self) -> Option<K> {$/;"	P	implementation:KeyIterator
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn next(&mut self) -> Option<Vec<u8>> {$/;"	P	implementation:ValueIterator
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8];$/;"	P	interface:FixedBuffer
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        fn next(&mut self) -> Option<Fe> {$/;"	P	implementation:tests::CurveGen
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Hc128
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Rc4
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Sosemanuk
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn next(&mut self) -> Option<T> {$/;"	f
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    next: T,$/;"	m	struct:StepUp
next_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:Fortuna
next_u32_wrap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^fn next_u32_wrap(buf: &[u8], offset: &mut usize) -> u32 {$/;"	f
node_depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    node_depth: u8,$/;"	m	struct:Blake2bParam
node_depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    node_depth: u8,$/;"	m	struct:Blake2sParam
node_offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    node_offset: u64,$/;"	m	struct:Blake2bParam
node_offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    node_offset: [u8; 6],$/;"	m	struct:Blake2sParam
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            nonce: [u8; 12],$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            nonce: [u8; 8],$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    nonce: [u8; 8],$/;"	m	struct:test::TestVector
nonce	/home/lieroz/blockchain_rust/src/block.rs	/^    nonce: u64,$/;"	m	struct:Block
nonce	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn nonce(&self) -> u64 {$/;"	P	implementation:Block
not	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn not(self) -> u32x4 {$/;"	P	implementation:u32x4
null	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn null() -> bool {$/;"	P	implementation:DefaultComparator
null	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/comparator.rs	/^    fn null() -> bool {$/;"	P	interface:Comparator
o_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    o_key: Vec<u8>,$/;"	m	struct:Hmac
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    offset : usize,$/;"	m	struct:ChaCha20
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    offset: usize,$/;"	m	struct:Salsa20
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    offset: usize  \/\/ Enqueued bytes in state for absorb phase$/;"	m	struct:Sha3
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    offset: u32$/;"	m	struct:Sosemanuk
okm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        okm: Vec<u8>,$/;"	m	struct:test::TestVector
op_f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_g	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
open	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    pub fn open(name: &Path, options: Options) -> Result<Database<K>, Error> {$/;"	P	implementation:Database
open_with_comparator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    pub fn open_with_comparator<C: Comparator<K = K>>(name: &Path,$/;"	P	implementation:Database
openwall_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn openwall_test_vectors() -> Vec<Test> {$/;"	f	module:test
options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    options: Options,$/;"	m	struct:Database
options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod options;$/;"	n
out	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            out:   [u8; 32],$/;"	m	struct:test::test_bcrypt_hash::Test
out	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            out: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
out_hist	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_hist: Vec<u8>,$/;"	m	struct:BlockEngine
out_read_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_read_scratch: Option<OwnedReadBuffer>,$/;"	m	struct:BlockEngine
out_write_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_write_scratch: Option<OwnedWriteBuffer>,$/;"	m	struct:BlockEngine
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        output: Vec<u8>$/;"	m	struct:test::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        output: Vec<u8>,$/;"	m	struct:digest_tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        output: Vec<u8>,$/;"	m	struct:digest_tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    output : [u8; 64],$/;"	m	struct:ChaCha20
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    output: [u8; 4],$/;"	m	struct:Hc128
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        output: Vec<u8>$/;"	m	struct:test::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        output: Vec<u8>,$/;"	m	struct:tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    output: [u8; 64],$/;"	m	struct:Salsa20
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        output: Vec<u8>,$/;"	m	struct:tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    output: [u8; 80],$/;"	m	struct:Sosemanuk
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	P	implementation:Blake2b
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	P	implementation:Blake2s
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bits(&self) -> usize;$/;"	P	interface:Digest
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn output_bits(&self) -> usize { 128 }$/;"	P	implementation:Md5
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	P	implementation:Ripemd160
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	P	implementation:Sha1
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	P	implementation:Sha224
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	P	implementation:Sha512Trunc224
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	P	implementation:Sha256
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	P	implementation:Sha512Trunc256
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 384 }$/;"	P	implementation:Sha384
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 512 }$/;"	P	implementation:Sha512
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn output_bits(&self) -> usize {$/;"	P	implementation:Sha3
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn output_bits(&self) -> usize {$/;"	P	implementation:Whirlpool
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	P	implementation:Blake2b
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	P	implementation:Blake2s
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bytes(&self) -> usize {$/;"	P	interface:Digest
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	P	implementation:Ghash
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn output_bytes(&self) -> usize { self.digest.output_bytes() }$/;"	P	implementation:Hmac
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn output_bytes(&self) -> usize;$/;"	P	interface:Mac
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	P	implementation:Poly1305
output_index	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    output_index: usize$/;"	m	struct:Hc128
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    p: [u32; 18]$/;"	m	struct:Blowfish
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    p: [u32; 512],$/;"	m	struct:Hc128
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        p: u32,$/;"	m	struct:test::Test
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    p: u32$/;"	m	struct:ScryptParams
pad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pad       : [u32; 4],$/;"	m	struct:Poly1305
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	P	implementation:DecPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	P	implementation:NoPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, a: &mut W) { self.padding.pad_input(a); }$/;"	P	implementation:EncPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W) {$/;"	P	implementation:PkcsPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W);$/;"	P	interface:PaddingProcessor
pad_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn pad_len(ds_len: usize, offset: usize, rate: usize) -> usize {$/;"	f	method:Sha3::finalize
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X$/;"	m	struct:DecPadding
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X$/;"	m	struct:EncPadding
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X,$/;"	m	struct:BlockEngine
param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    param: Blake2bParam$/;"	m	struct:Blake2b
param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    param: Blake2sParam$/;"	m	struct:Blake2s
paranoid_checks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub paranoid_checks: bool,$/;"	m	struct:Options
parent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    parent: &'a mut OwnedReadBuffer,$/;"	m	struct:BorrowedWriteBuffer
password	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            password: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
password	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        password: Vec<u8>,$/;"	m	struct:test::Test
password	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        password: &'static str,$/;"	m	struct:test::Test
pb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u16, bit: u32, shift: u32) -> u32 {$/;"	f	function:un_bit_slice_4x4_with_u16
pb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u32, bit: u32, shift: u32) -> u16 {$/;"	f	function:bit_slice_4x4_with_u16
pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod pbkdf2;$/;"	n
pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2<M: Mac>(mac: &mut M, salt: &[u8], c: u32, output: &mut [u8]) {$/;"	f
pbkdf2_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
pbkdf2_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_simple(password: &str, c: u32) -> io::Result<String> {$/;"	f
peek_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	P	implementation:OwnedReadBuffer
peek_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	P	implementation:RefReadBuffer
peek_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8];$/;"	P	interface:ReadBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:BorrowedWriteBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:RefWriteBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer;$/;"	P	interface:WriteBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	P	implementation:OwnedWriteBuffer
peek_remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_remaining(&self) -> &[u8] {$/;"	P	interface:ReadBuffer
personal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    personal: [u8; BLAKE2B_PERSONALBYTES],$/;"	m	struct:Blake2bParam
personal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    personal: [u8; BLAKE2S_PERSONALBYTES],$/;"	m	struct:Blake2sParam
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CtrTest
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::TestData
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CbcTest
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CtrTest
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::EcbTest
plain_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                plain_text: Vec<u8>,$/;"	m	struct:test::TestVector
plain_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    plain_text: Vec<u8>,$/;"	m	struct:test::TestVector
plaintext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        plaintext: Vec<u8>,$/;"	m	struct:test::Test
poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod poly1305;$/;"	n
poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn poly1305(key: &[u8], msg: &[u8], mac: &mut [u8]) {$/;"	f	module:test
poly1305_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_10(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_1k(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_64k(bh: & mut Bencher) {$/;"	f	module:bench
pool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pool: [Pool; NUM_POOLS],$/;"	m	struct:Fortuna
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:OwnedReadBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:OwnedWriteBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:RefReadBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:RefWriteBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize,$/;"	m	struct:BorrowedWriteBuffer
position	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	P	interface:ReadBuffer
position	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	P	interface:WriteBuffer
position	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn position(&self) -> usize;$/;"	P	interface:FixedBuffer
pow25523	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn pow25523(&self) -> Fe {$/;"	P	implementation:Fe
prepare_columnround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_columnround {$/;"	M
prepare_data	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    fn prepare_data(&self, nonce: u64) -> String {$/;"	P	implementation:ProofOfWork
prepare_rowround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_rowround {$/;"	M
prev_block_hash	/home/lieroz/blockchain_rust/src/block.rs	/^    prev_block_hash: String,$/;"	m	struct:Block
prev_block_hash	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn prev_block_hash(&self) -> &str {$/;"	P	implementation:Block
prk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        prk: Vec<u8>,$/;"	m	struct:test::TestVector
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CtrMode
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CtrModeX8
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process<R: ReadBuffer, W: WriteBuffer>($/;"	P	implementation:BlockEngine
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:ChaCha20
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Hc128
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Rc4
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Salsa20
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Sosemanuk
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Box
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]);$/;"	P	interface:SynchronousStreamCipher
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:EcbDecryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:EcbEncryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CbcEncryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CbcDecryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]/;"	P	interface:BlockProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn process_block(&mut self, input: &[u8]) {$/;"	P	implementation:Md5State
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! process_block($/;"	M
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	P	implementation:Engine256State
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	P	implementation:Engine512State
process_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn process_scratch<P: BlockProcessor, X: PaddingProcessor>(me: &mut BlockEngine<P, X>) {$/;"	f	method:BlockEngine::process
processor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    processor: P,$/;"	m	struct:BlockEngine
proofofwork	/home/lieroz/blockchain_rust/src/main.rs	/^mod proofofwork;$/;"	n
ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    ptr: *mut leveldb_writebatch_t,$/;"	m	struct:RawWritebatch
ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^    ptr: *mut leveldb_cache_t,$/;"	m	struct:RawCache
ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    ptr: *mut leveldb_iterator_t,$/;"	m	struct:RawIterator
ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    ptr: *mut leveldb_comparator_t,$/;"	m	struct:RawComparator
ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^    ptr: *mut leveldb_t,$/;"	m	struct:RawDB
ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    ptr: *mut leveldb_snapshot_t,$/;"	m	struct:RawSnapshot
push_to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn push_to<W: WriteBuffer>(&mut self, output: &mut W) {$/;"	P	interface:ReadBuffer
put	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    fn put(&mut self, key: Self::K, value: &[u8]);$/;"	P	interface:WritebatchIterator
put	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    pub fn put(&mut self, key: K, value: &[u8]) {$/;"	P	implementation:Writebatch
put	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^    fn put<BK: Borrow<K>>(&self, options: WriteOptions, key: BK, value: &[u8]) -> Result<(), Err/;"	P	implementation:Database
put	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/kv.rs	/^    fn put<BK: Borrow<K>>(&self, options: WriteOptions, key: BK, value: &[u8]) -> Result<(), Err/;"	P	interface:KV
put_callback	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^extern "C" fn put_callback<K: Key, T: WritebatchIterator<K = K>>(state: *mut c_void,$/;"	f
q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    q: [u32; 512],$/;"	m	struct:Hc128
r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    r         : [u32; 5],$/;"	m	struct:Poly1305
r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        r: u32,$/;"	m	struct:test::Test
r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    r: u32,$/;"	m	struct:ScryptParams
rate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn rate(&self) -> usize {$/;"	P	implementation:Sha3
raw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^    raw: RawCache,$/;"	m	struct:Cache
raw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    raw: RawSnapshot,$/;"	m	struct:Snapshot
raw_iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn raw_iterator(&self) -> *mut leveldb_iterator_t {$/;"	P	implementation:Iterator
raw_iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn raw_iterator(&self) -> *mut leveldb_iterator_t {$/;"	P	implementation:KeyIterator
raw_iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn raw_iterator(&self) -> *mut leveldb_iterator_t {$/;"	P	implementation:ValueIterator
raw_iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn raw_iterator(&self) -> *mut leveldb_iterator_t;$/;"	P	interface:LevelDBIterator
raw_ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/cache.rs	/^    pub fn raw_ptr(&self) -> *mut leveldb_cache_t {$/;"	P	implementation:Cache
raw_ptr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    pub fn raw_ptr(&self) -> *mut leveldb_snapshot_t {$/;"	P	implementation:Snapshot
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Blake2b
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Blake2s
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Ghash
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Hmac
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn raw_result(&mut self, output: &mut [u8]);$/;"	P	interface:Mac
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Poly1305
rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod rc4;$/;"	n
rc4_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_10(bh: & mut Bencher) {$/;"	f	module:bench
rc4_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_1k(bh: & mut Bencher) {$/;"	f	module:bench
rc4_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_64k(bh: & mut Bencher) {$/;"	f	module:bench
read_row_major	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn read_row_major(data: &[u8]) -> u32x4 {$/;"	f	function:bit_slice_1x128_with_u32x4
read_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_be(input: &[u8]) -> u32 {$/;"	f
read_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_le(input: &[u8]) -> u32 {$/;"	f
read_u32v_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_be(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u32v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_le(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u64v_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_be(dst: &mut[u64], input: &[u8]) {$/;"	f
read_u64v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_le(dst: &mut[u64], input: &[u8]) {$/;"	f
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.buff.len() - self.pos }$/;"	P	implementation:RefReadBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:BorrowedWriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:OwnedReadBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:OwnedWriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:RefWriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:ReadBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:WriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:FixedBuffer
repair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/management.rs	/^pub fn repair(name: &Path, options: Options) -> Result<(), Error> {$/;"	f
reseed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, s: &[u8]) {$/;"	P	implementation:FortunaGenerator
reseed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, seed: &'a [u8]) {$/;"	P	implementation:Fortuna
reseed_count	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    reseed_count: u32,$/;"	m	struct:Fortuna
reserved	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    reserved: [u8; 14],$/;"	m	struct:Blake2bParam
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) { Blake2b::reset(self); }$/;"	P	implementation:Blake2b
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Blake2b
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:Blake2b
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) { Blake2s::reset(self); }$/;"	P	implementation:Blake2s
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Blake2s
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:Blake2s
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset(&mut self) {$/;"	P	implementation:BlockEngine
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:EcbDecryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:EcbEncryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	P	implementation:CtrMode
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	P	implementation:CtrModeX8
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	P	implementation:CbcDecryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	P	implementation:CbcEncryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:OwnedReadBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:OwnedWriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:RefReadBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:RefWriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) {$/;"	P	implementation:BorrowedWriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	P	interface:ReadBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	P	interface:WriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn reset(&mut self);$/;"	P	interface:FixedBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn reset(&mut self);$/;"	P	interface:Digest
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Ghash
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Hmac
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn reset(&mut self);$/;"	P	interface:Mac
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Md5
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Md5State
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Poly1305
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Ripemd160
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha1
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha224
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha256
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha384
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512Trunc224
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512Trunc256
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha3
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Whirlpool
reset_with_history	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset_with_history(&mut self, in_hist: &[u8], out_hist: &[u8]) {$/;"	P	implementation:BlockEngine
rest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    rest: Option<[u8; 16]>$/;"	m	struct:GhashWithC
rest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    rest: Option<[u8; 16]>,$/;"	m	struct:Ghash
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Blake2b
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	P	implementation:Blake2b
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Blake2s
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	P	implementation:Blake2s
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn result(&mut self, out: &mut [u8]);$/;"	P	interface:Digest
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Pool
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Ghash
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	P	implementation:Ghash
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	P	implementation:GhashWithC
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Hmac
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn result(&mut self) -> MacResult;$/;"	P	interface:Mac
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Md5
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Poly1305
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Ripemd160
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn result(&mut self, out: &mut [u8]) { mk_result(self, out) }$/;"	P	implementation:Sha1
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha224
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha256
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha384
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512Trunc224
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512Trunc256
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha3
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Whirlpool
result_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn result_str(&mut self) -> String {$/;"	P	interface:Digest
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:OwnedReadBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:OwnedWriteBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:RefReadBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:RefWriteBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) {$/;"	P	implementation:BorrowedWriteBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	P	interface:ReadBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	P	interface:WriteBuffer
ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ripemd160;$/;"	n
ripemd160_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_10(bh: & mut Bencher) {$/;"	f	module:bench
ripemd160_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_1k(bh: & mut Bencher) {$/;"	f	module:bench
ripemd160_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_64k(bh: & mut Bencher) {$/;"	f	module:bench
ror1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> Self;$/;"	P	interface:AesBitValueOps
ror1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u16 {$/;"	P	implementation:u16
ror1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u32x4 {$/;"	P	implementation:u32x4
ror2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> Self;$/;"	P	interface:AesBitValueOps
ror2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u16 {$/;"	P	implementation:u16
ror2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u32x4 {$/;"	P	implementation:u32x4
ror3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> Self;$/;"	P	interface:AesBitValueOps
ror3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u16 {$/;"	P	implementation:u16
ror3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u32x4 {$/;"	P	implementation:u32x4
rotate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! rotate {$/;"	M
rotl64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^fn rotl64(v: u64, n: usize) -> u64 {$/;"	f
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	M
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	M
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! round{$/;"	M
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! round($/;"	M
round_function	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn round_function(&self, x: u32) -> u32 {$/;"	P	implementation:Blowfish
round_keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    round_keys: [u8; 240]$/;"	m	struct:AesNiDecryptor
round_keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    round_keys: [u8; 240]$/;"	m	struct:AesNiEncryptor
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    rounds: u8,$/;"	m	struct:AesNiDecryptor
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    rounds: u8,$/;"	m	struct:AesNiEncryptor
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            rounds: u32,$/;"	m	struct:test::test_openbsd_vectors::Test
rounds4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! rounds4 {$/;"	M
rounds4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! rounds4 {$/;"	M
rowround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^fn rowround(state: &mut SalsaState) -> () {$/;"	f
rsh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn rsh(self, s: u32) -> u32x4 {$/;"	P	implementation:u32x4
run	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    pub fn run(&self) -> (u64, String) {$/;"	P	implementation:ProofOfWork
run_full_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_full_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f	module:test
run_inc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc<OpFunc, NextInFunc, NextOutFunc>($/;"	f	module:test
run_inc1_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc1_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f	module:test
run_rand_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_rand_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f	module:test
run_round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    macro_rules! run_round ($/;"	M	function:salsa20_8
run_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn run_test<E: BlockEncryptor, D: BlockDecryptor>(enc: &mut E, dec: &mut D, test: &Test) {$/;"	f	module:test
run_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f	module:test
rust_crypto_aesni_aesimc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_aesimc(round_keys: *mut u8);$/;"	f
rust_crypto_aesni_decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_decrypt_block($/;"	f
rust_crypto_aesni_encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_encrypt_block($/;"	f
rust_crypto_aesni_setup_working_key_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_128(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_192(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_256(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_util_fixed_time_eq_asm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_fixed_time_eq_asm($/;"	f
rust_crypto_util_secure_memset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_secure_memset($/;"	f
rust_crypto_util_supports_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_supports_aesni() -> u32;$/;"	f
s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    s: [[u32; 256]; 4],$/;"	m	struct:Blowfish
s0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s0: u32,$/;"	m	struct:Md5State
s1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s1: u32,$/;"	m	struct:Md5State
s2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s2: u32,$/;"	m	struct:Md5State
s3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s3: u32$/;"	m	struct:Md5State
salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod salsa20;$/;"	n
salsa20_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_10(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_1k(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_64k(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn salsa20_8(input: &[u8], output: &mut [u8]) {$/;"	f
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::Test
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            salt: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    salt: [u8; BLAKE2B_SALTBYTES],$/;"	m	struct:Blake2bParam
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    salt: [u8; BLAKE2S_SALTBYTES],$/;"	m	struct:Blake2sParam
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::TestVector
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::Test
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        salt: &'static str,$/;"	m	struct:test::Test
salted_expand_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn salted_expand_key(&mut self, salt: &[u8], key: &[u8]) {$/;"	P	implementation:Blowfish
sc_muladd	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_muladd(s: &mut[u8], a: &[u8], b: &[u8], c: &[u8]) {$/;"	f
sc_reduce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_reduce(s: &mut [u8]) {$/;"	f
schedule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! schedule {$/;"	M
schedule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! schedule {$/;"	M
scl_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
scl_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Self;$/;"	P	interface:Gf2Ops
scl_n2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
scl_n2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Self;$/;"	P	interface:Gf2Ops
scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod scrypt;$/;"	n
scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt(password: &[u8], salt: &[u8], params: &ScryptParams, output: &mut [u8]) {$/;"	f
scrypt_block_mix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_block_mix(input: &[u8], output: &mut [u8]) {$/;"	f
scrypt_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
scrypt_ro_mix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_ro_mix(b: &mut [u8], v: &mut [u8], t: &mut [u8], n: usize) {$/;"	f
scrypt_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_simple(password: &str, params: &ScryptParams) -> io::Result<String> {$/;"	f
secure_memset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn secure_memset(dst: &mut [u8], val: u8) {$/;"	f
seek	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn seek(&self, key: &K) {$/;"	P	interface:LevelDBIterator
seek_to_first	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn seek_to_first(&self) {$/;"	P	interface:LevelDBIterator
seek_to_last	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn seek_to_last(&self) {$/;"	P	interface:LevelDBIterator
select	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn select(pos: usize, b: i8) -> GePrecomp {$/;"	P	implementation:GePrecomp
set_domain_sep	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_domain_sep(out_len: usize, buf: &mut [u8]) {$/;"	f	method:Sha3::finalize
set_lastblock	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastblock(&mut self) {$/;"	P	implementation:Blake2b
set_lastblock	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastblock(&mut self) {$/;"	P	implementation:Blake2s
set_lastnode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastnode(&mut self) {$/;"	P	implementation:Blake2b
set_lastnode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastnode(&mut self) {$/;"	P	implementation:Blake2s
set_pad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_pad(offset: usize, buf: &mut [u8]) {$/;"	f	method:Sha3::finalize
setup	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^fn setup(cost: u32, salt: &[u8], key: &[u8]) -> Blowfish {$/;"	f
setup_working_key_aesni_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_128(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_192(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_256(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha1;$/;"	n
sha1_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_10(bh: & mut Bencher) {$/;"	f	module:bench
sha1_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha1_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha1_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_block(bh: & mut Bencher) {$/;"	f	module:bench
sha1_digest_round_x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_digest_round_x4(abcd: u32x4, work: u32x4, i: i8) -> u32x4 {$/;"	f
sha1_first	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first(w0: u32x4) -> u32 {$/;"	f
sha1_first_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_add(e: u32, w0: u32x4) -> u32x4 {$/;"	f
sha1_first_half	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_half(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1_schedule_x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha1msg1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg1(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1msg2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg2(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1rnds4c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4c(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4m	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4m(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4p(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha2;$/;"	n
sha256_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_10(bh: & mut Bencher) {$/;"	f	module:bench
sha256_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha256_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha256_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_block(bh: & mut Bencher) {$/;"	f	module:bench
sha256_digest_round_x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_digest_round_x2(cdgh: u32x4, abef: u32x4, wk: u32x4) -> u32x4 {$/;"	f
sha256_schedule_x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256load	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256load(v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256msg1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg1(v0: u32x4, v1: u32x4) -> u32x4 {$/;"	f
sha256msg2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg2(v4: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256swap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256swap(v0: u32x4) -> u32x4 {$/;"	f
sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha3;$/;"	n
sha3_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_224() -> Sha3 {$/;"	P	implementation:Sha3
sha3_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_256() -> Sha3 {$/;"	P	implementation:Sha3
sha3_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_384() -> Sha3 {$/;"	P	implementation:Sha3
sha3_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_512() -> Sha3 {$/;"	P	implementation:Sha3
sha512_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_10(bh: & mut Bencher) {$/;"	f	module:bench
sha512_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha512_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha512_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_block(bh: & mut Bencher) {$/;"	f	module:bench
sha512_digest_round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_digest_round(ae: u64x2, bf: u64x2, cg: u64x2, dh: u64x2, wk0: u64) -> u64x2 {$/;"	f
sha512_schedule_x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_schedule_x2(v0: u64x2, v1: u64x2, v4to5: u64x2, v7: u64x2) -> u64x2 {$/;"	f
sha512load	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha512load(v0: u64x2, v1: u64x2) -> u64x2 {$/;"	f
shake_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_128() -> Sha3 {$/;"	P	implementation:Sha3
shake_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_256() -> Sha3 {$/;"	P	implementation:Sha3
shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> Self;$/;"	P	interface:AesBitValueOps
shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u16 {$/;"	P	implementation:u16
shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u32x4 {$/;"	P	implementation:u32x4
shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Self;$/;"	P	interface:AesOps
shl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, amt: usize) -> u32x4 {$/;"	P	implementation:fake::u32x4
shl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
shr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, amt: usize) -> u32x4 {$/;"	P	implementation:fake::u32x4
shr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
sigma0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0(x: u64) -> u64 {$/;"	f	function:sha512_schedule_x2
sigma0x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0x4(x: u32x4) -> u32x4 {$/;"	f	function:sha256msg1
sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma1(x: u64) -> u64 {$/;"	f	function:sha512_schedule_x2
sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! sigma1 {$/;"	M	function:sha256msg2
sign_verify_cases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn sign_verify_cases() {$/;"	f	module:tests
signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn signature(message: &[u8], secret_key: &[u8]) -> [u8; 64] {$/;"	f
simd	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod simd;$/;"	n
simd_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self {$/;"	P	implementation:u32x4
simd_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self;$/;"	P	interface:SimdExt
size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn size(rounds: u8) -> usize { 16 * ((rounds as usize) + 1) }$/;"	f
size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn size(&self) -> usize;$/;"	P	interface:FixedBuffer
slide	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn slide(a: &[u8]) -> [i8; 256] {$/;"	P	implementation:GeP2
snapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub snapshot: Option<&'a Snapshot<'a, K>>,$/;"	m	struct:ReadOptions
snapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    fn snapshot<'a>(&'a self) -> Snapshot<'a, K> {$/;"	P	implementation:Database
snapshot	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    fn snapshot<'a>(&'a self) -> Snapshot<'a, K>;$/;"	P	interface:Snapshots
snapshots	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/mod.rs	/^pub mod snapshots;$/;"	n
sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sosemanuk;$/;"	n
sosemanuk_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_10(bh: & mut Bencher) {$/;"	f	module:bench
sosemanuk_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_1k(bh: & mut Bencher) {$/;"	f	module:bench
sosemanuk_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_64k(bh: & mut Bencher) {$/;"	f	module:bench
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs2State<T>, Bs2State<T>) {$/;"	P	implementation:Bs4State
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs4State<T>, Bs4State<T>) {$/;"	P	implementation:Bs8State
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (T, T) {$/;"	P	implementation:Bs2State
split_at	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn split_at<'a>(vec: &'a [u8], at: usize) -> (&'a [u8], &'a [u8]) {$/;"	f	method:BlockEngine::fast_mode
split_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn split_input() {$/;"	f	module:test
sq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
sq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Self;$/;"	P	interface:Gf2Ops
sq_scl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Bs4State<T> {$/;"	P	implementation:Bs4State
sq_scl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Self;$/;"	P	interface:Gf4Ops
square	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square(&self) -> Fe {$/;"	P	implementation:Fe
square_and_double	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_and_double(&self) -> Fe {$/;"	P	implementation:Fe
square_by_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_by_mul() {$/;"	f	module:tests
standard_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, func: F);$/;"	P	interface:StandardPadding
standard_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, mut func: F) {$/;"	P	implementation:T
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn start(&self) -> bool {$/;"	P	implementation:Iterator
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn start(&self) -> bool {$/;"	P	implementation:KeyIterator
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn start(&self) -> bool {$/;"	P	implementation:ValueIterator
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn start(&self) -> bool;$/;"	P	interface:LevelDBIterator
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    start: bool,$/;"	m	struct:Iterator
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    start: bool,$/;"	m	struct:KeyIterator
start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    start: bool,$/;"	m	struct:ValueIterator
started	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn started(&mut self) {$/;"	P	implementation:Iterator
started	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn started(&mut self) {$/;"	P	implementation:KeyIterator
started	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn started(&mut self) {$/;"	P	implementation:ValueIterator
started	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn started(&mut self);$/;"	P	interface:LevelDBIterator
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    state: BlockEngineState$/;"	m	struct:BlockEngine
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    state  : ChaChaState,$/;"	m	struct:ChaCha20
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    state: Sha256,$/;"	m	struct:Pool
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    state: Gf128,$/;"	m	struct:Ghash
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    state: Gf128,$/;"	m	struct:GhashWithC
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    state: Md5State,$/;"	m	struct:Md5
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    state: [u8; 256]$/;"	m	struct:Rc4
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    state: SalsaState,$/;"	m	struct:Salsa20
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    state: Engine256State,$/;"	m	struct:Engine256
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    state: Engine512State,$/;"	m	struct:Engine512
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    state: [u8; B],  \/\/ B bytes$/;"	m	struct:Sha3
state_to_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! state_to_buffer {$/;"	M
step	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn step(&mut self) -> u32 {$/;"	P	implementation:Hc128
step_by	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod step_by;$/;"	n
step_up	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T> {$/;"	f
step_up	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T>;$/;"	P	interface:RangeExt
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	v	function:pbkdf2_check
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	v	function:scrypt_check
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	v	module:test
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	P	implementation:EncPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	P	implementation:NoPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, a: &mut R) -> bool { self.padding.strip_output(a) /;"	P	implementation:DecPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool {$/;"	P	implementation:PkcsPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool;$/;"	P	interface:PaddingProcessor
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GeCached) -> GeP1P1 {$/;"	P	implementation:GeP3
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	P	implementation:GeP3
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn sub(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Self;$/;"	P	interface:AesOps
sub_word	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn sub_word(x: u32) -> u32 {$/;"	f
subkeys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    subkeys: [u32; 100],$/;"	m	struct:Sosemanuk
supports_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn supports_aesni() -> bool {$/;"	f
swap_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn swap_test() {$/;"	f	module:tests
swizzle	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! swizzle{$/;"	M
symm_enc_or_dec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn symm_enc_or_dec<S: SynchronousStreamCipher, R: ReadBuffer, W: WriteBuffer>($/;"	f
symmetriccipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod symmetriccipher;$/;"	n
sync	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub sync: bool,$/;"	m	struct:WriteOptions
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    t: [u64; 2],$/;"	m	struct:Blake2b
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    t: [u32; 2],$/;"	m	struct:Blake2s
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t: Fe,$/;"	m	struct:GeP1P1
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t: Fe,$/;"	m	struct:GeP3
t2d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t2d: Fe,$/;"	m	struct:GeCached
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                tag:  Vec<u8>,$/;"	m	struct:test::TestVector
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    tag: Vec<u8>$/;"	m	struct:test::TestVector
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	P	implementation:OwnedReadBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	P	implementation:RefReadBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8];$/;"	P	interface:ReadBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8] {$/;"	P	implementation:RefWriteBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8];$/;"	P	interface:WriteBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<'a>(&'a mut self, count: usize) -> &'a mut [u8] {$/;"	P	implementation:OwnedWriteBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<>(&mut self, count: usize) -> &mut [u8] {$/;"	P	implementation:BorrowedWriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:BorrowedWriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:RefWriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer;$/;"	P	interface:WriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	P	implementation:OwnedWriteBuffer
take_remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &[u8] {$/;"	P	interface:ReadBuffer
take_remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &mut [u8] {$/;"	P	interface:WriteBuffer
target	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    target: String,$/;"	m	struct:ProofOfWork
temp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    temp: Vec<u8>$/;"	m	struct:CbcDecryptorProcessor
temp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    temp: Vec<u8>$/;"	m	struct:CbcEncryptorProcessor
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test() {$/;"	f	module:tests
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn test() {$/;"	f	module:tests
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^mod test {$/;"	n
test_1million_random_md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_1million_random_md5() {$/;"	f	module:tests
test_1million_random_ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test_1million_random_ripemd160() {$/;"	f	module:tests
test_1million_random_sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn test_1million_random_sha1() {$/;"	f	module:tests
test_1million_random_sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha256() {$/;"	f	module:tests
test_1million_random_sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha512() {$/;"	f	module:tests
test_accumulator_correctness	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_accumulator_correctness() {$/;"	f	module:tests
test_add_bytes_to_bits_ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_ok() {$/;"	f	module:test
test_add_bytes_to_bits_overflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_overflow() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok2() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok3() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_overflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_overflow2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow2() {$/;"	f	module:test
test_aesni_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_128() {$/;"	f	module:test
test_aesni_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_192() {$/;"	f	module:test
test_aesni_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_256() {$/;"	f	module:test
test_aessafe_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128() {$/;"	f	module:test
test_aessafe_128_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128_x8() {$/;"	f	module:test
test_aessafe_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192() {$/;"	f	module:test
test_aessafe_192_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192_x8() {$/;"	f	module:test
test_aessafe_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256() {$/;"	f	module:test
test_aessafe_256_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256_x8() {$/;"	f	module:test
test_badly_seeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_badly_seeded() {$/;"	f	module:tests
test_bcrypt_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_bcrypt_hash() {$/;"	f	module:test
test_blake2b_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_digest() {$/;"	f	module:digest_tests
test_blake2b_mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_mac() {$/;"	f	module:mac_tests
test_blake2s_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_digest() {$/;"	f	module:digest_tests
test_blake2s_mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_mac() {$/;"	f	module:mac_tests
test_chacha20_256_poly1305_boringssl_vectors_decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_decrypt() {$/;"	f	module:test
test_chacha20_256_poly1305_boringssl_vectors_encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_encrypt() {$/;"	f	module:test
test_chacha20_256_tls_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors() {$/;"	f	module:test
test_chacha20_256_tls_vectors_96_nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors_96_nonce() {$/;"	f	module:test
test_create_unseeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_create_unseeded() {$/;"	f	module:tests
test_digest_1million_random	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: usize, expected: &s/;"	f	module:test
test_fixed_time_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn test_fixed_time_eq() {$/;"	f	module:test
test_force_reseed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^fn test_force_reseed(f: &mut Fortuna) {$/;"	f
test_generator_correctness	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_generator_correctness() {$/;"	f	module:tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f	module:digest_tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f	module:digest_tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hc128_ecrypt_set_2_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_2_vector_0() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_1() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_2() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_3() {$/;"	f	module:test
test_hkdf_rfc5869_sha1_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha1_vectors() {$/;"	f	module:test
test_hkdf_rfc5869_sha256_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha256_vectors() {$/;"	f	module:test
test_hmac_md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5() {$/;"	f	module:test
test_hmac_md5_incremental	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5_incremental() {$/;"	f	module:test
test_keccak_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_224() {$/;"	f	module:tests
test_keccak_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_256() {$/;"	f	module:tests
test_keccak_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_384() {$/;"	f	module:tests
test_keccak_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_512() {$/;"	f	module:tests
test_md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_md5() {$/;"	f	module:tests
test_nacl_vector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_nacl_vector() {$/;"	f	module:test
test_openbsd_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_openbsd_vectors() {$/;"	f	module:test
test_openwall_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn test_openwall_test_vectors() {$/;"	f	module:test
test_pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2() {$/;"	f	module:test
test_pbkdf2_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2_simple() {$/;"	f	module:test
test_salsa20_128bit_ecrypt_set_1_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_128bit_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_salsa20_256bit_ecrypt_set_1_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_salsa20_256bit_nacl_vector_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_nacl_vector_2() {$/;"	f	module:test
test_scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt() {$/;"	f	module:test
test_scrypt_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple(log_n: u8, r: u32, p: u32) {$/;"	f	module:test
test_scrypt_simple_compact	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_compact() {$/;"	f	module:test
test_scrypt_simple_expanded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_expanded() {$/;"	f	module:test
test_seeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_seeded() {$/;"	f	module:tests
test_sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha224() {$/;"	f	module:tests
test_sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha256() {$/;"	f	module:tests
test_sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha384() {$/;"	f	module:tests
test_sha3_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_224() {$/;"	f	module:tests
test_sha3_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_256() {$/;"	f	module:tests
test_sha3_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_384() {$/;"	f	module:tests
test_sha3_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_512() {$/;"	f	module:tests
test_sha3_shake128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake128() {$/;"	f	module:tests
test_sha3_shake256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake256() {$/;"	f	module:tests
test_sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512() {$/;"	f	module:tests
test_sha512_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_224() {$/;"	f	module:tests
test_sha512_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_256() {$/;"	f	module:tests
test_sosemanuk_ecrypt_set_1_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_2_vector_63	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_63() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_2_vector_90	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_90() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_3_vector_135	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_135() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_3_vector_207	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_207() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_6_vector_3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_6_vector_3() {$/;"	f	module:test
test_sosemanuk_vector128_test1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test1() {$/;"	f	module:test
test_sosemanuk_vector128_test2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test2() {$/;"	f	module:test
test_tls_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_tls_vectors() {$/;"	f	module:test
test_too_big_event	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_too_big_event() {$/;"	f	module:tests
test_use_unseeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_use_unseeded() {$/;"	f	module:tests
test_xchacha20_basic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_xchacha20_basic() {$/;"	f	module:test
test_xsalsa20_cryptopp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_xsalsa20_cryptopp() {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^mod tests {$/;"	n
tests128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests128() -> Vec<Test> {$/;"	f	module:test
tests192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests192() -> Vec<Test> {$/;"	f	module:test
tests256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests256() -> Vec<Test> {$/;"	f	module:test
times_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x(self) -> Gf128 {$/;"	P	implementation:Gf128
times_x_reduce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x_reduce(self) -> Gf128 {$/;"	P	implementation:Gf128
timestamp	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn timestamp(&self) -> u64 {$/;"	P	implementation:Block
timestamp	/home/lieroz/blockchain_rust/src/block.rs	/^    timestamp: u64,$/;"	m	struct:Block
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to(mut self, key: &'a K) -> Self {$/;"	P	implementation:Iterator
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to(mut self, key: &'a K) -> Self {$/;"	P	implementation:KeyIterator
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to(mut self, key: &'a K) -> Self {$/;"	P	implementation:ValueIterator
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to(self, key: &'a K) -> Self;$/;"	P	interface:LevelDBIterator
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    to: Option<&'a K>,$/;"	m	struct:Iterator
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    to: Option<&'a K>,$/;"	m	struct:KeyIterator
to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    to: Option<&'a K>,$/;"	m	struct:ValueIterator
to_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^fn to_bits(x: u64) -> (u64, u64) {$/;"	f
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:Fe
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:GeP2
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:GeP3
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn to_bytes(&self) -> [u8; 16] {$/;"	P	implementation:Gf128
to_cached	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_cached(&self) -> GeCached {$/;"	P	implementation:GeP3
to_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to_key(&self) -> Option<&K> {$/;"	P	implementation:Iterator
to_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to_key(&self) -> Option<&K> {$/;"	P	implementation:KeyIterator
to_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to_key(&self) -> Option<&K> {$/;"	P	implementation:ValueIterator
to_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn to_key(&self) -> Option<&K>;$/;"	P	interface:LevelDBIterator
to_p2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	P	implementation:GeP1P1
to_p2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	P	implementation:GeP3
to_p3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p3(&self) -> GeP3 {$/;"	P	implementation:GeP1P1
truncate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) { self.len -= amount; }$/;"	P	implementation:OwnedReadBuffer
truncate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) {$/;"	P	implementation:RefReadBuffer
truncate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize);$/;"	P	interface:ReadBuffer
u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u16 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl Default for u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl Not for u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitAnd for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitOr for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitXor for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<u32x4> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<usize> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<u32x4> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<usize> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Sub for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u32x4(pub u32, pub u32, pub u32, pub u32);$/;"	s	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^impl SimdExt for fake::u32x4 {$/;"	c
u64x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u64x2 {$/;"	c	module:fake
u64x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u64x2(pub u64, pub u64);$/;"	s	module:fake
un_bit_slice_1x128_with_u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x128_with_u32x4(bs: Bs8State<u32x4>, output: &mut [u8]) {$/;"	f
un_bit_slice_1x16_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x16_with_u16(bs: &Bs8State<u16>, output: &mut [u8]) {$/;"	f
un_bit_slice_4x1_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x1_with_u16(bs: &Bs8State<u16>) -> u32 {$/;"	f
un_bit_slice_4x4_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x4_with_u16(bs: &Bs8State<u16>) -> (u32, u32, u32, u32) {$/;"	f
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	P	implementation:Blake2b
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	P	implementation:Blake2s
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn update(&mut self) {$/;"	P	implementation:ChaCha20
update_history	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn update_history(in_hist: &mut [u8], out_hist: &mut [u8], last_in: &[u8], last_out: &[u8]) {$/;"	f
util	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod util;$/;"	n
valid	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn valid(&self) -> bool {$/;"	P	interface:LevelDBIterator
validate	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    pub fn validate(&self) -> bool {$/;"	P	implementation:ProofOfWork
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn value(&self) -> Vec<u8> {$/;"	P	interface:LevelDBIterator
value_iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn value_iter(&'a self, options: ReadOptions<'a, K>) -> ValueIterator<K> {$/;"	P	implementation:Database
value_iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/iterator.rs	/^    fn value_iter(&'a self, options: ReadOptions<'a, K>) -> ValueIterator<K>;$/;"	P	interface:Iterable
value_iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/snapshots.rs	/^    fn value_iter(&'a self, mut options: ReadOptions<'a, K>) -> ValueIterator<K> {$/;"	P	implementation:Snapshot
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn verify(message: &[u8], public_key: &[u8], signature: &[u8]) -> bool {$/;"	f
verify_checksums	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub verify_checksums: bool,$/;"	m	struct:ReadOptions
which	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        which: u32$/;"	m	struct:tests::CurveGen
whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod whirlpool;$/;"	n
whirlpool_1000000a_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_1000000a_test() {$/;"	f	module:test
whirlpool_static_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_static_test() {$/;"	f	module:test
wikipedia_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn wikipedia_tests() {$/;"	f	module:test
wrap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> DecPadding<X> { DecPadding { padding: p } }$/;"	P	implementation:DecPadding
wrap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> EncPadding<X> { EncPadding { padding: p } }$/;"	P	implementation:EncPadding
write	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    fn write(&self, options: WriteOptions, batch: &Writebatch<K>) -> Result<(), Error> {$/;"	P	implementation:Database
write	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    fn write(&self, options: WriteOptions, batch: &Writebatch<K>) -> Result<(), Error>;$/;"	P	interface:Batch
write_buffer_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/options.rs	/^    pub write_buffer_size: Option<size_t>,$/;"	m	struct:Options
write_row_major	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn write_row_major(block: u32x4, output: &mut [u8]) {$/;"	f	function:un_bit_slice_1x128_with_u32x4
write_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_be(dst: &mut [u8], mut input: u32) {$/;"	f
write_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_le(dst: &mut[u8], mut input: u32) {$/;"	f
write_u32v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32v_le (dst: &mut[u8], input: &[u32]) {$/;"	f
write_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_be(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_le(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64v_le(dst: &mut[u8], input: &[u64]) {$/;"	f
write_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()> {$/;"	f
write_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()>;$/;"	P	interface:WriteExt
writebatch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/leveldb-0.8.4/src/database/batch.rs	/^    writebatch: RawWritebatch,$/;"	m	struct:Writebatch
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP1P1
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP2
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP3
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs2State<T>) -> Bs2State<T> {$/;"	P	implementation:Bs2State
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs4State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs4State
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs8State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs8State
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn xor(x: &[u8], y: &[u8], output: &mut [u8]) {$/;"	f
xor_keystream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn xor_keystream(dst: &mut[u8], plaintext: &[u8], keystream: &[u8]) {$/;"	f
xor_x63	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor_x63(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
xy2d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    xy2d: Fe,$/;"	m	struct:GePrecomp
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP1P1
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP2
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP3
y_minus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_minus_x: Fe,$/;"	m	struct:GeCached
y_minus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_minus_x: Fe,$/;"	m	struct:GePrecomp
y_plus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_plus_x: Fe,$/;"	m	struct:GeCached
y_plus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_plus_x: Fe,$/;"	m	struct:GePrecomp
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeCached
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP1P1
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP2
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP3
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn zero(dst: &mut [u8]) {$/;"	f
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP2 {$/;"	P	implementation:GeP2
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP3 {$/;"	P	implementation:GeP3
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GePrecomp {$/;"	P	implementation:GePrecomp
zero_until	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn zero_until(&mut self, idx: usize);$/;"	P	interface:FixedBuffer
