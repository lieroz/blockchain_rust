!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'de, 'a, A> MapAccess<'de> for &'a mut A$/;"	c
A	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'de, 'a, A> SeqAccess<'de> for &'a mut A$/;"	c
AES_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    AES_128,$/;"	e	enum:Variant
AES_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    AES_128,$/;"	e	enum:AlgorithmID
AES_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^pub static AES_128: Algorithm = Algorithm {$/;"	v
AES_128_GCM	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    AES_128_GCM,$/;"	e	enum:AlgorithmID
AES_128_GCM	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^pub static AES_128_GCM: aead::Algorithm = aead::Algorithm {$/;"	v
AES_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    AES_256,$/;"	e	enum:Variant
AES_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    AES_256,$/;"	e	enum:AlgorithmID
AES_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^pub static AES_256: Algorithm = Algorithm {$/;"	v
AES_256_GCM	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    AES_256_GCM,$/;"	e	enum:AlgorithmID
AES_256_GCM	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^pub static AES_256_GCM: aead::Algorithm = aead::Algorithm {$/;"	v
AES_KEY	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^pub(super) struct AES_KEY {$/;"	s
ALL_ALGORITHMS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub static ALL_ALGORITHMS: [&digest::Algorithm; 5] = [$/;"	v	module:test_util
Aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl Aad<'static> {$/;"	c
Aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl<'a> Aad<'a> {$/;"	c
Aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub struct Aad<'a>(&'a [u8]);$/;"	s
Access	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^        impl<'de, 'a, 'b: 'a, R: BincodeRead<'de> + 'b, O: Options> serde::de::MapAccess<'de>$/;"	c	function:deserialize_map
Access	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^        impl<'de, 'a, 'b: 'a, R: BincodeRead<'de> + 'b, O: Options> serde::de::SeqAccess<'de>$/;"	c	function:deserialize_tuple
Access	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^        struct Access<'a, R: Read + 'a, O: Options + 'a> {$/;"	s	function:deserialize_map
Access	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^        struct Access<'a, R: Read + 'a, O: Options + 'a> {$/;"	s	function:deserialize_tuple
Accumulator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^pub trait Accumulator {$/;"	i
Adjacent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    Adjacent { tag: String, content: String },$/;"	e	enum:TagType
AeadDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadDecryptor {$/;"	i
AeadEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadEncryptor {$/;"	i
Aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    Aes(aes::Key),$/;"	e	enum:KeyInner
Aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Aes,$/;"	e	enum:SymmetricCipherSpec
AesBitValueOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesBitValueOps: BitXor<Output = Self> + BitAnd<Output = Self> + Not<Output = Self> + Defau/;"	i
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    AesGcm(aes_gcm::Key),$/;"	e	enum:KeyInner
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadDecryptor for AesGcm<'static> {$/;"	c
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadEncryptor for AesGcm<'static> {$/;"	c
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AesGcm<'a> {$/;"	c
AesGcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^pub struct AesGcm<'a> {$/;"	s
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiDecryptor {$/;"	c
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockDecryptor for AesNiDecryptor {$/;"	c
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	c
AesNiDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiDecryptor {$/;"	s
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiEncryptor {$/;"	c
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockEncryptor for AesNiEncryptor {$/;"	c
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	c
AesNiEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiEncryptor {$/;"	s
AesOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesOps {$/;"	i
Affine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^        Affine(Elem<R>, Elem<R>),$/;"	e	enum:tests::TestPoint
AffinePoint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    struct AffinePoint {$/;"	s	module:tests
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^impl Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^impl Eq for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^impl PartialEq for Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^impl sealed::Sealed for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub struct Algorithm {$/;"	s
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^impl Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^impl sealed::Sealed for Algorithm {}$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^impl signature::VerificationAlgorithm for Algorithm {$/;"	c
Algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub struct Algorithm {$/;"	s
AlgorithmID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^enum AlgorithmID {$/;"	g
AlgorithmID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^enum AlgorithmID {$/;"	g
AllowZero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub enum AllowZero {$/;"	g
AlreadyPadded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    AlreadyPadded = 0,$/;"	e	enum:Pad
ArcWeak	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for ArcWeak<T>$/;"	c
ArcWeak	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for ArcWeak<T>$/;"	c
Arguments	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<'a> Serialize for fmt::Arguments<'a> {$/;"	c
ArrayInPlaceVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct ArrayInPlaceVisitor<'a, A: 'a>(&'a mut A);$/;"	s
ArrayVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for ArrayVisitor<[T; 0]> {$/;"	c
ArrayVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<A> ArrayVisitor<A> {$/;"	c
ArrayVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct ArrayVisitor<A> {$/;"	s
Attr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl<'c, T> Attr<'c, T> {$/;"	c
Attr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^struct Attr<'c, T> {$/;"	s
B	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    impl<A, B> Pair for (A, B) {$/;"	c	module:private
BAD_NONNEGATIVE_INTEGERS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    static BAD_NONNEGATIVE_INTEGERS: &'static [&'static [u8]] = &[$/;"	v	module:tests
BI	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static BI: [GePrecomp; 8] = [$/;"	v
BLOCK_LEN	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^impl From_<&mut [Block; 2]> for &mut [u8; 2 * BLOCK_LEN] {$/;"	c
BSAES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    BSAES = 3,$/;"	e	enum:Implementation
BTreeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, K, V, E> IntoDeserializer<'de, E> for BTreeMap<K, V>$/;"	c
BTreeSet	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for BTreeSet<T>$/;"	c
Bcrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Bcrypt,$/;"	e	enum:KdfSpec
Big	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    Big,$/;"	e	enum:EndianOption
BigEndian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl<T> Layout<T> for BigEndian<T>$/;"	c
BincodeRead	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^pub trait BincodeRead<'storage>: io::Read {$/;"	i
BitIndex	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    struct BitIndex(Wrapping<size_t>);$/;"	s	function:fold_5_bit_windows
BitLength	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^impl BitLength {$/;"	c
BitLength	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^pub struct BitLength(usize);$/;"	s
BitString	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    BitString = 0x03,$/;"	e	enum:Tag
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Blake2b,$/;"	e	enum:DigestSpec
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Blake2b {$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Digest for Blake2b {$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Mac for Blake2b {$/;"	c
Blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^pub struct Blake2b {$/;"	s
Blake2bParam	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^struct Blake2bParam {$/;"	s
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Blake2s {$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Digest for Blake2s {$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Mac for Blake2s {$/;"	c
Blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^pub struct Blake2s {$/;"	s
Blake2sParam	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^struct Blake2sParam {$/;"	s
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^impl AsMut<[u8; BLOCK_LEN]> for Block {$/;"	c
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^impl AsRef<[u8; BLOCK_LEN]> for Block {$/;"	c
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^impl Block {$/;"	c
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^impl<'a> From<&'a [u8; BLOCK_LEN]> for Block {$/;"	c
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^impl<'a> From_<&'a [u8; 2 * BLOCK_LEN]> for [Block; 2] {$/;"	c
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^pub struct Block {$/;"	s
Block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^    Block(TokenStream),$/;"	e	enum:Fragment
Block	/home/lieroz/blockchain_rust/src/block.rs	/^impl Block {$/;"	c
Block	/home/lieroz/blockchain_rust/src/block.rs	/^pub struct Block {$/;"	s
BlockDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptor {$/;"	i
BlockDecryptorX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptorX8 {$/;"	i
BlockEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptor {$/;"	i
BlockEncryptorX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptorX8 {$/;"	i
BlockEngine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <P: BlockProcessor, X: PaddingProcessor> BlockEngine<P, X> {$/;"	c
BlockEngine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct BlockEngine<P, X> {$/;"	s
BlockEngineState	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^enum BlockEngineState {$/;"	g
BlockModeSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum BlockModeSpec {$/;"	g
BlockProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^trait BlockProcessor {$/;"	i
Blockchain	/home/lieroz/blockchain_rust/src/blockchain.rs	/^impl Blockchain {$/;"	c
Blockchain	/home/lieroz/blockchain_rust/src/blockchain.rs	/^pub struct Blockchain {$/;"	s
BlockchainIterator	/home/lieroz/blockchain_rust/src/blockchain.rs	/^impl<'a> Iterator for BlockchainIterator<'a> {$/;"	c
BlockchainIterator	/home/lieroz/blockchain_rust/src/blockchain.rs	/^pub struct BlockchainIterator<'a> {$/;"	s
BlodeModePaddingSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum BlodeModePaddingSpec {$/;"	g
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Blowfish,$/;"	e	enum:SymmetricCipherSpec
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockDecryptor for Blowfish {$/;"	c
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockEncryptor for Blowfish {$/;"	c
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^impl Blowfish {$/;"	c
Blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^pub struct Blowfish {$/;"	s
Bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Bool(bool),$/;"	e	enum:Unexpected
Bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Bool(bool),$/;"	e	enum:content::Content
Bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Bool(bool),$/;"	e	enum:content::Content
BoolAttr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl<'c> BoolAttr<'c> {$/;"	c
BoolAttr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^struct BoolAttr<'c>(Attr<'c, ()>);$/;"	s
BoolVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for BoolVisitor {$/;"	c
BoolVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct BoolVisitor;$/;"	s
Boolean	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    Boolean = 0x01,$/;"	e	enum:Tag
Boolean	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Boolean,$/;"	e	enum:Unsupported
Borrowed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    Borrowed(BTreeSet<syn::Lifetime>),$/;"	e	enum:BorrowedLifetimes
BorrowedBytesDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> BorrowedBytesDeserializer<'de, E> {$/;"	c
BorrowedBytesDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedBytesDeserializer<'de, E>$/;"	c
BorrowedBytesDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct BorrowedBytesDeserializer<'de, E> {$/;"	s
BorrowedLifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^enum BorrowedLifetimes {$/;"	g
BorrowedLifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl BorrowedLifetimes {$/;"	c
BorrowedLifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    impl Parse for BorrowedLifetimes {$/;"	c	function:parse_lit_into_lifetimes
BorrowedLifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    struct BorrowedLifetimes(Punctuated<syn::Lifetime, Token![+]>);$/;"	s	function:parse_lit_into_lifetimes
BorrowedStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> BorrowedStrDeserializer<'de, E> {$/;"	c
BorrowedStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct BorrowedStrDeserializer<'de, E> {$/;"	s
BorrowedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> BorrowedWriteBuffer<'a> {$/;"	c
BorrowedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for BorrowedWriteBuffer<'a> {$/;"	c
BorrowedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct BorrowedWriteBuffer<'a> {$/;"	s
Bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Bound<T>$/;"	c
Bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for Bound<T>$/;"	c
BoundVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for BoundVisitor<T>$/;"	c	function:deserialize
BoundVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        struct BoundVisitor<T>(PhantomData<Bound<T>>);$/;"	s	function:deserialize
Bounded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^impl SizeLimit for Bounded {$/;"	c
Bounded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub struct Bounded(pub u64);$/;"	s
Box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Decryptor for Box<SynchronousStreamCipher + 'static> {$/;"	c
Box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Encryptor for Box<SynchronousStreamCipher + 'static> {$/;"	c
Box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl SynchronousStreamCipher for Box<SynchronousStreamCipher + 'static> {$/;"	c
BoxedLimbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> Clone for BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> Deref for BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> DerefMut for BoxedLimbs<M> {$/;"	c
BoxedLimbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^struct BoxedLimbs<M> {$/;"	s
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf2Ops for Bs2State<T> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs2State<T> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T> Bs2State<T> {$/;"	c
Bs2State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs2State<T>(T, T);$/;"	s
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy> Gf4Ops for Bs4State<T> {$/;"	c
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs4State<T> {$/;"	c
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs4State<T> {$/;"	c
Bs4State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs4State<T>(T, T, T, T);$/;"	s
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: AesBitValueOps + Copy + 'static> AesOps for Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + BitAnd<Output = T> + Copy + Default> Gf8Ops for Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: BitXor<Output = T> + Copy> Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Not<Output = T> + Copy> Bs8State<T> {$/;"	c
Bs8State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs8State<T>(T, T, T, T, T, T, T, T);$/;"	s
BufferOverflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    BufferOverflow$/;"	e	enum:BufferResult
BufferResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub enum BufferResult {$/;"	g
BufferTooSmall	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    BufferTooSmall,$/;"	e	enum:DecodeError
BufferUnderflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    BufferUnderflow,$/;"	e	enum:BufferResult
ByteArray	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    ByteArray,$/;"	e	enum:Unsupported
ByteBuf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        ByteBuf(Vec<u8>),$/;"	e	enum:content::Content
Bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Bytes(&'a [u8]),$/;"	e	enum:Unexpected
Bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Bytes(&'de [u8]),$/;"	e	enum:content::Content
Bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Bytes(Vec<u8>),$/;"	e	enum:content::Content
BytesDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for BytesDeserializer<'a, E>$/;"	c
BytesDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct BytesDeserializer<'a, E> {$/;"	s
BytesVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'a> Visitor<'a> for BytesVisitor {$/;"	c
BytesVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct BytesVisitor;$/;"	s
C0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C0: [u64; 256] = [$/;"	v
C1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C1: [u32; 16] = [$/;"	v
C1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C1: [u64; 256] = [$/;"	v
C2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C2: [u32; 16] = [$/;"	v
C2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C2: [u64; 256] = [$/;"	v
C3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C3: [u32; 16] = [$/;"	v
C3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C3: [u64; 256] = [$/;"	v
C4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^static C4: [u32; 16] = [$/;"	v
C4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C4: [u64; 256] = [$/;"	v
C5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C5: [u64; 256] = [$/;"	v
C6	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C6: [u64; 256] = [$/;"	v
C7	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static C7: [u64; 256] = [$/;"	v
CASES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static CASES: &[(&[Limb], usize)] = &[$/;"	v	function:tests::test_limbs_minimal_bits
CASES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    static CASES: &'static [(&'static [u8], &'static [u8], &'static [u8], &'static [u8])] = &[$/;"	v	module:test
CHACHA20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    CHACHA20,$/;"	e	enum:AlgorithmID
CHACHA20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^pub static CHACHA20: Algorithm = Algorithm {$/;"	v
CHACHA20_POLY1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    CHACHA20_POLY1305,$/;"	e	enum:AlgorithmID
CHACHA20_POLY1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^pub static CHACHA20_POLY1305: aead::Algorithm = aead::Algorithm {$/;"	v
CLI	/home/lieroz/blockchain_rust/src/cli.rs	/^impl<'a> CLI<'a> {$/;"	c
CLI	/home/lieroz/blockchain_rust/src/cli.rs	/^pub struct CLI<'a> {$/;"	s
CLMUL	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    CLMUL,$/;"	e	enum:Implementation
COMMON_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^pub static COMMON_OPS: CommonOps = CommonOps {$/;"	v
COMMON_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^pub static COMMON_OPS: CommonOps = CommonOps {$/;"	v
CStr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for CStr {$/;"	c
CString	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for CString {$/;"	c
CString	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for CString {$/;"	c
CStringVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for CStringVisitor {$/;"	c
CStringVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct CStringVisitor;$/;"	s
CURVE25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^static CURVE25519: ec::Curve = ec::Curve {$/;"	v
CamelCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    CamelCase,$/;"	e	enum:RenameRule
Cbc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Cbc,$/;"	e	enum:BlockModeSpec
CbcDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> CbcDecryptor<T, X> {$/;"	c
CbcDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for CbcDecryptor<T, X> {$/;"	c
CbcDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcDecryptor<T, X> {$/;"	s
CbcDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for CbcDecryptorProcessor<T> {$/;"	c
CbcDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcDecryptorProcessor<T> {$/;"	s
CbcEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> CbcEncryptor<T, X> {$/;"	c
CbcEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for CbcEncryptor<T, X> {$/;"	c
CbcEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcEncryptor<T, X> {$/;"	s
CbcEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for CbcEncryptorProcessor<T> {$/;"	c
CbcEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcEncryptorProcessor<T> {$/;"	s
CbcTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CbcTest {$/;"	c	module:test
CbcTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CbcTest {$/;"	s	module:test
Cell	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Cell<T>$/;"	c
Cell	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for Cell<T>$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    ChaCha20(chacha::Key),$/;"	e	enum:KeyInner
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    ChaCha20,$/;"	e	enum:SymmetricCipherSpec
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Decryptor for ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Encryptor for ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl SynchronousStreamCipher for ChaCha20 {$/;"	c
ChaCha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^pub struct ChaCha20 {$/;"	s
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    ChaCha20Poly1305(chacha20_poly1305::Key),$/;"	e	enum:KeyInner
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadDecryptor for ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadEncryptor for ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl ChaCha20Poly1305 {$/;"	c
ChaCha20Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^pub struct ChaCha20Poly1305 {$/;"	s
ChaChaState	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^struct ChaChaState {$/;"	s
Char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Char(char),$/;"	e	enum:Unexpected
Char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Char,$/;"	e	enum:Unsupported
CharVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for CharVisitor {$/;"	c
CharVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct CharVisitor;$/;"	s
CipherTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    trait CipherTest {$/;"	i	module:test
CommonOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^impl CommonOps {$/;"	c
CommonOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct CommonOps {$/;"	s
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeMap for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeSeq for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeStruct for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeStructVariant for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeTuple for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeTupleStruct for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W, O> serde::ser::SerializeTupleVariant for Compound<'a, W, O>$/;"	c
Compound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^pub(crate) struct Compound<'a, W: 'a, O: Options + 'a> {$/;"	s
Config	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl Config {$/;"	c
Config	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^pub struct Config {$/;"	s
Container	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^impl<'a> Container<'a> {$/;"	c
Container	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^pub struct Container<'a> {$/;"	s
Container	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl Container {$/;"	c
Container	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub struct Container {$/;"	s
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Content(Content<'de>),$/;"	e	enum:content::TagOrContent
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagContentOtherField
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagOrContentField
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> Content<'de> {$/;"	c	module:content
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> Deserialize<'de> for Content<'de> {$/;"	c	module:content
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub enum Content<'de> {$/;"	g	module:content
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl Serialize for Content {$/;"	c	module:content
Content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub enum Content {$/;"	g	module:content
ContentDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E> {$/;"	c	module:content
ContentDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::IntoDeserializer<'de, E> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct ContentDeserializer<'de, E> {$/;"	s	module:content
ContentRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E> {$/;"	c	module:content
ContentRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> Deserializer<'de> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::IntoDeserializer<'de, E> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct ContentRefDeserializer<'a, 'de: 'a, E> {$/;"	s	module:content
ContentSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ContentSerializer<E> {$/;"	c	module:content
ContentSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> Serializer for ContentSerializer<E>$/;"	c	module:content
ContentSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct ContentSerializer<E> {$/;"	s	module:content
ContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> Visitor<'de> for ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct ContentVisitor<'de> {$/;"	s	module:content
Context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^impl Context {$/;"	c
Context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^pub struct Context {$/;"	s
Context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^impl Context {$/;"	c
Context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^pub struct Context {$/;"	s
Context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^impl Context {$/;"	c
Context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub struct Context {$/;"	s
ContextSpecificConstructed0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    ContextSpecificConstructed0 = CONTEXT_SPECIFIC | CONSTRUCTED | 0,$/;"	e	enum:Tag
ContextSpecificConstructed1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    ContextSpecificConstructed1 = CONTEXT_SPECIFIC | CONSTRUCTED | 1,$/;"	e	enum:Tag
ContextSpecificConstructed3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    ContextSpecificConstructed3 = CONTEXT_SPECIFIC | CONSTRUCTED | 3,$/;"	e	enum:Tag
CountSize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^impl<L: SizeLimit> SizeLimit for CountSize<L> {$/;"	c
CountSize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^struct CountSize<L: SizeLimit> {$/;"	s
Counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^pub type Counter = nonce::Counter<BigEndian<u32>>;$/;"	t
Counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    Counter(Counter),$/;"	e	enum:CounterOrIv
Counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^pub type Counter = nonce::Counter<LittleEndian<u32>>;$/;"	t
Counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl<U32: Layout<u32>> Counter<U32>$/;"	c
CounterOrIv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^enum CounterOrIv {$/;"	g
Cow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, 'a, T: ?Sized> Deserialize<'de> for Cow<'a, T>$/;"	c
Cow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for Cow<'a, str>$/;"	c
CowBytesVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowBytesVisitor {$/;"	c	function:borrow_cow_bytes
CowBytesVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct CowBytesVisitor;$/;"	s	function:borrow_cow_bytes
CowStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'a, E> Clone for CowStrDeserializer<'a, E> {$/;"	c
CowStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct CowStrDeserializer<'a, E> {$/;"	s
CowStrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowStrVisitor {$/;"	c	function:borrow_cow_str
CowStrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct CowStrVisitor;$/;"	s	function:borrow_cow_str
Ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ctr,$/;"	e	enum:BlockModeSpec
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Decryptor for CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Encryptor for CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> SynchronousStreamCipher for CtrMode<A> {$/;"	c
CtrMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrMode<A> {$/;"	s
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Decryptor for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Encryptor for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> SynchronousStreamCipher for CtrModeX8<A> {$/;"	c
CtrModeX8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrModeX8<A> {$/;"	s
CtrTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct CtrTest {$/;"	s	module:test
CtrTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CtrTest {$/;"	c	module:test
CtrTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CtrTest {$/;"	s	module:test
Ctxt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^impl Ctxt {$/;"	c
Ctxt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^impl Drop for Ctxt {$/;"	c
Ctxt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^pub struct Ctxt {$/;"	s
Curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^pub struct Curve {$/;"	s
Curve25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    Curve25519,$/;"	e	enum:CurveID
CurveGen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    impl CurveGen {$/;"	c	module:tests
CurveGen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    impl Iterator for CurveGen {$/;"	c	module:tests
CurveGen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    struct CurveGen {$/;"	s	module:tests
CurveID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^pub enum CurveID {$/;"	g
Custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    Custom(String),$/;"	e	enum:ErrorKind
Data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^impl<'a> Data<'a> {$/;"	c
Data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^pub enum Data<'a> {$/;"	g
DeImplGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl<'a> DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl<'a> ToTokens for DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^struct DeImplGenerics<'a>(&'a Parameters);$/;"	s
DeTypeGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl<'a> DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl<'a> ToTokens for DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^struct DeTypeGenerics<'a>(&'a Parameters);$/;"	s
DecPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> DecPadding<X> {$/;"	c
DecPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for DecPadding<X> {$/;"	c
DecPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct DecPadding<X> {$/;"	s
DecodeBuilder	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^impl<'a, I: AsRef<[u8]>> DecodeBuilder<'a, I> {$/;"	c
DecodeBuilder	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^pub struct DecodeBuilder<'a, I: AsRef<[u8]>> {$/;"	s
DecodeError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^impl Error for DecodeError {$/;"	c
DecodeError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^impl fmt::Display for DecodeError {$/;"	c
DecodeError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^pub enum DecodeError {$/;"	g
Decryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    Decryption$/;"	e	enum:KeyType
Decryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    Decryption$/;"	e	enum:KeyType
Decryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Decryptor {$/;"	i
Default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    Default,$/;"	e	enum:Default
Default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl Default {$/;"	c
Default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub enum Default {$/;"	g
DefaultOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl DefaultOptions {$/;"	c
DefaultOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl Options for DefaultOptions {$/;"	c
DefaultOptions	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^struct DefaultOptions(Infinite);$/;"	s
Derive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^pub enum Derive {$/;"	g
DerivedKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^struct DerivedKey(Block);$/;"	s
Des	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Des,$/;"	e	enum:SymmetricCipherSpec
Deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for ! {$/;"	c
Deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for () {$/;"	c
Deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait Deserialize<'de>: Sized {$/;"	i
Deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^    Deserialize,$/;"	e	enum:Derive
DeserializeAnyNotSupported	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    DeserializeAnyNotSupported,$/;"	e	enum:ErrorKind
DeserializeOwned	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait DeserializeOwned: for<'de> Deserialize<'de> {}$/;"	i
DeserializeSeed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait DeserializeSeed<'de>: Sized {$/;"	i
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^        impl<'de, 'a, R: 'a, O> serde::de::EnumAccess<'de> for &'a mut Deserializer<R, O>$/;"	c	function:deserialize_enum
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^impl<'de, 'a, R, O> serde::Deserializer<'de> for &'a mut Deserializer<R, O>$/;"	c
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^impl<'de, 'a, R, O> serde::de::VariantAccess<'de> for &'a mut Deserializer<R, O>$/;"	c
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^impl<'de, R: BincodeRead<'de>, O: Options> Deserializer<R, O> {$/;"	c
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^pub(crate) struct Deserializer<R, O: Options> {$/;"	s
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IntoDeserializer
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait Deserializer<'de>: Sized {$/;"	i
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = CowStrDeserializer<'a, E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = MapDeserializer<'de, <Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = NeverDeserializer<E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = SeqDeserializer<<Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = StringDeserializer<E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = U32Deserializer<E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Deserializer = UnitDeserializer<E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Deserializer = Self;$/;"	t	module:content
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    type Deserializer = <u32 as IntoDeserializer<'de, E>>::Deserializer;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    type Deserializer = BytesDeserializer<'a, E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IdentifierDeserializer
DeserializerAcceptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub trait DeserializerAcceptor<'a> {$/;"	i
DevURandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        DevURandom,$/;"	e	enum:sysrand_or_urandom::Mechanism
Digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^impl AsRef<[u8]> for Digest {$/;"	c
Digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^impl Digest {$/;"	c
Digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^impl core::fmt::Debug for Digest {$/;"	c
Digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub struct Digest {$/;"	s
Digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^pub trait Digest {$/;"	i
DigestSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum DigestSpec {$/;"	g
Direction	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^enum Direction {$/;"	g
Document	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^impl AsRef<[u8]> for Document {$/;"	c
Document	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^pub struct Document {$/;"	s
Duration	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for Duration {$/;"	c
Duration	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for Duration {$/;"	c
DurationVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:Duration::deserialize
DurationVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:SystemTime::deserialize
DurationVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:Duration::deserialize
DurationVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:SystemTime::deserialize
E	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl<E: Encoding> ProductEncoding for (R, E) {$/;"	c
E	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl<E: ReductionEncoding> ProductEncoding for (RInverse, E)$/;"	c
E	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl<E: ReductionEncoding> ProductEncoding for (Unencoded, E) {$/;"	c
ECDSA_P256_SHA256_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P256_SHA256_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P256_SHA256_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA256_ASN1_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P256_SHA256_ASN1_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_ASN1_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P256_SHA256_ASN1_SIGNING: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA256_FIXED	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P256_SHA256_FIXED,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_FIXED	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P256_SHA256_FIXED: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA256_FIXED_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P256_SHA256_FIXED_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA256_FIXED_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P256_SHA256_FIXED_SIGNING: Algorithm = Algorithm {$/;"	v
ECDSA_P256_SHA384_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P256_SHA384_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P256_SHA384_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P256_SHA384_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA256_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P384_SHA256_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA256_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P384_SHA256_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P384_SHA384_ASN1,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_ASN1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P384_SHA384_ASN1: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_ASN1_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P384_SHA384_ASN1_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_ASN1_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P384_SHA384_ASN1_SIGNING: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_FIXED	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ECDSA_P384_SHA384_FIXED,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_FIXED	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^pub static ECDSA_P384_SHA384_FIXED: Algorithm = Algorithm {$/;"	v
ECDSA_P384_SHA384_FIXED_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    ECDSA_P384_SHA384_FIXED_SIGNING,$/;"	e	enum:AlgorithmID
ECDSA_P384_SHA384_FIXED_SIGNING	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub static ECDSA_P384_SHA384_FIXED_SIGNING: Algorithm = Algorithm {$/;"	v
EC_PUBLIC_KEY_P256_PKCS8_V1_TEMPLATE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^static EC_PUBLIC_KEY_P256_PKCS8_V1_TEMPLATE: pkcs8::Template = pkcs8::Template {$/;"	v
EC_PUBLIC_KEY_P384_PKCS8_V1_TEMPLATE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^static EC_PUBLIC_KEY_P384_PKCS8_V1_TEMPLATE: pkcs8::Template = pkcs8::Template {$/;"	v
ED25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^pub static ED25519: EdDSAParameters = EdDSAParameters {};$/;"	v
EQUAL	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static EQUAL: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_equal_limb
EQUAL	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static EQUAL: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_less_than_limb_constant_time
ERR_STR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	v	function:pbkdf2_check
ERR_STR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	v	function:scrypt_check
EVENS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static EVENS: &[&[Limb]] = &[$/;"	v	function:tests::test_limbs_are_even
Ebc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ebc,$/;"	e	enum:BlockModeSpec
EcbDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for EcbDecryptor<T, X> {$/;"	c
EcbDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> EcbDecryptor<T, X> {$/;"	c
EcbDecryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbDecryptor<T, X> {$/;"	s
EcbDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for EcbDecryptorProcessor<T> {$/;"	c
EcbDecryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbDecryptorProcessor<T> {$/;"	s
EcbEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> EcbEncryptor<T, X> {$/;"	c
EcbEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for EcbEncryptor<T, X> {$/;"	c
EcbEncryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbEncryptor<T, X> {$/;"	s
EcbEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for EcbEncryptorProcessor<T> {$/;"	c
EcbEncryptorProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbEncryptorProcessor<T> {$/;"	s
EcbTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for EcbTest {$/;"	c	module:test
EcbTest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct EcbTest {$/;"	s	module:test
EdDSAParameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^impl core::fmt::Debug for EdDSAParameters {$/;"	c
EdDSAParameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^impl sealed::Sealed for EdDSAParameters {}$/;"	c
EdDSAParameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^impl signature::VerificationAlgorithm for EdDSAParameters {$/;"	c
EdDSAParameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^pub struct EdDSAParameters;$/;"	s
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^impl Elem<T> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^impl<E: Encoding> Elem<E> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub struct Elem<E: Encoding> {$/;"	s
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub type Elem<E> = elem::Elem<Q, E>;$/;"	t
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^impl<M, E: Encoding> Elem<M, E> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub struct Elem<M, E: Encoding> {$/;"	s
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M, E: ReductionEncoding> Elem<M, E> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M, E> Clone for Elem<M, E> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M, E> Elem<M, E> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> Elem<M, R> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> Elem<M, Unencoded> {$/;"	c
Elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub struct Elem<M, E = Unencoded> {$/;"	s
EncPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> EncPadding<X> {$/;"	c
EncPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for EncPadding<X> {$/;"	c
EncPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EncPadding<X> {$/;"	s
Encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/utf8.rs	/^impl Encode {$/;"	c
Encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/utf8.rs	/^pub struct Encode {$/;"	s
EncodeBuilder	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^impl<'a, I: AsRef<[u8]>> EncodeBuilder<'a, I> {$/;"	c
EncodeBuilder	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^pub struct EncodeBuilder<'a, I: AsRef<[u8]>> {$/;"	s
EncodeUtf8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl EncodeUtf8 {$/;"	c
EncodeUtf8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^struct EncodeUtf8 {$/;"	s
EncodedPoint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub type EncodedPoint = [u8; ELEM_LEN];$/;"	t
Encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub trait Encoding {}$/;"	i
Encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub trait Encoding {}$/;"	i
Encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/endian.rs	/^pub trait Encoding<T>: Copy + From<T> + Sized + sealed::Sealed$/;"	i
Encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^pub trait Encoding: Padding {$/;"	i
Encryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    Encryption,$/;"	e	enum:KeyType
Encryption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    Encryption,$/;"	e	enum:KeyType
Encryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Encryptor {$/;"	i
End	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        End,$/;"	e	enum:range::Field
EndOfInput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct EndOfInput;$/;"	s
Endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Endian = E;$/;"	t	implementation:WithOtherEndian
Endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Endian = LittleEndian;$/;"	t	implementation:DefaultOptions
Endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Endian = O::Endian;$/;"	t	implementation:O
Endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Endian = O::Endian;$/;"	t	implementation:WithOtherLimit
Endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Endian: ByteOrder + 'static;$/;"	t	interface:Options
EndianOption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^enum EndianOption {$/;"	g
Engine256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256 {$/;"	c
Engine256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256 {$/;"	s
Engine256State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256State {$/;"	c
Engine256State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256State {$/;"	s
Engine512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512 {$/;"	c
Engine512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512 {$/;"	s
Engine512State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512State {$/;"	c
Engine512State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512State {$/;"	s
Enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Enum,$/;"	e	enum:Unexpected
Enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Enum,$/;"	e	enum:Unsupported
Enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    Enum(Vec<Variant<'a>>),$/;"	e	enum:Data
EnumAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait EnumAccess<'de>: Sized {$/;"	i
EnumDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::EnumAccess<'de> for EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct EnumDeserializer<'de, E>$/;"	s	module:content
EnumRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::EnumAccess<'de> for EnumRefDeserializer<'a, 'de, E>$/;"	c	module:content
EnumRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct EnumRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
EphemeralPrivateKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^impl<'a> EphemeralPrivateKey {$/;"	c
EphemeralPrivateKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^pub struct EphemeralPrivateKey {$/;"	s
Err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Err,$/;"	e	enum:deserialize::Field
Err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    type Err = ();$/;"	t	implementation:RenameRule
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            type Error = Error;$/;"	t	function:deserialize_enum
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            type Error = Error;$/;"	t	implementation:deserialize_map::Access
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            type Error = Error;$/;"	t	implementation:deserialize_tuple::Access
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    type Error = Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^impl From<io::Error> for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^impl serde::de::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^impl serde::ser::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^pub type Error = Box<ErrorKind>;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Error = Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Error = Error;$/;"	t	implementation:Serializer
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Error = Error;$/;"	t	implementation:SizeChecker
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Error = Error;$/;"	t	implementation:SizeCompound
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    type Error = <T as TryFrom_<F>>::Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    type Error;$/;"	t	interface:TryFrom_
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    type Error;$/;"	t	interface:TryInto_
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    Error(SymmetricCipherError)$/;"	e	enum:BlockEngineState
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Error = A::Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:Deserializer
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:EnumAccess
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:MapAccess
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:SeqAccess
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:VariantAccess
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        type Error = E;$/;"	t	module:private
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Error = A::Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Error = E;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl Display for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl de::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl error::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct Error {$/;"	s
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Error = E;$/;"	t	function:missing_field
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    type Error = E;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type Error = M::Error;$/;"	t	module:content
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type Error = M::Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type Error = S::Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl Display for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl error::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub struct Error;$/;"	s
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    type Error = Error;$/;"	t
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeMap
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeSeq
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStruct
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStructVariant
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTuple
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleStruct
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleVariant
Error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:Serializer
ErrorImpl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^type ErrorImpl = ();$/;"	t
ErrorImpl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^type ErrorImpl = Box<str>;$/;"	t
ErrorKind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^impl StdError for ErrorKind {$/;"	c
ErrorKind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^impl fmt::Display for ErrorKind {$/;"	c
ErrorKind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^pub enum ErrorKind {$/;"	g
Excluded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Excluded,$/;"	e	enum:deserialize::Field
Expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait Expected {$/;"	i
ExpectedInMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl Expected for ExpectedInMap {$/;"	c
ExpectedInMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^struct ExpectedInMap(usize);$/;"	s
ExpectedInSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl Expected for ExpectedInSeq {$/;"	c
ExpectedInSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^struct ExpectedInSeq(usize);$/;"	s
Expr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^    Expr(TokenStream),$/;"	e	enum:Fragment
Expr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^impl ToTokens for Expr {$/;"	c
Expr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^pub struct Expr(pub Fragment);$/;"	s
ExtPoint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^impl ExtPoint {$/;"	c
ExtPoint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub struct ExtPoint {$/;"	s
External	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    External,$/;"	e	enum:TagType
ExternallyTagged	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:StructVariant
ExternallyTagged	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:TupleVariant
F	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^impl<T, F> Into_<T> for F$/;"	c
F	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^impl<T, F> TryInto_<T> for F$/;"	c
F32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        F32(f32),$/;"	e	enum:content::Content
F32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        F32(f32),$/;"	e	enum:content::Content
F64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        F64(f64),$/;"	e	enum:content::Content
F64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        F64(f64),$/;"	e	enum:content::Content
FE_D	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D : Fe = Fe([-10913610,13857413,-15372611,6949391,114729,-8787816,-6275908,-3247719,-1/;"	v
FE_D2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D2 : Fe = Fe([-21827239,-5839606,-30745221,13898782,229458,15978800,-12551817,-6495438/;"	v
FE_ONE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ONE : Fe = Fe([1,0,0,0,0,0,0,0,0,0]);$/;"	v
FE_SQRTM1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_SQRTM1 : Fe = Fe([-32595792,-7943725,9377950,3500415,12389472,-272473,-25146209,-20056/;"	v
FE_ZERO	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ZERO : Fe = Fe([0,0,0,0,0,0,0,0,0,0]);$/;"	v
Fallback	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    Fallback = 4,$/;"	e	enum:Implementation
Fallback	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    Fallback,$/;"	e	enum:Implementation
False	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    False = 0,$/;"	e	enum:LimbMask
FastMode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    FastMode,$/;"	e	enum:BlockEngineState
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Eq for Fe { }$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Mul for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl PartialEq for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub for Fe {$/;"	c
Fe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct Fe(pub [i32; 10]);$/;"	s
Feature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    impl Feature {$/;"	c	module:arm
Feature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    impl Feature {$/;"	c	module:intel
Feature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    pub(crate) struct Feature {$/;"	s	module:arm
Feature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    pub(crate) struct Feature {$/;"	s	module:intel
Features	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^pub(crate) struct Features(());$/;"	s
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        enum Field {$/;"	g	function:deserialize
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        enum Field {$/;"	g	method:Duration::deserialize
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        enum Field {$/;"	g	method:SystemTime::deserialize
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	function:deserialize
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:Duration::deserialize
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:SystemTime::deserialize
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    enum Field {$/;"	g	module:range
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    impl<'de> Deserialize<'de> for Field {$/;"	c	module:range
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^pub struct Field<'a> {$/;"	s
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    Field,$/;"	e	enum:Identifier
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl Field {$/;"	c
Field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub struct Field {$/;"	s
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:deserialize::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:deserialize::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:range::Field::deserialize
FieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            struct FieldVisitor;$/;"	s	method:range::Field::deserialize
File	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub struct File<'a> {$/;"	s
FindTyParams	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^    impl<'ast> Visit<'ast> for FindTyParams<'ast> {$/;"	c	function:with_bound
FindTyParams	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^    struct FindTyParams<'ast> {$/;"	s	function:with_bound
Finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    Finished,$/;"	e	enum:BlockEngineState
First	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        type First = A;$/;"	t	implementation:private::B
First	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        type First;$/;"	t	interface:private::Pair
First	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub type First<T> = <T as Pair>::First;$/;"	t	module:private
FixedBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait FixedBuffer {$/;"	i
FixedBuffer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	c
FixedBuffer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer128 {$/;"	c
FixedBuffer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer128 {$/;"	s
FixedBuffer64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	c
FixedBuffer64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer64 {$/;"	c
FixedBuffer64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer64 {$/;"	s
FixedByteRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl rand::SecureRandom for FixedByteRandom {$/;"	c	module:rand
FixedByteRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl sealed::Sealed for FixedByteRandom {}$/;"	c	module:rand
FixedByteRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub struct FixedByteRandom {$/;"	s	module:rand
FixedSliceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl<'a> rand::SecureRandom for FixedSliceRandom<'a> {$/;"	c	module:rand
FixedSliceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl<'a> sealed::Sealed for FixedSliceRandom<'a> {}$/;"	c	module:rand
FixedSliceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub struct FixedSliceRandom<'a> {$/;"	s	module:rand
FixedSliceSequenceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl<'a> Drop for FixedSliceSequenceRandom<'a> {$/;"	c	module:rand
FixedSliceSequenceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl<'a> rand::SecureRandom for FixedSliceSequenceRandom<'a> {$/;"	c	module:rand
FixedSliceSequenceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    impl<'a> sealed::Sealed for FixedSliceSequenceRandom<'a> {}$/;"	c	module:rand
FixedSliceSequenceRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub struct FixedSliceSequenceRandom<'a> {$/;"	s	module:rand
FlatInternallyTaggedAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatInternallyTaggedAccess<'a, 'de, E>$/;"	c
FlatInternallyTaggedAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct FlatInternallyTaggedAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> FlatMapAccess<'a, 'de, E> {$/;"	c
FlatMapAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatMapAccess<'a, 'de, E>$/;"	c
FlatMapAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct FlatMapAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> Deserializer<'de> for FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct FlatMapDeserializer<'a, 'de: 'a, E>($/;"	s
FlatMapSerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<'a, M> ser::SerializeMap for FlatMapSerializeMap<'a, M>$/;"	c
FlatMapSerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub struct FlatMapSerializeMap<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<'a, M> ser::SerializeStruct for FlatMapSerializeStruct<'a, M>$/;"	c
FlatMapSerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub struct FlatMapSerializeStruct<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStructVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<'a, M> FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<'a, M> ser::SerializeStructVariant for FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub struct FlatMapSerializeStructVariantAsMapValue<'a, M: 'a> {$/;"	s
FlatMapSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<'a, M> FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<'a, M> Serializer for FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub struct FlatMapSerializer<'a, M: 'a>(pub &'a mut M);$/;"	s
FlatStructAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> FlatStructAccess<'a, 'de, E> {$/;"	c
FlatStructAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatStructAccess<'a, 'de, E>$/;"	c
FlatStructAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct FlatStructAccess<'a, 'de: 'a, E> {$/;"	s
Float	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Float(f64),$/;"	e	enum:Unexpected
Float	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Float,$/;"	e	enum:Unsupported
Float	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    Float(f32),$/;"	e	enum:Value
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Fortuna {$/;"	c
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Rng for Fortuna {$/;"	c
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl<'a> SeedableRng<&'a [u8]> for Fortuna {$/;"	c
Fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^pub struct Fortuna {$/;"	s
FortunaGenerator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl FortunaGenerator {$/;"	c
FortunaGenerator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^struct FortunaGenerator {$/;"	s
Fragment	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^impl AsRef<TokenStream> for Fragment {$/;"	c
Fragment	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^pub enum Fragment {$/;"	g
FromBase58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^pub trait FromBase58 {$/;"	i
FromPrimitive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^pub trait FromPrimitive: Sized {$/;"	i
From_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^pub trait From_<F>: Sized {$/;"	i
Funcs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^impl Funcs {$/;"	c
Funcs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^struct Funcs {$/;"	s
G	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	M
G	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	M
GCM128_CONTEXT	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^struct GCM128_CONTEXT {$/;"	s
GCM128_KEY	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^struct GCM128_KEY {$/;"	s
GE_PRECOMP_BASE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^static GE_PRECOMP_BASE : [[GePrecomp; 8]; 32] = [$/;"	v
GFp_ChaCha20_ctr32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^            fn GFp_ChaCha20_ctr32($/;"	f	method:Key::encrypt
GFp_aes_hw_ctr32_encrypt_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_aes_hw_ctr32_encrypt_blocks($/;"	f	method:Key::ctr32_encrypt_blocks
GFp_aes_hw_encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_aes_hw_encrypt(a: *const Block, r: *mut Block, key: &AES_KEY);$/;"	f	method:Key::encrypt_block
GFp_aes_hw_set_encrypt_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_aes_hw_set_encrypt_key($/;"	f	method:Key::new
GFp_aes_nohw_encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_aes_nohw_encrypt(a: *const Block, r: *mut Block, key: &AES_KEY);$/;"	f	method:Key::encrypt_block
GFp_aes_nohw_set_encrypt_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_aes_nohw_set_encrypt_key($/;"	f	method:Key::new
GFp_aesni_gcm_decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^                fn GFp_aesni_gcm_decrypt($/;"	f	function:integrated_aes_gcm
GFp_aesni_gcm_encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^                fn GFp_aesni_gcm_encrypt($/;"	f	function:integrated_aes_gcm
GFp_armcap_P	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        static mut GFp_armcap_P: u32;$/;"	v	module:arm
GFp_block128_xor_assign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^            fn GFp_block128_xor_assign(r: &mut Block, a: Block);$/;"	f	method:Block::bitxor_assign
GFp_bn_from_montgomery	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^        fn GFp_bn_from_montgomery($/;"	f	function:elem_exp_consttime
GFp_bn_from_montgomery_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^        fn GFp_bn_from_montgomery_in_place($/;"	f	function:elem_reduced
GFp_bn_gather5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^            fn GFp_bn_gather5(r: *mut Limb, a_len: size_t, table: *const Limb, i: Window);$/;"	f	function:elem_exp_consttime::gather
GFp_bn_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn GFp_bn_mul_mont($/;"	f
GFp_bn_mul_mont_gather5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^            fn GFp_bn_mul_mont_gather5($/;"	f	function:elem_exp_consttime::gather_mul_base
GFp_bn_neg_inv_mod_r_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                fn GFp_bn_neg_inv_mod_r_u64(n: u64) -> u64;$/;"	f	method:Modulus::from_boxed_limbs
GFp_bn_power5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^            fn GFp_bn_power5($/;"	f	function:elem_exp_consttime::power
GFp_bn_scatter5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^            fn GFp_bn_scatter5(a: *const Limb, a_len: size_t, table: *mut Limb, i: Window);$/;"	f	function:elem_exp_consttime::scatter
GFp_bsaes_ctr32_encrypt_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_bsaes_ctr32_encrypt_blocks($/;"	f	method:Key::ctr32_encrypt_blocks
GFp_cpuid_setup	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^                    fn GFp_cpuid_setup();$/;"	f	function:features
GFp_gcm_ghash_4bit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_ghash_4bit($/;"	f	method:Context::update_blocks
GFp_gcm_ghash_avx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_ghash_avx($/;"	f	method:Context::update_blocks
GFp_gcm_ghash_clmul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_ghash_clmul($/;"	f	method:Context::update_blocks
GFp_gcm_ghash_neon	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_ghash_neon($/;"	f	method:Context::update_blocks
GFp_gcm_gmult_4bit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_gmult_4bit(ctx: &mut Context, Htable: *const GCM128_KEY);$/;"	f	method:Context::update_block
GFp_gcm_gmult_clmul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_gmult_clmul(ctx: &mut Context, Htable: *const GCM128_KEY);$/;"	f	method:Context::update_block
GFp_gcm_gmult_neon	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^                    fn GFp_gcm_gmult_neon(ctx: &mut Context, Htable: *const GCM128_KEY);$/;"	f	method:Context::update_block
GFp_ia32cap_P	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^                    static mut GFp_ia32cap_P: [u32; 4];$/;"	v	method:intel::Feature::available
GFp_memcmp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/constant_time.rs	/^    fn GFp_memcmp(a: *const u8, b: *const u8, len: size_t) -> libc::c_int;$/;"	f
GFp_nistz256_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_add($/;"	f
GFp_nistz256_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_mul_mont($/;"	f
GFp_nistz256_neg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_nistz256_neg(r: *mut Limb, a: *const Limb);$/;"	f	function:tests::p256_elem_neg_test
GFp_nistz256_point_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_point_add($/;"	f
GFp_nistz256_point_add_affine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_nistz256_point_add_affine($/;"	f	function:tests::p256_point_sum_mixed_test
GFp_nistz256_point_double	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_nistz256_point_double($/;"	f	function:tests::p256_point_double_test
GFp_nistz256_point_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_point_mul($/;"	f
GFp_nistz256_point_mul_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_point_mul_base($/;"	f
GFp_nistz256_sqr_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_nistz256_sqr_mont($/;"	f
GFp_nistz384_point_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn GFp_nistz384_point_add($/;"	f
GFp_nistz384_point_double	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_nistz384_point_double($/;"	f	function:tests::p384_point_double_test
GFp_nistz384_point_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn GFp_nistz384_point_mul($/;"	f
GFp_p256_scalar_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_p256_scalar_mul_mont($/;"	f
GFp_p256_scalar_sqr_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_p256_scalar_sqr_mont($/;"	f
GFp_p256_scalar_sqr_rep_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_p256_scalar_sqr_rep_mont(r: *mut Limb, a: *const Limb, rep: Limb);$/;"	f	function:tests::p256_scalar_square_test
GFp_p256_scalar_sqr_rep_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn GFp_p256_scalar_sqr_rep_mont($/;"	f
GFp_p384_elem_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn GFp_p384_elem_add($/;"	f
GFp_p384_elem_div_by_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_p384_elem_div_by_2(r: *mut Limb, a: *const Limb);$/;"	f	function:tests::p384_elem_div_by_2_test
GFp_p384_elem_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn GFp_p384_elem_mul_mont($/;"	f
GFp_p384_elem_neg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_p384_elem_neg(r: *mut Limb, a: *const Limb);$/;"	f	function:tests::p384_elem_neg_test
GFp_p384_elem_sqr_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^unsafe extern "C" fn GFp_p384_elem_sqr_mont($/;"	f
GFp_p384_elem_sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^            fn GFp_p384_elem_sub(r: *mut Limb, a: *const Limb, b: *const Limb);$/;"	f	function:tests::p384_elem_sub_test
GFp_p384_scalar_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn GFp_p384_scalar_mul_mont($/;"	f
GFp_poly1305_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^            fn GFp_poly1305_blocks($/;"	f	method:Context::from_key
GFp_poly1305_emit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^            fn GFp_poly1305_emit(state: &mut Opaque, tag: &mut Tag, nonce: &Nonce);$/;"	f	method:Context::from_key
GFp_poly1305_init_asm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^        fn GFp_poly1305_init_asm($/;"	f	function:init
GFp_sha256_block_data_order	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    fn GFp_sha256_block_data_order(state: &mut State, data: *const u8, num: size_t);$/;"	f
GFp_sha512_block_data_order	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    fn GFp_sha512_block_data_order(state: &mut State, data: *const u8, num: size_t);$/;"	f
GFp_vpaes_encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_vpaes_encrypt(a: *const Block, r: *mut Block, key: &AES_KEY);$/;"	f	method:Key::encrypt_block
GFp_vpaes_set_encrypt_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^                    fn GFp_vpaes_set_encrypt_key($/;"	f	method:Key::new
GFp_x25519_NEON	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^        fn GFp_x25519_NEON($/;"	f	function:x25519_neon
GFp_x25519_fe_invert	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_invert(out: &mut Elem<T>, z: &Elem<T>);$/;"	f
GFp_x25519_fe_isnegative	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_isnegative(elem: &Elem<T>) -> u8;$/;"	f
GFp_x25519_fe_mul_ttt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_mul_ttt(h: &mut Elem<T>, f: &Elem<T>, g: &Elem<T>);$/;"	f
GFp_x25519_fe_neg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_neg(f: &mut Elem<T>);$/;"	f
GFp_x25519_fe_tobytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_fe_tobytes(bytes: &mut EncodedPoint, elem: &Elem<T>);$/;"	f
GFp_x25519_ge_double_scalarmult_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^    fn GFp_x25519_ge_double_scalarmult_vartime($/;"	f
GFp_x25519_ge_frombytes_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn GFp_x25519_ge_frombytes_vartime(h: &mut ExtPoint, s: &EncodedPoint) -> bssl::Result;$/;"	f
GFp_x25519_ge_scalarmult_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    fn GFp_x25519_ge_scalarmult_base(h: &mut ExtPoint, a: &Seed);$/;"	f
GFp_x25519_public_from_private_generic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^        fn GFp_x25519_public_from_private_generic($/;"	f	function:x25519_public_from_private
GFp_x25519_sc_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    fn GFp_x25519_sc_mask(a: &mut Scalar);$/;"	f
GFp_x25519_sc_muladd	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    fn GFp_x25519_sc_muladd(s: &mut Scalar, a: &Scalar, b: &Scalar, c: &Scalar);$/;"	f
GFp_x25519_sc_reduce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/digest.rs	/^    fn GFp_x25519_sc_reduce(s: &mut UnreducedScalar);$/;"	f
GFp_x25519_scalar_mult_generic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^            fn GFp_x25519_scalar_mult_generic($/;"	f	function:x25519_ecdh::scalar_mult
GOOD_POSITIVE_INTEGERS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    static GOOD_POSITIVE_INTEGERS: &'static [(&'static [u8], u8)] = &[$/;"	v	module:tests
GREATER	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static GREATER: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_less_than_limb_constant_time
GeCached	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeCached {$/;"	s
GeP1P1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP1P1 {$/;"	c
GeP1P1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP1P1 {$/;"	s
GeP2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP2 {$/;"	c
GeP2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP2 {$/;"	s
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GeCached> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GePrecomp> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GeCached> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GePrecomp> for GeP3 {$/;"	c
GeP3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP3 {$/;"	s
GePrecomp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^impl GePrecomp {$/;"	c
GePrecomp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GePrecomp {$/;"	s
GeneralizedTime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    GeneralizedTime = 0x18,$/;"	e	enum:Tag
Gf128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl BitXor for Gf128 {$/;"	c
Gf128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Gf128 {$/;"	c
Gf128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	s
Gf2Ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf2Ops {$/;"	i
Gf4Ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf4Ops {$/;"	i
Gf8Ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf8Ops {$/;"	i
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	c
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Ghash {$/;"	c
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Mac for Ghash {$/;"	c
Ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^pub struct Ghash {$/;"	s
GhashWithC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	c
GhashWithC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl GhashWithC {$/;"	c
GhashWithC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^pub struct GhashWithC {$/;"	s
H224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H224: [u32; STATE_LEN] = [$/;"	v
H256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H256: [u32; STATE_LEN] = [$/;"	v
H384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H384: [u64; STATE_LEN] = [$/;"	v
H512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512: [u64; STATE_LEN] = [$/;"	v
H512_TRUNC_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_224: [u64; STATE_LEN] = [$/;"	v
H512_TRUNC_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_256: [u64; STATE_LEN] = [$/;"	v
HWAES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    HWAES = 1,$/;"	e	enum:Implementation
H_unused	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    H_unused: Block,$/;"	m	struct:GCM128_CONTEXT
HashMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, K, V, S, E> IntoDeserializer<'de, E> for HashMap<K, V, S>$/;"	c
HashSet	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, T, S, E> IntoDeserializer<'de, E> for HashSet<T, S>$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Hc128,$/;"	e	enum:SymmetricCipherSpec
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Decryptor for Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Encryptor for Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl SynchronousStreamCipher for Hc128 {$/;"	c
Hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^pub struct Hc128 {$/;"	s
HeaderProtectionKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^impl HeaderProtectionKey {$/;"	c
HeaderProtectionKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^pub struct HeaderProtectionKey {$/;"	s
HexStr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^impl<'a> core::fmt::Debug for HexStr<'a> {$/;"	c
HexStr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^struct HexStr<'a>(pub &'a [u8]);$/;"	s
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Hmac,$/;"	e	enum:MacSpec
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Hmac<D> {$/;"	c
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Mac for Hmac<D> {$/;"	c
Hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^pub struct Hmac<D> {$/;"	s
Htable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    Htable: [u128; GCM128_HTABLE_LEN],$/;"	m	struct:GCM128_KEY
I	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^impl<I> LenHint for I$/;"	c
I16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        I16(i16),$/;"	e	enum:content::Content
I16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        I16(i16),$/;"	e	enum:content::Content
I32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        I32(i32),$/;"	e	enum:content::Content
I32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        I32(i32),$/;"	e	enum:content::Content
I64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        I64(i64),$/;"	e	enum:content::Content
I64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        I64(i64),$/;"	e	enum:content::Content
I8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        I8(i8),$/;"	e	enum:content::Content
I8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        I8(i8),$/;"	e	enum:content::Content
INIT	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        static INIT: spin::Once<()> = spin::Once::new();$/;"	v	function:features
IV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^static IV : [u64; 8] = [$/;"	v
IV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^static IV : [u32; 8] = [$/;"	v
Identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl Identifier {$/;"	c
Identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub enum Identifier {$/;"	g
IdentifierDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub trait IdentifierDeserializer<'de, E: Error> {$/;"	i
IgnoredAny	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^impl<'de> Deserialize<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^impl<'de> Visitor<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^pub struct IgnoredAny;$/;"	s
Implementation	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^pub enum Implementation {$/;"	g
Implementation	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^enum Implementation {$/;"	g
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeMap for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeSeq for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStructVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTuple for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^pub struct Impossible<Ok, Error> {$/;"	s
InPlaceImplGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl<'a> ToTokens for InPlaceImplGenerics<'a> {$/;"	c
InPlaceImplGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^struct InPlaceImplGenerics<'a>(&'a Parameters);$/;"	s
InPlaceSeed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, 'de, T> DeserializeSeed<'de> for InPlaceSeed<'a, T>$/;"	c
InPlaceSeed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct InPlaceSeed<'a, T: 'a>(pub &'a mut T);$/;"	s
InPlaceTypeGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl<'a> ToTokens for InPlaceTypeGenerics<'a> {$/;"	c
InPlaceTypeGenerics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^struct InPlaceTypeGenerics<'a>(&'a Parameters);$/;"	s
Included	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Included,$/;"	e	enum:deserialize::Field
Infinite	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^impl SizeLimit for Infinite {$/;"	c
Infinite	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub struct Infinite;$/;"	s
Infinity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^        Infinity,$/;"	e	enum:tests::TestPoint
Input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl <'a, 'b> PartialEq<&'b [u8]> for Input<'a> {$/;"	c
Input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl<'a, 'b> PartialEq<Input<'b>> for Input<'a> {$/;"	c
Input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl<'a> Input<'a> {$/;"	c
Input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct Input<'a> {$/;"	s
Int	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    Int(i32),$/;"	e	enum:Value
Integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    Integer = 0x02,$/;"	e	enum:Tag
Integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Integer,$/;"	e	enum:Unsupported
Internal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    Internal { tag: String },$/;"	e	enum:TagType
InternallyTagged	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    InternallyTagged {$/;"	e	enum:StructVariant
InternallyTaggedUnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a> InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct InternallyTaggedUnitVisitor<'a> {$/;"	s	module:content
IntoDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait IntoDeserializer<'de, E: Error = value::Error> {$/;"	i
IntoDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for !$/;"	c
IntoDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for ()$/;"	c
Into_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^pub trait Into_<T>$/;"	i
InvalidBoolEncoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    InvalidBoolEncoding(u8),$/;"	e	enum:ErrorKind
InvalidCharEncoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    InvalidCharEncoding,$/;"	e	enum:ErrorKind
InvalidCharacter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    InvalidCharacter {$/;"	e	enum:DecodeError
InvalidChecksum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    InvalidChecksum {$/;"	e	enum:DecodeError
InvalidLength	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    InvalidLength,$/;"	e	enum:SymmetricCipherError
InvalidPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    InvalidPadding$/;"	e	enum:SymmetricCipherError
InvalidTagEncoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    InvalidTagEncoding(usize),$/;"	e	enum:ErrorKind
InvalidUtf8Encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    InvalidUtf8Encoding(Utf8Error),$/;"	e	enum:ErrorKind
InvalidVersion	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    InvalidVersion {$/;"	e	enum:DecodeError
Io	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    Io(io::Error),$/;"	e	enum:ErrorKind
IoReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<R: io::Read> io::Read for IoReader<R> {$/;"	c
IoReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<R> BincodeRead<'static> for IoReader<R>$/;"	c
IoReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<R> IoReader<R> {$/;"	c
IoReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<R> IoReader<R>$/;"	c
IoReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^pub struct IoReader<R> {$/;"	s
IpAddr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::IpAddr {$/;"	c
IpAddr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for net::IpAddr {$/;"	c
IpAddrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            impl<'de> Visitor<'de> for IpAddrVisitor {$/;"	c	method:IpAddr::deserialize
IpAddrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            struct IpAddrVisitor;$/;"	s	method:IpAddr::deserialize
Ipv4Addr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for net::Ipv4Addr {$/;"	c
Ipv6Addr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for net::Ipv6Addr {$/;"	c
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        type Item = Fe;$/;"	t	implementation:tests::CurveGen
Item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    type Item = T;$/;"	t
Item	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    type Item = Block;$/;"	t	implementation:BlockchainIterator
Iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    Iv(Iv),$/;"	e	enum:CounterOrIv
Iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl Iv {$/;"	c
Iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl<U32: Layout<u32>> From<Counter<U32>> for Iv$/;"	c
Iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^pub struct Iv(Block);$/;"	s
KV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^impl<K, V> KV<K, V>$/;"	c
KV	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^pub struct KV<K, V> {$/;"	s
KVError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^type KVError = PersyError;$/;"	t
KVResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^type KVResult = PRes<bool>;$/;"	t
KdfSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum KdfSpec {$/;"	g
KebabCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    KebabCase,$/;"	e	enum:RenameRule
Keccak224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak224,$/;"	e	enum:Sha3Mode
Keccak256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak256,$/;"	e	enum:Sha3Mode
Keccak384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak384,$/;"	e	enum:Sha3Mode
Keccak512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Keccak512,$/;"	e	enum:Sha3Mode
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^struct Key {$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^impl Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^pub(crate) struct Key {$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^pub struct Key {$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^impl Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^impl<'a> From<&'a [u8; KEY_LEN]> for Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^pub struct Key([Block; KEY_BLOCKS]);$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^pub type Key = chacha::Key;$/;"	t
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^impl Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^struct Key {$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^impl Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^pub struct Key(GCM128_KEY);$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^impl From<[Block; KEY_BLOCKS]> for Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^pub struct Key([Block; KEY_BLOCKS]);$/;"	s
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^impl Key {$/;"	c
Key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^pub struct Key {$/;"	s
KeyInner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^enum KeyInner {$/;"	g
KeyInner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^enum KeyInner {$/;"	g
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^impl signature::KeyPair for KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^impl<'a> KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^impl KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^impl KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^impl signature::KeyPair for KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^impl KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^impl signature::KeyPair for KeyPair {$/;"	c
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^pub struct KeyPair {$/;"	s
KeyPair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^pub trait KeyPair: core::fmt::Debug + Send + Sized + Sync {$/;"	i
KeyRejected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl KeyRejected {$/;"	c
KeyRejected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl std::error::Error for KeyRejected {$/;"	c
KeyRejected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl std::fmt::Display for KeyRejected {$/;"	c
KeyRejected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^pub struct KeyRejected(&'static str);$/;"	s
KeySize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub enum KeySize {$/;"	g
KeySize128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize128,$/;"	e	enum:KeySize
KeySize192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize192,$/;"	e	enum:KeySize
KeySize256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    KeySize256$/;"	e	enum:KeySize
KeyType	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^enum KeyType {$/;"	g
KeyType	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^enum KeyType {$/;"	g
L	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^static L: [u8; 32] =$/;"	v
LESSER	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static LESSER: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_less_than_limb_constant_time
LIMBS_add_mod	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn LIMBS_add_mod($/;"	f
LIMBS_add_mod	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^        fn LIMBS_add_mod($/;"	f	function:elem_add
LIMBS_are_even	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMBS_are_even(a: *const Limb, num_limbs: size_t) -> LimbMask;$/;"	f
LIMBS_are_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMBS_are_zero(a: *const Limb, num_limbs: size_t) -> LimbMask;$/;"	f
LIMBS_equal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        fn LIMBS_equal(a: *const Limb, b: *const Limb, num_limbs: size_t) -> LimbMask;$/;"	f	function:limbs_equal_limbs_consttime
LIMBS_equal_limb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMBS_equal_limb(a: *const Limb, b: Limb, num_limbs: size_t) -> LimbMask;$/;"	f
LIMBS_less_than	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMBS_less_than(a: *const Limb, b: *const Limb, num_limbs: size_t) -> LimbMask;$/;"	f
LIMBS_less_than_limb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMBS_less_than_limb(a: *const Limb, b: Limb, num_limbs: size_t) -> LimbMask;$/;"	f
LIMBS_reduce_once	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMBS_reduce_once(r: *mut Limb, m: *const Limb, num_limbs: size_t);$/;"	f
LIMBS_select_512_32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^            fn LIMBS_select_512_32($/;"	f	function:elem_exp_consttime::gather
LIMBS_shl_mod	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^        fn LIMBS_shl_mod(r: *mut Limb, a: *const Limb, m: *const Limb, num_limbs: size_t);$/;"	f	function:elem_mul_by_2
LIMBS_sub_mod	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^        fn LIMBS_sub_mod($/;"	f	function:elem_sub
LIMBS_window5_split_window	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        fn LIMBS_window5_split_window($/;"	f	function:fold_5_bit_windows
LIMBS_window5_unsplit_window	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        fn LIMBS_window5_unsplit_window(limb: Limb, index_within_word: BitIndex) -> Window;$/;"	f	function:fold_5_bit_windows
LIMB_shr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn LIMB_shr(a: Limb, shift: size_t) -> Limb;$/;"	f
LastInput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    LastInput,$/;"	e	enum:BlockEngineState
LastInput2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    LastInput2,$/;"	e	enum:BlockEngineState
Layout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^pub trait Layout<T>: Encoding<T>$/;"	i
LenHint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^trait LenHint: Iterator {$/;"	i
LengthMeasurement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^impl Accumulator for LengthMeasurement {$/;"	c
LengthMeasurement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^impl Into<usize> for LengthMeasurement {$/;"	c
LengthMeasurement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^impl LengthMeasurement {$/;"	c
LengthMeasurement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^pub(super) struct LengthMeasurement {$/;"	s
Limb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub type Limb = u32;$/;"	t
Limb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub type Limb = u64;$/;"	t
LimbMask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub enum LimbMask {$/;"	g
Limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Limit = Infinite;$/;"	t	implementation:DefaultOptions
Limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Limit = L;$/;"	t	implementation:WithOtherLimit
Limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Limit = O::Limit;$/;"	t	implementation:O
Limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Limit = O::Limit;$/;"	t	implementation:WithOtherEndian
Limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    type Limit: SizeLimit + 'static;$/;"	t	interface:Options
LimitOption	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^enum LimitOption {$/;"	g
Limited	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    Limited(u64),$/;"	e	enum:LimitOption
List	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    List(Vec<Value>),$/;"	e	enum:Value
Little	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    Little,$/;"	e	enum:EndianOption
LittleEndian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl<T> Layout<T> for LittleEndian<T>$/;"	c
LowerCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    LowerCase,$/;"	e	enum:RenameRule
M	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                unsafe impl NotMuchSmallerModulus<MM> for M {}$/;"	c	function:tests::test_elem_reduced
M	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                unsafe impl SmallerModulus<MM> for M {}$/;"	c	function:tests::test_elem_reduced
M	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    struct M {}$/;"	s	module:tests
MM	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                struct MM {}$/;"	s	function:tests::test_elem_reduced
MONTGOMERY_BASE_POINT	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^            static MONTGOMERY_BASE_POINT: [u8; 32] = [$/;"	v	function:x25519_public_from_private
Mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^pub trait Mac {$/;"	i
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl Eq for MacResult { }$/;"	c
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl MacResult {$/;"	c
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^impl PartialEq for MacResult {$/;"	c
MacResult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^pub struct MacResult {$/;"	s
MacSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum MacSpec {$/;"	g
Map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Map,$/;"	e	enum:Unexpected
Map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Map(Vec<(Content<'de>, Content<'de>)>),$/;"	e	enum:content::Content
Map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Map(Vec<(Content, Content)>),$/;"	e	enum:content::Content
Map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    Map(HashMap<String, Value>),$/;"	e	enum:Value
MapAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait MapAccess<'de> {$/;"	i
MapAccessDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<A> MapAccessDeserializer<A> {$/;"	c
MapAccessDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct MapAccessDeserializer<A> {$/;"	s
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, E> Clone for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, E> Debug for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, E> MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, E> de::Deserializer<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, E> de::MapAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, E> de::SeqAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct MapDeserializer<'de, I, E>$/;"	s
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::MapAccess<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct MapDeserializer<'de, E>$/;"	s	module:content
MapRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a, 'de, E> MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::MapAccess<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct MapRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Mark	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct Mark {$/;"	s
Match	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^impl ToTokens for Match {$/;"	c
Match	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^pub struct Match(pub Fragment);$/;"	s
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Md5,$/;"	e	enum:DigestSpec
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Digest for Md5 {$/;"	c
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Md5 {$/;"	c
Md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^pub struct Md5 {$/;"	s
Md5State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^impl Md5State {$/;"	c
Md5State	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^struct Md5State {$/;"	s
Mechanism	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    enum Mechanism {$/;"	g	module:sysrand_or_urandom
MissingFieldDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>$/;"	c	function:missing_field
MissingFieldDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);$/;"	s	function:missing_field
Modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^struct Modulus {$/;"	s
Modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl core::fmt::Debug for Modulus<super::N> {$/;"	c
Modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> Modulus<M> {$/;"	c
Modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub struct Modulus<M> {$/;"	s
Mutex	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for Mutex<T>$/;"	c
N	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub enum N {}$/;"	g
N	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^pub enum N {}$/;"	g
N	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                struct N {}$/;"	s	function:tests::test_elem_reduced_once
N0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl From<u64> for N0 {$/;"	c
N0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^struct N0([Limb; 2]);$/;"	s
NEON	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    NEON,$/;"	e	enum:Implementation
NONZEROES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    static NONZEROES: &[&[Limb]] = &[$/;"	v	module:tests
N_RR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^        static N_RR: Scalar<Unencoded> = Scalar {$/;"	v	function:p256_scalar_inv_to_mont::to_mont
N_RR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^        static N_RR: Scalar<Unencoded> = Scalar {$/;"	v	function:p384_scalar_inv_to_mont::to_mont
Name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl Name {$/;"	c
Name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub struct Name {$/;"	s
Nanos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Nanos,$/;"	e	enum:Duration::deserialize::Field
Nanos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Nanos,$/;"	e	enum:SystemTime::deserialize::Field
Native	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    Native,$/;"	e	enum:EndianOption
NeedInput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    NeedInput,$/;"	e	enum:BlockEngineState
NeedOutput	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    NeedOutput,$/;"	e	enum:BlockEngineState
NeverDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for NeverDeserializer<E>$/;"	c
NeverDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct NeverDeserializer<E> {$/;"	s
Newtype	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Newtype(Box<Content<'de>>),$/;"	e	enum:content::Content
Newtype	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    Newtype,$/;"	e	enum:Style
NewtypeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    NewtypeStruct,$/;"	e	enum:Unexpected
NewtypeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        NewtypeStruct(&'static str, Box<Content>),$/;"	e	enum:content::Content
NewtypeVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    NewtypeVariant,$/;"	e	enum:Unexpected
NewtypeVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        NewtypeVariant(&'static str, u32, &'static str, Box<Content>),$/;"	e	enum:content::Content
No	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    No,$/;"	e	enum:AllowZero
No	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    No,$/;"	e	enum:Untagged
No	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    No,$/;"	e	enum:Identifier
NoChecksum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    NoChecksum,$/;"	e	enum:DecodeError
NoPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    NoPadding,$/;"	e	enum:BlodeModePaddingSpec
NoPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for NoPadding {$/;"	c
NoPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct NoPadding;$/;"	s
NonAsciiCharacter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    NonAsciiCharacter {$/;"	e	enum:DecodeError
Nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl AsRef<[u8; NONCE_LEN]> for Nonce {$/;"	c
Nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^impl Nonce {$/;"	c
Nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^pub struct Nonce([u8; NONCE_LEN]);$/;"	s
Nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^struct Nonce(Block);$/;"	s
None	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        None,$/;"	e	enum:content::Content
None	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        None,$/;"	e	enum:content::Content
None	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    None,$/;"	e	enum:Default
None	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    None,$/;"	e	enum:TagType
None	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    None,$/;"	e	enum:RenameRule
Nonnegative	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl Nonnegative {$/;"	c
Nonnegative	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub struct Nonnegative {$/;"	s
NotMuchSmallerModulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub unsafe trait NotMuchSmallerModulus<L>: SmallerModulus<L> {}$/;"	i
Null	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    Null = 0x05,$/;"	e	enum:Tag
O	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl<'a, O: Options> Options for &'a mut O {$/;"	c
ODDS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static ODDS: &[&[Limb]] = &[$/;"	v	function:tests::test_limbs_are_even
OID	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    OID = 0x06,$/;"	e	enum:Tag
ONE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^static ONE: Elem<Unencoded> = Elem {$/;"	v
OctetString	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    OctetString = 0x04,$/;"	e	enum:Tag
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Ok = ();$/;"	t
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Ok = ();$/;"	t	implementation:Serializer
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Ok = ();$/;"	t	implementation:SizeChecker
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type Ok = ();$/;"	t	implementation:SizeCompound
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Ok,$/;"	e	enum:deserialize::Field
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type Ok = Content;$/;"	t	module:content
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type Ok = M::Ok;$/;"	t	module:content
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type Ok = ();$/;"	t
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type Ok = S::Ok;$/;"	t
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    type Ok = Ok;$/;"	t
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeMap
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeSeq
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStruct
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStructVariant
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTuple
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleStruct
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleVariant
Ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:Serializer
One	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M, E> AsRef<Elem<M, E>> for One<M, E> {$/;"	c
One	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> One<M, RR> {$/;"	c
One	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub struct One<M, E>(Elem<M, E>);$/;"	s
OneOf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl Display for OneOf {$/;"	c
OneOf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^struct OneOf {$/;"	s
Opaque	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^struct Opaque([u8; OPAQUE_LEN]);$/;"	s
Opening	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    Opening { in_prefix_len: usize },$/;"	e	enum:Direction
OpeningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl OpeningKey {$/;"	c
OpeningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub struct OpeningKey {$/;"	s
OpeningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^impl OpeningKey {$/;"	c
OpeningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^pub struct OpeningKey {$/;"	s
Option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Option<T>$/;"	c
Option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Option,$/;"	e	enum:Unexpected
Option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for Option<T>$/;"	c
OptionVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for OptionVisitor<T>$/;"	c
OptionVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct OptionVisitor<T> {$/;"	s
Optional	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Optional,$/;"	e	enum:Unsupported
Options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^pub(crate) trait Options {$/;"	i
OptionsExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^pub(crate) trait OptionsExt: Options + Sized {$/;"	i
OsStr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for OsStr {$/;"	c
OsString	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for OsString {$/;"	c
OsString	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for OsString {$/;"	c
OsStringVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for OsStringVisitor {$/;"	c
OsStringVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct OsStringVisitor;$/;"	s
Other	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Other(&'a str),$/;"	e	enum:Unexpected
Other	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Other,$/;"	e	enum:content::TagContentOtherField
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^    type Output;$/;"	t	interface:DeserializerAcceptor
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^    type Output;$/;"	t	interface:SerializerAcceptor
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = <(RInverse, RR) as ProductEncoding>::Output;$/;"	t	implementation:RInverse
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = <(Unencoded, RR) as ProductEncoding>::Output;$/;"	t	implementation:Unencoded
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = <<E as ReductionEncoding>::Output as ReductionEncoding>::Output;$/;"	t
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = E::Output;$/;"	t	implementation:E
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = E;$/;"	t	implementation:E
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = R;$/;"	t	implementation:RR
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = RInverse;$/;"	t	implementation:Unencoded
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output = Unencoded;$/;"	t	implementation:R
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output: Encoding;$/;"	t	interface:ProductEncoding
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^    type Output: Encoding;$/;"	t	interface:ReductionEncoding
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    type Output = u32x4;$/;"	t	implementation:u32x4
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = Fe;$/;"	t	implementation:Fe
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = GeP1P1;$/;"	t	implementation:GeP3
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    type Output = Gf128;$/;"	t	implementation:Gf128
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u32x4;$/;"	t	implementation:fake::u32x4
Output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u64x2;$/;"	t	implementation:fake::u64x2
OwnedReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedReadBuffer {$/;"	c
OwnedReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl ReadBuffer for OwnedReadBuffer {$/;"	c
OwnedReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedReadBuffer {$/;"	s
OwnedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedWriteBuffer {$/;"	c
OwnedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl WriteBuffer for OwnedWriteBuffer {$/;"	c
OwnedWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedWriteBuffer {$/;"	s
P	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^enum P {}$/;"	g
P	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl Prime for P {}$/;"	c
P	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::NotMuchSmallerModulus<N> for P {}$/;"	c
P	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<N> for P {}$/;"	c
P256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    P256,$/;"	e	enum:CurveID
P384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    P384,$/;"	e	enum:CurveID
P384_GENERATOR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    static P384_GENERATOR: (Elem<R>, Elem<R>) = ($/;"	v	function:p384_point_mul_base_impl
PKCS1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl Encoding for PKCS1 {$/;"	c
PKCS1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl Padding for PKCS1 {$/;"	c
PKCS1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl Verification for PKCS1 {$/;"	c
PKCS1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl crate::sealed::Sealed for PKCS1 {}$/;"	c
PKCS1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^pub struct PKCS1 {$/;"	s
PKCS8_TEMPLATE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^static PKCS8_TEMPLATE: pkcs8::Template = pkcs8::Template {$/;"	v
PRIVATE_KEY_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^pub static PRIVATE_KEY_OPS: PrivateKeyOps = PrivateKeyOps {$/;"	v
PRIVATE_KEY_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^pub static PRIVATE_KEY_OPS: PrivateKeyOps = PrivateKeyOps {$/;"	v
PRIVATE_SCALAR_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^pub static PRIVATE_SCALAR_OPS: PrivateScalarOps = PrivateScalarOps {$/;"	v
PRIVATE_SCALAR_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^pub static PRIVATE_SCALAR_OPS: PrivateScalarOps = PrivateScalarOps {$/;"	v
PSS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl Encoding for PSS {$/;"	c
PSS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl Padding for PSS {$/;"	c
PSS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl Verification for PSS {$/;"	c
PSS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl crate::sealed::Sealed for PSS {}$/;"	c
PSS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^pub struct PSS {$/;"	s
PSSMetrics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^impl PSSMetrics {$/;"	c
PSSMetrics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^struct PSSMetrics {$/;"	s
PUBLIC_KEY_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^pub static PUBLIC_KEY_OPS: PublicKeyOps = PublicKeyOps {$/;"	v
PUBLIC_KEY_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^pub static PUBLIC_KEY_OPS: PublicKeyOps = PublicKeyOps {$/;"	v
PUBLIC_SCALAR_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^pub static PUBLIC_SCALAR_OPS: PublicScalarOps = PublicScalarOps {$/;"	v
PUBLIC_SCALAR_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^pub static PUBLIC_SCALAR_OPS: PublicScalarOps = PublicScalarOps {$/;"	v
Pad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    Pad = 1,$/;"	e	enum:Pad
Pad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^pub enum Pad {$/;"	g
Padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^pub trait Padding: 'static + Sync + crate::sealed::Sealed + core::fmt::Debug {$/;"	i
PaddingProcessor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub trait PaddingProcessor {$/;"	i
Pair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub trait Pair {$/;"	i	module:private
PairDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, A, B, E> de::Deserializer<'de> for PairDeserializer<A, B, E>$/;"	c
PairDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^struct PairDeserializer<A, B, E>(A, B, PhantomData<E>);$/;"	s
PairVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, A, B, E> de::SeqAccess<'de> for PairVisitor<A, B, E>$/;"	c
PairVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^struct PairVisitor<A, B, E>(Option<A>, Option<B>, PhantomData<E>);$/;"	s
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^pub struct Parameters {$/;"	s
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^impl sealed::Sealed for Parameters {}$/;"	c
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^impl signature::VerificationAlgorithm for Parameters {$/;"	c
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^impl Parameters {$/;"	c
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^struct Parameters {$/;"	s
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^impl Parameters {$/;"	c
Parameters	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^struct Parameters {$/;"	s
PartialModulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<'a, M> PartialModulus<'a, M> {$/;"	c
PartialModulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^struct PartialModulus<'a, M> {$/;"	s
PascalCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    PascalCase,$/;"	e	enum:RenameRule
Path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a Path {$/;"	c
Path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for Path {$/;"	c
Path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    Path(syn::ExprPath),$/;"	e	enum:Default
PathBuf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for PathBuf {$/;"	c
PathBuf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for PathBuf {$/;"	c
PathBufVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for PathBufVisitor {$/;"	c
PathBufVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct PathBufVisitor;$/;"	s
PathVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'a> Visitor<'a> for PathVisitor {$/;"	c
PathVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct PathVisitor;$/;"	s
Pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Pbkdf2,$/;"	e	enum:KdfSpec
PhantomData	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for PhantomData<T> {$/;"	c
PhantomData	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'de, T> DeserializeSeed<'de> for PhantomData<T>$/;"	c
PhantomData	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for PhantomData<T> {$/;"	c
PhantomDataVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T: ?Sized> Visitor<'de> for PhantomDataVisitor<T> {$/;"	c
PhantomDataVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct PhantomDataVisitor<T: ?Sized> {$/;"	s
Pkcs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Pkcs,$/;"	e	enum:BlodeModePaddingSpec
PkcsPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for PkcsPadding {$/;"	c
PkcsPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct PkcsPadding;$/;"	s
Point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^impl Point {$/;"	c
Point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub struct Point {$/;"	s
Point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^impl Point {$/;"	c
Point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct Point {$/;"	s
Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^impl Mac for Poly1305 {$/;"	c
Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^impl Poly1305 {$/;"	c
Poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^pub struct Poly1305 {$/;"	s
Pool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^impl Pool {$/;"	c
Pool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^struct Pool {$/;"	s
Positive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^impl<'a> Positive<'a> {$/;"	c
Positive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^pub struct Positive<'a>(untrusted::Input<'a>);$/;"	s
Prefix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^type Prefix = [u8; PREFIX_LEN];$/;"	t
Prime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub unsafe trait Prime {}$/;"	i
PrivateExponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M: Prime> PrivateExponent<M> {$/;"	c
PrivateExponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl<M> PrivateExponent<M> {$/;"	c
PrivateExponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub struct PrivateExponent<M> {$/;"	s
PrivateKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^type PrivateKey = [u8; PRIVATE_KEY_LEN];$/;"	t
PrivateKeyOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^impl PrivateKeyOps {$/;"	c
PrivateKeyOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct PrivateKeyOps {$/;"	s
PrivatePrime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^impl<M: Prime + Clone> PrivatePrime<M> {$/;"	c
PrivatePrime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^struct PrivatePrime<M: Prime> {$/;"	s
PrivateScalarOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct PrivateScalarOps {$/;"	s
ProductEncoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub trait ProductEncoding {$/;"	i
ProofOfWork	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^impl<'a> ProofOfWork<'a> {$/;"	c
ProofOfWork	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^pub struct ProofOfWork<'a> {$/;"	s
PublicExponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^impl PublicExponent {$/;"	c
PublicExponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub struct PublicExponent(u64);$/;"	s
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^impl AsRef<[u8]> for PublicKey {$/;"	c
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^pub struct PublicKey(ec::PublicKey);$/;"	s
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    type PublicKey = PublicKey;$/;"	t	implementation:KeyPair
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^impl AsRef<[u8]> for PublicKey {$/;"	c
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^pub struct PublicKey([u8; PUBLIC_KEY_LEN]);$/;"	s
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^type PublicKey = [u8; PUBLIC_KEY_LEN];$/;"	t
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^impl AsRef<[u8]> for PublicKey {$/;"	c
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^pub struct PublicKey {$/;"	s
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    type PublicKey = PublicKey;$/;"	t	implementation:KeyPair
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^impl AsRef<[u8]> for PublicKey {$/;"	c
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^pub struct PublicKey(ec::PublicKey);$/;"	s
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    type PublicKey = PublicKey;$/;"	t	implementation:KeyPair
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^impl AsRef<[u8]> for PublicKey {$/;"	c
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^impl PublicKey {$/;"	c
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^pub struct PublicKey(Box<[u8]>);$/;"	s
PublicKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^    type PublicKey: AsRef<[u8]> + core::fmt::Debug + Clone + Send + Sized + Sync;$/;"	t	interface:KeyPair
PublicKeyOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^impl PublicKeyOps {$/;"	c
PublicKeyOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct PublicKeyOps {$/;"	s
PublicScalarOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^impl PublicScalarOps {$/;"	c
PublicScalarOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct PublicScalarOps {$/;"	s
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub enum Q {}$/;"	g
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^enum Q {}$/;"	g
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl Prime for Q {}$/;"	c
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::NotMuchSmallerModulus<QQ> for Q {}$/;"	c
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SlightlySmallerModulus<P> for Q {}$/;"	c
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<N> for Q {}$/;"	c
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<P> for Q {}$/;"	c
Q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<QQ> for Q {}$/;"	c
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                struct QQ {}$/;"	s	function:tests::test_elem_reduced_once
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                unsafe impl SlightlySmallerModulus<N> for QQ {}$/;"	c	function:tests::test_elem_reduced_once
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^                unsafe impl SmallerModulus<N> for QQ {}$/;"	c	function:tests::test_elem_reduced_once
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^enum QQ {}$/;"	g
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::NotMuchSmallerModulus<N> for QQ {}$/;"	c
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SlightlySmallerModulus<N> for QQ {}$/;"	c
QQ	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^unsafe impl bigint::SmallerModulus<N> for QQ {}$/;"	c
R	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl Encoding for R {}$/;"	c
R	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl ReductionEncoding for R {$/;"	c
R	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub enum R {}$/;"	g
R	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static R: usize = 10;$/;"	v
RANDOM_PATH	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        static RANDOM_PATH: &str = "\/dev\/urandom";$/;"	v	function:urandom::fill
RANDOM_PATH	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        static RANDOM_PATH: &str = "rand:";$/;"	v	function:urandom::fill
RC	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^static RC: [u64; 11 \/* R + 1 *\/] = [$/;"	v
RCON	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^static RCON: [u32; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];$/;"	v
REMAINING_WINDOWS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    static REMAINING_WINDOWS: [(u8, u8); 26] = [$/;"	v	function:p256_scalar_inv_to_mont
REMAINING_WINDOWS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    static REMAINING_WINDOWS: [(u8, u8); 39] = [$/;"	v	function:p384_scalar_inv_to_mont
RInverse	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl Encoding for RInverse {}$/;"	c
RInverse	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl ProductEncoding for (RR, RInverse) {$/;"	c
RInverse	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub enum RInverse {}$/;"	g
RR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl Encoding for RR {}$/;"	c
RR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl ReductionEncoding for RR {$/;"	c
RR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub enum RR {}$/;"	g
Range	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> RangeExt<T> for Range<T> where$/;"	c
Range	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for Range<Idx>$/;"	c
Range	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<Idx> Serialize for Range<Idx>$/;"	c
RangeExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^pub trait RangeExt<T> {$/;"	i
RangeInclusive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for RangeInclusive<Idx>$/;"	c
RangeInclusive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<Idx> Serialize for RangeInclusive<Idx>$/;"	c
RangeVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    impl<'de, Idx> Visitor<'de> for RangeVisitor<Idx>$/;"	c	module:range
RangeVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    pub struct RangeVisitor<Idx> {$/;"	s	module:range
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Rc4,$/;"	e	enum:SymmetricCipherSpec
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Decryptor for Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Encryptor for Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl SynchronousStreamCipher for Rc4 {$/;"	c
Rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^pub struct Rc4 {$/;"	s
RcWeak	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for RcWeak<T>$/;"	c
RcWeak	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for RcWeak<T>$/;"	c
ReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub trait ReadBuffer {$/;"	i
Reader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^impl<'a> Reader<'a> {$/;"	c
Reader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub struct Reader<'a> {$/;"	s
ReductionEncoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub trait ReductionEncoding {$/;"	i
RefCell	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for RefCell<T>$/;"	c
RefReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> ReadBuffer for RefReadBuffer<'a> {$/;"	c
RefReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefReadBuffer<'a> {$/;"	c
RefReadBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefReadBuffer<'a> {$/;"	s
RefWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefWriteBuffer<'a> {$/;"	c
RefWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for RefWriteBuffer<'a> {$/;"	c
RefWriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefWriteBuffer<'a> {$/;"	s
RenameAllRules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub struct RenameAllRules {$/;"	s
RenameRule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^impl FromStr for RenameRule {$/;"	c
RenameRule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^impl RenameRule {$/;"	c
RenameRule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^pub enum RenameRule {$/;"	g
Result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^pub type Result<T> = ::std::result::Result<T, Error>;$/;"	t
Result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^impl From<ZeroMeansSuccess> for Result<(), error::Unspecified> {$/;"	c
Result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^impl From<Result> for core::result::Result<(), error::Unspecified> {$/;"	c
Result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^pub struct Result(libc::c_int);$/;"	s
Result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T, E> Deserialize<'de> for Result<T, E>$/;"	c
Result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T, E> Serialize for Result<T, E>$/;"	c
ResultVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de, T, E> Visitor<'de> for ResultVisitor<T, E>$/;"	c	function:deserialize
ResultVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        struct ResultVisitor<T, E>(PhantomData<Result<T, E>>);$/;"	s	function:deserialize
Reverse	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for Reverse<T>$/;"	c
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Ripemd160,$/;"	e	enum:DigestSpec
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Digest for Ripemd160 {$/;"	c
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Ripemd160 {$/;"	c
Ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^pub struct Ripemd160 {$/;"	s
RoundSetupInfo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^type RoundSetupInfo = (u8, fn(&[u8], KeyType, &mut [u8]));$/;"	t
RwLock	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for RwLock<T>$/;"	c
S12	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S12:u32x4 = u32x4(12, 12, 12, 12);$/;"	v
S16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S16:u32x4 = u32x4(16, 16, 16, 16);$/;"	v
S32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S32:u32x4 = u32x4(32, 32, 32, 32);$/;"	v
S7	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S7:u32x4 = u32x4(7, 7, 7, 7);$/;"	v
S8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^static S8:u32x4 = u32x4(8, 8, 8, 8);$/;"	v
SCALAR_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^pub static SCALAR_OPS: ScalarOps = ScalarOps {$/;"	v
SCALAR_OPS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^pub static SCALAR_OPS: ScalarOps = ScalarOps {$/;"	v
SHA1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    SHA1,$/;"	e	enum:AlgorithmID
SHA1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub static SHA1: Algorithm = Algorithm {$/;"	v
SHA256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    SHA256,$/;"	e	enum:AlgorithmID
SHA256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub static SHA256: Algorithm = Algorithm {$/;"	v
SHA384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    SHA384,$/;"	e	enum:AlgorithmID
SHA384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub static SHA384: Algorithm = Algorithm {$/;"	v
SHA512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    SHA512,$/;"	e	enum:AlgorithmID
SHA512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub static SHA512: Algorithm = Algorithm {$/;"	v
SHA512_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    SHA512_256,$/;"	e	enum:AlgorithmID
SHA512_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub static SHA512_256: Algorithm = Algorithm {$/;"	v
SIGMA	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^static SIGMA : [[usize; 16]; 12] = [$/;"	v
SIGMA	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^static SIGMA : [[usize; 16]; 10] = [$/;"	v
SUPPORTED_SUITE_B_ALGS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^    static SUPPORTED_SUITE_B_ALGS: [($/;"	v	module:tests
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Salsa20,$/;"	e	enum:SymmetricCipherSpec
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Decryptor for Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Encryptor for Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl SynchronousStreamCipher for Salsa20 {$/;"	c
Salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^pub struct Salsa20 {$/;"	s
SalsaState	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^struct SalsaState {$/;"	s
Scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub type Scalar = [u8; SCALAR_LEN];$/;"	t
Scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub type Scalar<E = Unencoded> = elem::Elem<N, E>;$/;"	t
ScalarOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^impl ScalarOps {$/;"	c
ScalarOps	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub struct ScalarOps {$/;"	s
ScreamingKebabCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    ScreamingKebabCase,$/;"	e	enum:RenameRule
ScreamingSnakeCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    ScreamingSnakeCase,$/;"	e	enum:RenameRule
Scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Scrypt,$/;"	e	enum:KdfSpec
ScryptParams	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^impl ScryptParams {$/;"	c
ScryptParams	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub struct ScryptParams {$/;"	s
Sealed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^    pub trait Sealed {}$/;"	i	module:sealed
Sealing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    Sealing,$/;"	e	enum:Direction
SealingKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^impl SealingKey {$/;"	c
SealingKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub struct SealingKey {$/;"	s
SealingKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^impl SealingKey {$/;"	c
SealingKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^pub struct SealingKey {$/;"	s
SecRandomCopyBytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        fn SecRandomCopyBytes($/;"	f	module:darwin
SecRandomRef	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        static kSecRandomDefault: &'static SecRandomRef;$/;"	v	module:darwin
SecRandomRef	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    struct SecRandomRef([u8; 0]);$/;"	s	module:darwin
Second	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        type Second = B;$/;"	t	implementation:private::B
Second	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        type Second;$/;"	t	interface:private::Pair
Second	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub type Second<T> = <T as Pair>::Second;$/;"	t	module:private
Secs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Secs,$/;"	e	enum:Duration::deserialize::Field
Secs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Secs,$/;"	e	enum:SystemTime::deserialize::Field
SecureRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^pub trait SecureRandom: sealed::Sealed {$/;"	i
Seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^type Seed = [u8; SEED_LEN];$/;"	t
Seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^impl Seed {$/;"	c
Seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^pub struct Seed {$/;"	s
Seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Seq,$/;"	e	enum:Unexpected
Seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Seq(Vec<Content<'de>>),$/;"	e	enum:content::Content
Seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Seq(Vec<Content>),$/;"	e	enum:content::Content
SeqAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait SeqAccess<'de> {$/;"	i
SeqAccessDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for SeqAccessDeserializer<A>$/;"	c
SeqAccessDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<A> SeqAccessDeserializer<A> {$/;"	c
SeqAccessDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct SeqAccessDeserializer<A> {$/;"	s
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, T, E> de::Deserializer<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, I, T, E> de::SeqAccess<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<I, E> SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct SeqDeserializer<I, E> {$/;"	s
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::SeqAccess<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct SeqDeserializer<'de, E>$/;"	s	module:content
SeqRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a, 'de, E> SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::SeqAccess<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct SeqRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Sequence	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    Sequence = CONSTRUCTED | 0x10, \/\/ 0x30$/;"	e	enum:Tag
Sequence	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Sequence,$/;"	e	enum:Unsupported
SequenceMustHaveLength	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    SequenceMustHaveLength,$/;"	e	enum:ErrorKind
SerAndDe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^type SerAndDe<T> = (Option<T>, Option<T>);$/;"	t
Serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for ! {$/;"	c
Serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for () {$/;"	c
Serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait Serialize {$/;"	i
Serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^    Serialize,$/;"	e	enum:Derive
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeMap = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeMap = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeMap = SerializeMap<E>;$/;"	t	module:content
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeMap for SerializeMap<E>$/;"	c	module:content
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeMap<E> {$/;"	s	module:content
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeMap = FlatMapSerializeMap<'a, M>;$/;"	t
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeMap = S::SerializeMap;$/;"	t
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeMap {$/;"	i
SerializeMap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    SerializeMap,$/;"	e	enum:StructTrait
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeSeq = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeSeq = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeSeq = SerializeSeq<E>;$/;"	t	module:content
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeSeq for SerializeSeq<E>$/;"	c	module:content
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeSeq<E> {$/;"	s	module:content
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeSeq = Impossible<S::Ok, S::Error>;$/;"	t
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeSeq = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeSeq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeSeq {$/;"	i
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeStruct = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeStruct = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeStruct = SerializeStruct<E>;$/;"	t	module:content
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeStruct for SerializeStruct<E>$/;"	c	module:content
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeStruct<E> {$/;"	s	module:content
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeStruct = FlatMapSerializeStruct<'a, M>;$/;"	t
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeStruct = S::SerializeStruct;$/;"	t
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeStruct {$/;"	i
SerializeStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    SerializeStruct,$/;"	e	enum:StructTrait
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeStructVariant = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeStructVariant = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeStructVariant = SerializeStructVariant<E>;$/;"	t	module:content
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeStructVariant for SerializeStructVariant<E>$/;"	c	module:content
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeStructVariant<E> {$/;"	s	module:content
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeStructVariant = FlatMapSerializeStructVariantAsMapValue<'a, M>;$/;"	t
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeStructVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeStructVariant = SerializeStructVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeStructVariant: SerializeStructVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeStructVariant {$/;"	i
SerializeStructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    SerializeStructVariant,$/;"	e	enum:StructTrait
SerializeStructVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<M> SerializeStructVariantAsMapValue<M> {$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<M> ser::SerializeStructVariant for SerializeStructVariantAsMapValue<M>$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeStructVariantAsMapValue<M> {$/;"	s	module:content
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeTuple = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeTuple = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeTuple = SerializeTuple<E>;$/;"	t	module:content
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeTuple for SerializeTuple<E>$/;"	c	module:content
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeTuple<E> {$/;"	s	module:content
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTuple = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTuple = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeTuple {$/;"	i
SerializeTuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    SerializeTuple,$/;"	e	enum:TupleTrait
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeTupleStruct = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeTupleStruct = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeTupleStruct = SerializeTupleStruct<E>;$/;"	t	module:content
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeTupleStruct for SerializeTupleStruct<E>$/;"	c	module:content
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeTupleStruct<E> {$/;"	s	module:content
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeTupleStruct {$/;"	i
SerializeTupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    SerializeTupleStruct,$/;"	e	enum:TupleTrait
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeTupleVariant = Compound<'a, W, O>;$/;"	t	implementation:Serializer
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    type SerializeTupleVariant = SizeCompound<'a, O>;$/;"	t	implementation:SizeChecker
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        type SerializeTupleVariant = SerializeTupleVariant<E>;$/;"	t	module:content
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<E> ser::SerializeTupleVariant for SerializeTupleVariant<E>$/;"	c	module:content
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeTupleVariant<E> {$/;"	s	module:content
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type SerializeTupleVariant = SerializeTupleVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    type SerializeTupleVariant: SerializeTupleVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait SerializeTupleVariant {$/;"	i
SerializeTupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    SerializeTupleVariant,$/;"	e	enum:TupleTrait
SerializeTupleVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<M> SerializeTupleVariantAsMapValue<M> {$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    impl<M> ser::SerializeTupleVariant for SerializeTupleVariantAsMapValue<M>$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    pub struct SerializeTupleVariantAsMapValue<M> {$/;"	s	module:content
Serializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, W: Write, O: Options> serde::Serializer for &'a mut Serializer<W, O> {$/;"	c
Serializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<W: Write, O: Options> Serializer<W, O> {$/;"	c
Serializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^pub(crate) struct Serializer<W, O: Options> {$/;"	s
Serializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^pub trait Serializer: Sized {$/;"	i
SerializerAcceptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub trait SerializerAcceptor {$/;"	i
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha1,$/;"	e	enum:DigestSpec
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^impl Digest for Sha1 {$/;"	c
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^impl Sha1 {$/;"	c
Sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub struct Sha1 {$/;"	s
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha224,$/;"	e	enum:DigestSpec
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha224 {$/;"	c
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha224 {$/;"	c
Sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha224 {$/;"	s
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha256,$/;"	e	enum:DigestSpec
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha256 {$/;"	c
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha256 {$/;"	c
Sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha256 {$/;"	s
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Clone for Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Copy for Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Digest for Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3 {$/;"	c
Sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^pub struct Sha3 {$/;"	s
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha384,$/;"	e	enum:DigestSpec
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha384 {$/;"	c
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha384 {$/;"	c
Sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha384 {$/;"	s
Sha3Mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3Mode {$/;"	c
Sha3Mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^pub enum Sha3Mode {$/;"	g
Sha3_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_224,$/;"	e	enum:Sha3Mode
Sha3_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_256,$/;"	e	enum:Sha3Mode
Sha3_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_384,$/;"	e	enum:Sha3Mode
Sha3_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Sha3_512,$/;"	e	enum:Sha3Mode
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sha512,$/;"	e	enum:DigestSpec
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512 {$/;"	c
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512 {$/;"	c
Sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512 {$/;"	s
Sha512Trunc224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc224 {$/;"	c
Sha512Trunc224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc224 {$/;"	c
Sha512Trunc224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc224 {$/;"	s
Sha512Trunc256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc256 {$/;"	c
Sha512Trunc256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc256 {$/;"	c
Sha512Trunc256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc256 {$/;"	s
Shake128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Shake128,$/;"	e	enum:Sha3Mode
Shake256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    Shake256,$/;"	e	enum:Sha3Mode
SharedSecret	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^type SharedSecret = [u8; SHARED_SECRET_LEN];$/;"	t
Signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl AsRef<[u8]> for Signature {$/;"	c
Signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub struct Signature(digest::Digest);$/;"	s
Signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^impl AsRef<[u8]> for Signature {$/;"	c
Signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^impl Signature {$/;"	c
Signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^pub struct Signature {$/;"	s
Signed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Signed(i64),$/;"	e	enum:Unexpected
SigningContext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl SigningContext {$/;"	c
SigningContext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl core::fmt::Debug for SigningContext {$/;"	c
SigningContext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub struct SigningContext {$/;"	s
SigningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl SigningKey {$/;"	c
SigningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl core::fmt::Debug for SigningKey {$/;"	c
SigningKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub struct SigningKey {$/;"	s
SimdExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^pub trait SimdExt {$/;"	i
SizeChecker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::Serializer for &'a mut SizeChecker<O> {$/;"	c
SizeChecker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<O: Options> SizeChecker<O> {$/;"	c
SizeChecker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^pub(crate) struct SizeChecker<O: Options> {$/;"	s
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options + 'a> serde::ser::SerializeMap for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::ser::SerializeSeq for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::ser::SerializeStruct for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::ser::SerializeStructVariant for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::ser::SerializeTuple for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::ser::SerializeTupleStruct for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^impl<'a, O: Options> serde::ser::SerializeTupleVariant for SizeCompound<'a, O> {$/;"	c
SizeCompound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^pub(crate) struct SizeCompound<'a, S: Options + 'a> {$/;"	s
SizeLimit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    SizeLimit,$/;"	e	enum:ErrorKind
SizeLimit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) trait SizeLimit: Clone {$/;"	i
Slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    impl<'a> Slice<'a> {$/;"	c	module:no_panic
Slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub struct Slice<'a> {$/;"	s	module:no_panic
SliceReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<'storage> BincodeRead<'storage> for SliceReader<'storage> {$/;"	c
SliceReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<'storage> SliceReader<'storage> {$/;"	c
SliceReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^impl<'storage> io::Read for SliceReader<'storage> {$/;"	c
SliceReader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^pub struct SliceReader<'storage> {$/;"	s
SlightlySmallerModulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub unsafe trait SlightlySmallerModulus<L>: SmallerModulus<L> {}$/;"	i
SmallerModulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub unsafe trait SmallerModulus<L> {}$/;"	i
SnakeCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    SnakeCase,$/;"	e	enum:RenameRule
SocketAddr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::SocketAddr {$/;"	c
SocketAddr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for net::SocketAddr {$/;"	c
SocketAddrV4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV4 {$/;"	c
SocketAddrV6	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV6 {$/;"	c
SocketAddrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            impl<'de> Visitor<'de> for SocketAddrVisitor {$/;"	c	method:SocketAddr::deserialize
SocketAddrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            struct SocketAddrVisitor;$/;"	s	method:SocketAddr::deserialize
Some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Some(Box<Content<'de>>),$/;"	e	enum:content::Content
Some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Some(Box<Content>),$/;"	e	enum:content::Content
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Sosemanuk,$/;"	e	enum:SymmetricCipherSpec
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Decryptor for Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Encryptor for Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl SynchronousStreamCipher for Sosemanuk {$/;"	c
Sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^pub struct Sosemanuk {$/;"	s
StandardPadding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait StandardPadding {$/;"	i
Start	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        Start,$/;"	e	enum:range::Field
Static	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    Static,$/;"	e	enum:BorrowedLifetimes
StepUp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> Iterator for StepUp<T> where$/;"	c
StepUp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^pub struct StepUp<T> {$/;"	s
Stmts	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^impl ToTokens for Stmts {$/;"	c
Stmts	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^pub struct Stmts(pub Fragment);$/;"	s
Str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Str(&'a str),$/;"	e	enum:Unexpected
Str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Str(&'de str),$/;"	e	enum:content::Content
StrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'a> Visitor<'a> for StrVisitor {$/;"	c
StrVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct StrVisitor;$/;"	s
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for String {$/;"	c
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for String$/;"	c
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    String,$/;"	e	enum:Unsupported
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for String {$/;"	c
String	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    String(String),$/;"	e	enum:Value
StringDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<E> Clone for StringDeserializer<E> {$/;"	c
StringDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct StringDeserializer<E> {$/;"	s
StringInPlaceVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'a, 'de> Visitor<'de> for StringInPlaceVisitor<'a> {$/;"	c
StringInPlaceVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct StringInPlaceVisitor<'a>(&'a mut String);$/;"	s
StringVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for StringVisitor {$/;"	c
StringVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct StringVisitor;$/;"	s
Struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Struct(&'static str, Vec<(&'static str, Content)>),$/;"	e	enum:content::Content
Struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    Struct(Style, Vec<Field<'a>>),$/;"	e	enum:Data
Struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    Struct,$/;"	e	enum:Style
StructTrait	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^enum StructTrait {$/;"	g
StructTrait	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^impl StructTrait {$/;"	c
StructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    StructVariant,$/;"	e	enum:Unexpected
StructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        StructVariant($/;"	e	enum:content::Content
StructVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^enum StructVariant<'a> {$/;"	g
Style	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^pub enum Style {$/;"	g
SymmetricCipherError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub enum SymmetricCipherError {$/;"	g
SymmetricCipherSpec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^enum SymmetricCipherSpec {$/;"	g
SynchronousStreamCipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait SynchronousStreamCipher {$/;"	i
Sysrand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        Sysrand,$/;"	e	enum:sysrand_or_urandom::Mechanism
SystemRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^impl SecureRandom for SystemRandom {$/;"	c
SystemRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^impl SystemRandom {$/;"	c
SystemRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^impl sealed::Sealed for SystemRandom {}$/;"	c
SystemRandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^pub struct SystemRandom;$/;"	s
SystemTime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for SystemTime {$/;"	c
SystemTime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for SystemTime {$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl<T: Options> OptionsExt for T {}$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^impl Encoding for T {}$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub struct T;$/;"	s
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T: FixedBuffer> StandardPadding for T {$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T> WriteExt for T where T: io::Write {$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for [T; 0] {$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'de, T> Expected for T$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<T> DeserializeOwned for T where T: for<'de> Deserialize<'de> {}$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for [T; 0] {$/;"	c
T	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for [T]$/;"	c
TESTS	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	v	module:test
TXInput	/home/lieroz/blockchain_rust/src/transaction.rs	/^impl TXInput {$/;"	c
TXInput	/home/lieroz/blockchain_rust/src/transaction.rs	/^pub struct TXInput {$/;"	s
TXOutput	/home/lieroz/blockchain_rust/src/transaction.rs	/^impl TXOutput {$/;"	c
TXOutput	/home/lieroz/blockchain_rust/src/transaction.rs	/^pub struct TXOutput {$/;"	s
Tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^struct Tag(Block);$/;"	s
Tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub enum Tag {$/;"	g
Tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagContentOtherField
Tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContent
Tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContentField
TagContentOtherField	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub enum TagContentOtherField {$/;"	g	module:content
TagContentOtherFieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct TagContentOtherFieldVisitor {$/;"	s	module:content
TagOrContent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub enum TagOrContent<'de> {$/;"	g	module:content
TagOrContentField	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub enum TagOrContentField {$/;"	g	module:content
TagOrContentFieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct TagOrContentFieldVisitor {$/;"	s	module:content
TagOrContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct TagOrContentVisitor<'de> {$/;"	s	module:content
TagType	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub enum TagType {$/;"	g
TaggedContent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct TaggedContent<'de, T> {$/;"	s	module:content
TaggedContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, T> DeserializeSeed<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, T> TaggedContentVisitor<'de, T> {$/;"	c	module:content
TaggedContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, T> Visitor<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct TaggedContentVisitor<'de, T> {$/;"	s	module:content
TaggedSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<S> Serializer for TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl<S> TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^struct TaggedSerializer<S> {$/;"	s
Target	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    type Target = [Limb];$/;"	t	implementation:BoxedLimbs
Template	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^impl Template {$/;"	c
Template	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^pub(crate) struct Template {$/;"	s
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test {$/;"	s	function:test::test_bcrypt_hash
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test{$/;"	s	function:test::test_openbsd_vectors
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    struct Test {$/;"	s	module:digest_tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    struct Test {$/;"	s	module:digest_tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    struct Test {$/;"	s	module:test
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    struct Test {$/;"	s	module:tests
Test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    struct Test {$/;"	s	module:tests
TestCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^impl TestCase {$/;"	c
TestCase	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub struct TestCase {$/;"	s
TestData	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    struct TestData {$/;"	s	module:test
TestPoint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    enum TestPoint {$/;"	g	module:tests
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    struct TestVector {$/;"	s	module:test
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s	function:test::test_chacha20_256_tls_vectors
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s	function:test::test_chacha20_256_tls_vectors_96_nonce
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  struct TestVector {$/;"	s	module:test
TestVector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    struct TestVector<D: Digest>{$/;"	s	module:test
ToBase58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^pub trait ToBase58 {$/;"	i
Transaction	/home/lieroz/blockchain_rust/src/transaction.rs	/^impl ToString for Transaction {$/;"	c
Transaction	/home/lieroz/blockchain_rust/src/transaction.rs	/^impl Transaction {$/;"	c
Transaction	/home/lieroz/blockchain_rust/src/transaction.rs	/^pub struct Transaction {$/;"	s
True	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    True = 0xffff_ffff,$/;"	e	enum:LimbMask
True	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    True = 0xffff_ffff_ffff_ffff,$/;"	e	enum:LimbMask
TryFromSliceError	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^pub struct TryFromSliceError(());$/;"	s
TryFrom_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^pub trait TryFrom_<T>: Sized {$/;"	i
TryInto_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^pub trait TryInto_<T>$/;"	i
Tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Tuple(Vec<Content>),$/;"	e	enum:content::Content
Tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Tuple,$/;"	e	enum:Unsupported
Tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    Tuple,$/;"	e	enum:Style
TupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        TupleStruct(&'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    TupleStruct,$/;"	e	enum:Unsupported
TupleTrait	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^enum TupleTrait {$/;"	g
TupleTrait	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^impl TupleTrait {$/;"	c
TupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    TupleVariant,$/;"	e	enum:Unexpected
TupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        TupleVariant(&'static str, u32, &'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^enum TupleVariant {$/;"	g
U16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        U16(u16),$/;"	e	enum:content::Content
U16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        U16(u16),$/;"	e	enum:content::Content
U32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct U32Deserializer<E> {$/;"	s
U64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        U64(u64),$/;"	e	enum:content::Content
U64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        U64(u64),$/;"	e	enum:content::Content
U8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        U8(u8),$/;"	e	enum:content::Content
U8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        U8(u8),$/;"	e	enum:content::Content
UNEQUAL	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^        static UNEQUAL: &[(&[Limb], Limb)] = &[$/;"	v	function:tests::test_limbs_equal_limb
UPPERCASE	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    UPPERCASE,$/;"	e	enum:RenameRule
UTCTime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    UTCTime = 0x17,$/;"	e	enum:Tag
UTF8_CHAR_WIDTH	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^static UTF8_CHAR_WIDTH: [u8; 256] = [$/;"	v
Unbounded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            Unbounded,$/;"	e	enum:deserialize::Field
Underlying	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^            type Underlying = libc::c_int;$/;"	t	function:tests::result::size_and_alignment
Unencoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl Encoding for Unencoded {}$/;"	c
Unencoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl ProductEncoding for (RR, Unencoded) {$/;"	c
Unencoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^impl ReductionEncoding for Unencoded {$/;"	c
Unencoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic/montgomery.rs	/^pub enum Unencoded {}$/;"	g
Unexpected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'a> fmt::Display for Unexpected<'a> {$/;"	c
Unexpected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub enum Unexpected<'a> {$/;"	g
Unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Unit,$/;"	e	enum:Unexpected
Unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    Unit,$/;"	e	enum:Unsupported
Unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    Unit,$/;"	e	enum:Style
UnitDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for UnitDeserializer<E>$/;"	c
UnitDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^pub struct UnitDeserializer<E> {$/;"	s
UnitOnly	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    impl<'de, E> de::VariantAccess<'de> for UnitOnly<E>$/;"	c	module:private
UnitOnly	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub struct UnitOnly<E> {$/;"	s	module:private
UnitStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        UnitStruct(&'static str),$/;"	e	enum:content::Content
UnitStruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    UnitStruct,$/;"	e	enum:Unsupported
UnitVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    UnitVariant,$/;"	e	enum:Unexpected
UnitVariant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        UnitVariant(&'static str, u32, &'static str),$/;"	e	enum:content::Content
UnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Visitor<'de> for UnitVisitor {$/;"	c
UnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^struct UnitVisitor;$/;"	s
Unlimited	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    Unlimited,$/;"	e	enum:LimitOption
UnreducedScalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^pub type UnreducedScalar = [u8; UNREDUCED_SCALAR_LEN];$/;"	t
Unsigned	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    Unsigned(u64),$/;"	e	enum:Unexpected
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl From<KeyRejected> for Unspecified {$/;"	c
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl From<TryFromSliceError> for Unspecified {$/;"	c
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl From<untrusted::EndOfInput> for Unspecified {$/;"	c
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl Unspecified {$/;"	c
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl core::fmt::Display for Unspecified {$/;"	c
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^impl std::error::Error for Unspecified {$/;"	c
Unspecified	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^pub struct Unspecified;$/;"	s
Unsupported	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^enum Unsupported {$/;"	g
Unsupported	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^impl Display for Unsupported {$/;"	c
Untagged	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^enum Untagged {$/;"	g
Untagged	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    Untagged,$/;"	e	enum:StructVariant
Untagged	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    Untagged,$/;"	e	enum:TupleVariant
UntaggedUnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'a> UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct UntaggedUnitVisitor<'a> {$/;"	s	module:content
V1Only	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    V1Only,$/;"	e	enum:Version
V1OrV2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    V1OrV2,$/;"	e	enum:Version
V2Only	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    V2Only,$/;"	e	enum:Version
VPAES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    VPAES = 2,$/;"	e	enum:Implementation
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    type Value = IgnoredAny;$/;"	t	implementation:IgnoredAny
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:deserialize::Field::deserialize::FieldVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                type Value = Field;$/;"	t	implementation:range::Field::deserialize::FieldVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                type Value = net::IpAddr;$/;"	t	implementation:IpAddr::deserialize::IpAddrVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                type Value = net::SocketAddr;$/;"	t	implementation:SocketAddr::deserialize::SocketAddrVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            type Value = ();$/;"	t	function:deserialize_in_place
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            type Value = Bound<T>;$/;"	t	function:deserialize
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:Duration::deserialize::DurationVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:SystemTime::deserialize::DurationVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            type Value = Result<T, E>;$/;"	t	function:deserialize
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            type Value = Vec<T>;$/;"	t	function:deserialize
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        type Value = (Idx, Idx);$/;"	t	module:range
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = &'a Path;$/;"	t	implementation:PathVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = &'a [u8];$/;"	t	implementation:BytesVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = &'a str;$/;"	t	implementation:StrVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:StringInPlaceVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:UnitVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = CString;$/;"	t	implementation:CStringVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = Option<T>;$/;"	t
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = OsString;$/;"	t	implementation:OsStringVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = PathBuf;$/;"	t	implementation:PathBufVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = PhantomData<T>;$/;"	t	implementation:PhantomDataVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = String;$/;"	t	implementation:StringVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = [T; 0];$/;"	t	implementation:ArrayVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = bool;$/;"	t	implementation:BoolVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    type Value = char;$/;"	t	implementation:CharVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Value = T;$/;"	t
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Value;$/;"	t	interface:DeserializeSeed
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Value;$/;"	t	interface:Visitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::InternallyTaggedUnitVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::UntaggedUnitVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = Content<'de>;$/;"	t	implementation:content::ContentVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = Cow<'a, [u8]>;$/;"	t	implementation:borrow_cow_bytes::CowBytesVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = Cow<'a, str>;$/;"	t	implementation:borrow_cow_str::CowStrVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = TagContentOtherField;$/;"	t	implementation:content::TagContentOtherFieldVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = TagOrContent<'de>;$/;"	t	implementation:content::TagOrContentVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = TagOrContentField;$/;"	t	implementation:content::TagOrContentFieldVisitor
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Value = TaggedContent<'de, T>;$/;"	t	module:content
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    type Value = ();$/;"	t
Value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^pub enum Value {$/;"	g
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            type Variant = Self;$/;"	t	function:deserialize_enum
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^pub enum Variant {$/;"	g
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    type Variant: VariantAccess<'de, Error = Self::Error>;$/;"	t	interface:EnumAccess
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    type Variant = private::UnitOnly<E>;$/;"	t
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Variant = VariantDeserializer<'de, Self::Error>;$/;"	t	module:content
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type Variant = VariantRefDeserializer<'a, 'de, Self::Error>;$/;"	t	module:content
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^pub struct Variant<'a> {$/;"	s
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    Variant,$/;"	e	enum:Identifier
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl Variant {$/;"	c
Variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub struct Variant {$/;"	s
VariantAccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait VariantAccess<'de>: Sized {$/;"	i
VariantDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, E> de::VariantAccess<'de> for VariantDeserializer<'de, E>$/;"	c	module:content
VariantDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub struct VariantDeserializer<'de, E>$/;"	s	module:content
VariantRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    impl<'de, 'a, E> de::VariantAccess<'de> for VariantRefDeserializer<'a, 'de, E>$/;"	c	module:content
VariantRefDeserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    struct VariantRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Vec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Vec<T>$/;"	c
Vec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for Vec<T>$/;"	c
VecAttr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^impl<'c, T> VecAttr<'c, T> {$/;"	c
VecAttr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^struct VecAttr<'c, T> {$/;"	s
VecInPlaceVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'a, 'de, T> Visitor<'de> for VecInPlaceVisitor<'a, T>$/;"	c	function:deserialize_in_place
VecInPlaceVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        struct VecInPlaceVisitor<'a, T: 'a>(&'a mut Vec<T>);$/;"	s	function:deserialize_in_place
VecVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for VecVisitor<T>$/;"	c	function:deserialize
VecVisitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        struct VecVisitor<T> {$/;"	s	function:deserialize
Verification	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^pub trait Verification: Padding {$/;"	i
VerificationAlgorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^pub trait VerificationAlgorithm: core::fmt::Debug + Sync + sealed::Sealed {$/;"	i
VerificationKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl VerificationKey {$/;"	c
VerificationKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^impl core::fmt::Debug for VerificationKey {$/;"	c
VerificationKey	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub struct VerificationKey {$/;"	s
Version	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^pub(crate) enum Version {$/;"	g
Visitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub trait Visitor<'de>: Sized {$/;"	i
Void	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^enum Void {}$/;"	g
W32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest/sha1.rs	/^type W32 = Wrapping<u32>;$/;"	t
Wallet	/home/lieroz/blockchain_rust/src/wallet.rs	/^impl Wallet {$/;"	c
Wallet	/home/lieroz/blockchain_rust/src/wallet.rs	/^pub struct Wallet {$/;"	s
Wallets	/home/lieroz/blockchain_rust/src/wallets.rs	/^impl Wallets {$/;"	c
Wallets	/home/lieroz/blockchain_rust/src/wallets.rs	/^pub struct Wallets {$/;"	s
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    Whirlpool,$/;"	e	enum:DigestSpec
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Digest for Whirlpool {$/;"	c
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Whirlpool {$/;"	c
Whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^pub struct Whirlpool {$/;"	s
Width	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^struct Width<M> {$/;"	s
Window	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub type Window = Limb;$/;"	t
WithOtherEndian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl<O: Options, E: ByteOrder + 'static> Options for WithOtherEndian<O, E> {$/;"	c
WithOtherEndian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl<O: Options, E: ByteOrder> WithOtherEndian<O, E> {$/;"	c
WithOtherEndian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^pub(crate) struct WithOtherEndian<O: Options, E: ByteOrder> {$/;"	s
WithOtherLimit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl<O: Options, L: SizeLimit + 'static> Options for WithOtherLimit<O, L> {$/;"	c
WithOtherLimit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^impl<O: Options, L: SizeLimit> WithOtherLimit<O, L> {$/;"	c
WithOtherLimit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^pub(crate) struct WithOtherLimit<O: Options, L: SizeLimit> {$/;"	s
Wrapping	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Wrapping<T>$/;"	c
Wrapping	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl<T> Serialize for Wrapping<T>$/;"	c
WriteBuffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^pub trait WriteBuffer {$/;"	i
WriteExt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait WriteExt {$/;"	i
Writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^impl Accumulator for Writer {$/;"	c
Writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^impl Into<Box<[u8]>> for Writer {$/;"	c
Writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^impl Writer {$/;"	c
Writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^pub(super) struct Writer {$/;"	s
X25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^pub static X25519: agreement::Algorithm = agreement::Algorithm {$/;"	v
XSalsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/api.rs	/^    XSalsa20,$/;"	e	enum:SymmetricCipherSpec
Xi	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    Xi: Block,$/;"	m	struct:GCM128_CONTEXT
Yes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    Yes,$/;"	e	enum:AllowZero
Yes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    Yes,$/;"	e	enum:Untagged
ZEROES	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    static ZEROES: &[&[Limb]] = &[$/;"	v	module:tests
ZERO_INTEGER	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    static ZERO_INTEGER: &'static [u8] = &[0x02, 0x01, 0x00];$/;"	v	module:tests
ZeroMeansSuccess	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^pub struct ZeroMeansSuccess(libc::c_int);$/;"	s
__NonExhaustive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    __NonExhaustive,$/;"	e	enum:DecodeError
__private_deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/macros.rs	/^macro_rules! __private_deserialize {$/;"	M
__private_serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/macros.rs	/^macro_rules! __private_serialize {$/;"	M
__private_visit_untagged_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn __private_visit_untagged_option<D>(self, deserializer: D) -> Result<Self::Value, ()>$/;"	f
__private_visit_untagged_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn __private_visit_untagged_option<D>(self, _: D) -> Result<Self::Value, ()>$/;"	P	interface:Visitor
__serialize_unimplemented	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/macros.rs	/^macro_rules! __serialize_unimplemented {$/;"	M
__serialize_unimplemented_helper	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/macros.rs	/^macro_rules! __serialize_unimplemented_helper {$/;"	M
__serialize_unimplemented_method	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/macros.rs	/^macro_rules! __serialize_unimplemented_method {$/;"	M
_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    _endian: PhantomData<E>,$/;"	m	struct:WithOtherEndian
_marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatInternallyTaggedAccess
_marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatMapAccess
_marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatStructAccess
_options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    _options: O,$/;"	m	struct:WithOtherLimit
_options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    _options: O,$/;"	m	struct:Serializer
a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub a: Elem<R>, \/\/ Must be -3 mod q$/;"	m	struct:CommonOps
a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  a: u32x4,$/;"	m	struct:ChaChaState
a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  a: u32x4,$/;"	m	struct:SalsaState
a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'a> Display for Expected + 'a {$/;"	c
a_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    a_len: usize,$/;"	m	struct:Ghash
a_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    a_len: usize,$/;"	m	struct:GhashWithC
aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                aad: Vec<u8>,$/;"	m	struct:test::TestVector
aad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    aad: Vec<u8>,$/;"	m	struct:test::TestVector
accept	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^    fn accept<T: serde::Deserializer<'a>>(self, T) -> Self::Output;$/;"	P	interface:DeserializerAcceptor
accept	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^    fn accept<T: serde::Serializer>(self, T) -> Self::Output;$/;"	P	interface:SerializerAcceptor
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn add(&mut self, _: u64) -> Result<()> {$/;"	P	implementation:Infinite
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn add(&mut self, c: u64) -> Result<()> {$/;"	P	implementation:CountSize
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn add(&mut self, n: u64) -> Result<()> {$/;"	P	implementation:Bounded
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn add(&mut self, n: u64) -> Result<()>;$/;"	P	interface:SizeLimit
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GeCached) -> GeP1P1 {$/;"	P	implementation:GeP3
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	P	implementation:GeP3
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u64x2) -> u64x2 {$/;"	P	implementation:fake::u64x2
add_bytes_to_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits(bits: u64, bytes: u64) -> u64 {$/;"	f
add_bytes_to_bits_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits_tuple$/;"	f
add_ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn add_ctr(ctr: &mut [u8], mut ammount: u8) {$/;"	f
add_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn add_input(st: &mut Sha1, msg: &[u8]) {$/;"	f
add_random_event	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn add_random_event(&mut self, s: u8, i: usize, e: &[u8]) {$/;"	P	implementation:Fortuna
add_raw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn add_raw(&mut self, size: u64) -> Result<()> {$/;"	P	implementation:SizeChecker
add_rotate_xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! add_rotate_xor {$/;"	M
add_round_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Bs8State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs8State
add_round_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Self) -> Self;$/;"	P	interface:AesOps
add_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn add_value<T>(&mut self, t: T) -> Result<()> {$/;"	P	implementation:SizeChecker
advance_state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn advance_state(&mut self) {$/;"	P	implementation:Sosemanuk
aead	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn aead($/;"	f
aead	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^fn aead($/;"	f
aead	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod aead;$/;"	n
aead	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aead;$/;"	n
aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod aes;$/;"	n
aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes;$/;"	n
aes_cbc_no_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding() {$/;"	f	module:test
aes_cbc_no_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding_tests() -> Vec<CbcTest> {$/;"	f	module:test
aes_cbc_pkcs_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding() {$/;"	f	module:test
aes_cbc_pkcs_padding_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_cbc_pkcs_padding_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_cbc_pkcs_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding_tests() -> Vec<CbcTest> {$/;"	f	module:test
aes_ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr() {$/;"	f	module:test
aes_ctr_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ctr_box	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_box() {$/;"	f	module:test
aes_ctr_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f	module:test
aes_ctr_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f	module:test
aes_ctr_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_x8() {$/;"	f	module:test
aes_ctr_x8_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_x8_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ecb_no_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding() {$/;"	f	module:test
aes_ecb_no_padding_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ecb_no_padding_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_ecb_no_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding_tests() -> Vec<EcbTest> {$/;"	f	module:test
aes_ecb_pkcs_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding() {$/;"	f	module:test
aes_ecb_pkcs_padding_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding_tests() -> Vec<EcbTest> {$/;"	f	module:test
aes_gcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod aes_gcm;$/;"	n
aes_gcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes_gcm;$/;"	n
aes_gcm_decrypt_fail_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_fail_test() {$/;"	f	module:test
aes_gcm_decrypt_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_test() {$/;"	f	module:test
aes_gcm_open	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn aes_gcm_open($/;"	f
aes_gcm_seal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn aes_gcm_seal($/;"	f
aes_gcm_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_test() {$/;"	f	module:test
aes_init_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^fn aes_init_128(key: &[u8], cpu_features: cpu::Features) -> Result<KeyInner, error::Unspecified>/;"	f
aes_init_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^fn aes_init_256(key: &[u8], cpu_features: cpu::Features) -> Result<KeyInner, error::Unspecified>/;"	f
aes_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^    aes_key: aes::Key,$/;"	m	struct:Key
aes_new_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^fn aes_new_mask(key: &KeyInner, sample: Block) -> [u8; 5] {$/;"	f
aes_safe_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_bench(bh: &mut Bencher) {$/;"	f	module:bench
aes_safe_x8_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_x8_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aesni;$/;"	n
aesni_128_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_128_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_192_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_192_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_256_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_256_bench(bh: &mut Bencher) {$/;"	f	module:bench
aesni_bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn aesni_bench(bh: &mut Bencher, key_size: KeySize) {$/;"	f	module:bench
aessafe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod aessafe;$/;"	n
affine_from_jacobian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn affine_from_jacobian($/;"	f
agree_ephemeral	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^pub fn agree_ephemeral<F, R, E>($/;"	f
agreement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^        &'static agreement::Algorithm,$/;"	v	module:tests
agreement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod agreement;$/;"	n
alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    alg: &'static Algorithm,$/;"	m	struct:EphemeralPrivateKey
alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    alg: &'static Algorithm,$/;"	m	struct:KeyPair
alg_id_range	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    pub alg_id_range: core::ops::Range<usize>,$/;"	m	struct:Template
alg_id_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    fn alg_id_value(&self) -> &[u8] { &self.bytes[self.alg_id_range.start..self.alg_id_range.end/;"	P	implementation:Template
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: A,$/;"	m	struct:CtrMode
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: A,$/;"	m	struct:CtrModeX8
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T$/;"	m	struct:EcbDecryptorProcessor
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T$/;"	m	struct:EcbEncryptorProcessor
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T,$/;"	m	struct:CbcDecryptorProcessor
algo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    algo: T,$/;"	m	struct:CbcEncryptorProcessor
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    algorithm: &'static Algorithm,$/;"	m	struct:Key
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:Key
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.key.algorithm() }$/;"	P	implementation:OpeningKey
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.key.algorithm() }$/;"	P	implementation:SealingKey
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    algorithm: &'static Algorithm,$/;"	m	struct:HeaderProtectionKey
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:HeaderProtectionKey
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    algorithm: &'static Algorithm,$/;"	m	struct:Digest
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub algorithm: &'static Algorithm,$/;"	m	struct:Context
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:Context
algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub fn algorithm(&self) -> &'static Algorithm { self.algorithm }$/;"	P	implementation:Digest
aliases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Field
aliases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Variant
all_fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub fn all_fields(&'a self) -> Box<Iterator<Item = &'a Field<'a>> + 'a> {$/;"	P	implementation:Data
all_type_params	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^        all_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
allow_transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn allow_transparent(field: &Field, derive: Derive) -> bool {$/;"	f
alpha	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    alpha: &'a [u8; 58],$/;"	m	struct:DecodeBuilder
alpha	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    alpha: &'a [u8; 58],$/;"	m	struct:EncodeBuilder
alphabet	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^pub mod alphabet;$/;"	n
ammount	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    ammount: T$/;"	m	struct:StepUp
apply_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_key(&mut self) {$/;"	P	implementation:Blake2b
apply_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_key(&mut self) {$/;"	P	implementation:Blake2s
apply_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_param(&mut self) {$/;"	P	implementation:Blake2b
apply_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_param(&mut self) {$/;"	P	implementation:Blake2s
apply_to_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    pub fn apply_to_field(&self, field: &str) -> String {$/;"	P	implementation:RenameRule
apply_to_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    pub fn apply_to_variant(&self, variant: &str) -> String {$/;"	P	implementation:RenameRule
args	/home/lieroz/blockchain_rust/src/cli.rs	/^    args: &'a [String],$/;"	m	struct:CLI
arithmetic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod arithmetic;$/;"	n
arm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^pub(crate) mod arm {$/;"	n
array_impls	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! array_impls {$/;"	M
array_impls	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! array_impls {$/;"	M
as_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/endian.rs	/^pub fn as_bytes<E: Encoding<T>, T>(x: &[E]) -> &[u8]$/;"	f
as_mut	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    fn as_mut(&mut self) -> &mut [u8; BLOCK_LEN] { unsafe { core::mem::transmute(self) } }$/;"	P	implementation:Block
as_partial	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn as_partial(&self) -> PartialModulus<M> {$/;"	P	implementation:Modulus
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    fn as_ref(&self) -> &[u8; BLOCK_LEN] { unsafe { core::mem::transmute(self) } }$/;"	P	implementation:Block
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    fn as_ref(&self) -> &[u8; NONCE_LEN] { &self.0 }$/;"	P	implementation:Nonce
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    fn as_ref(&self) -> &[u8] { self.0.as_ref() }$/;"	P	implementation:PublicKey
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    fn as_ref(&self) -> &[u8] {$/;"	P	implementation:Digest
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    fn as_ref(&self) -> &[u8] { self.0.as_ref() }$/;"	P	implementation:PublicKey
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    fn as_ref(&self) -> &[u8] { &self.bytes[..self.len] }$/;"	P	implementation:PublicKey
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn as_ref(&self) -> &[u8] { self.0.as_ref() }$/;"	P	implementation:PublicKey
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    fn as_ref(&self) -> &[u8] { self.0.as_ref() }$/;"	P	implementation:Signature
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    fn as_ref(&self) -> &[u8] { &self.bytes[..self.len] }$/;"	P	implementation:Document
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn as_ref(&self) -> &Elem<M, E> { &self.0 }$/;"	P	implementation:One
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    fn as_ref(&self) -> &[u8] { self.0.as_ref() }$/;"	P	implementation:PublicKey
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^    fn as_ref(&self) -> &[u8] { &self.value[..self.len] }$/;"	P	implementation:Signature
as_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^    fn as_ref(&self) -> &TokenStream {$/;"	P	implementation:Fragment
as_slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn as_slice(&self) -> &[u8] {$/;"	P	implementation:EncodeUtf8
as_slice_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn as_slice_less_safe(&self) -> &'a [u8] { self.bytes }$/;"	P	implementation:no_panic::Slice
as_slice_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn as_slice_less_safe(&self) -> &'a [u8] {$/;"	P	implementation:Input
as_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/utf8.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Encode
as_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn as_str(&self) -> Option<&str> {$/;"	P	implementation:content::Content
as_usize_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^    pub fn as_usize_bits(&self) -> usize { self.0 }$/;"	P	implementation:BitLength
as_usize_bytes_rounded_up	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^    pub fn as_usize_bytes_rounded_up(&self) -> usize {$/;"	P	implementation:BitLength
assert_elem_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn assert_elem_eq<M, E>(a: &Elem<M, E>, b: &Elem<M, E>) {$/;"	f	module:tests
assert_elems_are_equal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn assert_elems_are_equal(ops: &CommonOps, a: &Elem<R>, b: &Elem<R>) {$/;"	f	module:tests
assert_point_actual_equals_expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn assert_point_actual_equals_expected($/;"	f	module:tests
associated_type_usage	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^        associated_type_usage: Vec<&'ast syn::TypePath>,$/;"	m	struct:with_bound::FindTyParams
assume_unique_for_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn assume_unique_for_key(a: Block) -> Self { Iv(a) }$/;"	P	implementation:Iv
ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^pub mod ast;$/;"	n
at_end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn at_end(&self) -> bool { self.i == self.input.len() }$/;"	P	implementation:Reader
at_most_one	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn at_most_one(mut self) -> Result<Option<T>, ()> {$/;"	P	implementation:VecAttr
attr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^pub mod attr;$/;"	n
attributes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    attributes: Vec<(String, String, bool)>,$/;"	m	struct:TestCase
attrs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub attrs: attr::Container,$/;"	m	struct:Container
attrs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub attrs: attr::Field,$/;"	m	struct:Field
attrs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub attrs: attr::Variant,$/;"	m	struct:Variant
available	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        pub fn available(&self, _: super::Features) -> bool {$/;"	P	implementation:arm::Feature
available	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        pub fn available(&self, _: super::Features) -> bool {$/;"	P	implementation:intel::Feature
b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub b: Elem<R>,$/;"	m	struct:CommonOps
b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  b: u32x4,$/;"	m	struct:ChaChaState
b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  b: u32x4,$/;"	m	struct:SalsaState
bad_type	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn bad_type(self, what: Unsupported) -> M::Error {$/;"	f
bad_type	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn bad_type(self, what: Unsupported) -> S::Error {$/;"	f
base_example	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn base_example() {$/;"	f	module:tests
bcrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^pub fn bcrypt(cost: u32, salt: &[u8], password: &[u8], output: &mut [u8]) {$/;"	f
bcrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt;$/;"	n
bcrypt_16_5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    pub fn bcrypt_16_5(bh: & mut Bencher) {$/;"	f	module:bench
bcrypt_pbkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^pub fn bcrypt_pbkdf(password: &[u8], salt: &[u8], rounds: u32, output: &mut [u8]) {$/;"	f
bcrypt_pbkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt_pbkdf;$/;"	n
be_u8_from_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^    pub fn be_u8_from_u32(value: u32) -> [u8; 4] {$/;"	f	module:slice
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^mod bench {$/;"	n
bench	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod bench {$/;"	n
bench_bcrypt_pbkdf_5_32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn bench_bcrypt_pbkdf_5_32(b: &mut Bencher) {$/;"	f	module:bench
bench_curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^macro_rules! bench_curve {$/;"	M
big_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn big_endian(&mut self) -> &mut Self {$/;"	P	implementation:Config
big_endian_affine_from_jacobian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn big_endian_affine_from_jacobian($/;"	f
big_endian_from_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn big_endian_from_limbs(limbs: &[Limb], out: &mut [u8]) {$/;"	f
big_endian_without_leading_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^    pub fn big_endian_without_leading_zero(&self) -> untrusted::Input<'a> { self.0 }$/;"	P	implementation:Positive
big_sigma0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	M	function:sha256_digest_round_x2
big_sigma0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	M	function:sha512_digest_round
big_sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	M	function:sha256_digest_round_x2
big_sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	M	function:sha512_digest_round
bigint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^mod bigint;$/;"	n
binary_op	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub fn binary_op<M, EA: Encoding, EB: Encoding, ER: Encoding>($/;"	f
binary_op_assign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub fn binary_op_assign<M, EA: Encoding, EB: Encoding>($/;"	f
bit_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    bit_length: [u8; 32],$/;"	m	struct:Whirlpool
bit_slice_1x128_with_u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x128_with_u32x4(data: &[u8]) -> Bs8State<u32x4> {$/;"	f
bit_slice_1x16_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x16_with_u16(data: &[u8]) -> Bs8State<u16> {$/;"	f
bit_slice_4x1_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x1_with_u16(a: u32) -> Bs8State<u16> {$/;"	f
bit_slice_4x4_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x4_with_u16(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u16> {$/;"	f
bit_slice_fill_4x4_with_u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_fill_4x4_with_u32x4(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u32x4> {$/;"	f
bit_string_with_no_unused_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub fn bit_string_with_no_unused_bits<'a>($/;"	f
bitand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitand(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitor(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod bits;$/;"	n
bitxor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn bitxor(self, rhs: Gf128) -> Gf128 {$/;"	P	implementation:Gf128
bitxor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn bitxor(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
bitxor_assign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    pub fn bitxor_assign(&mut self, a: Block) {$/;"	P	implementation:Block
blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	P	implementation:Blake2b
blake2b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2b;$/;"	n
blake2b_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_10(bh: & mut Bencher) {$/;"	f	module:bench
blake2b_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_1k(bh: & mut Bencher) {$/;"	f	module:bench
blake2b_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_64k(bh: & mut Bencher) {$/;"	f	module:bench
blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	P	implementation:Blake2s
blake2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2s;$/;"	n
blake2s_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_10(bh: & mut Bencher) {$/;"	f	module:bench
blake2s_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_1k(bh: & mut Bencher) {$/;"	f	module:bench
blake2s_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_64k(bh: & mut Bencher) {$/;"	f	module:bench
block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod block;$/;"	n
block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn block(&mut self, m: &[u8]) {$/;"	P	implementation:Poly1305
block	/home/lieroz/blockchain_rust/src/main.rs	/^mod block;$/;"	n
block	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    block: &'a Block,$/;"	m	struct:ProofOfWork
block_data_order	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    block_data_order: unsafe extern "C" fn(state: &mut State, data: *const u8, num: size_t),$/;"	m	struct:Algorithm
block_data_order	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest/sha1.rs	/^pub(super) unsafe extern "C" fn block_data_order($/;"	f
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<CbcDecryptorProcessor<T>, X>$/;"	m	struct:CbcDecryptor
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<CbcEncryptorProcessor<T>, X>$/;"	m	struct:CbcEncryptor
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<EcbDecryptorProcessor<T>, X>$/;"	m	struct:EcbDecryptor
block_engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_engine: BlockEngine<EcbEncryptorProcessor<T>, X>$/;"	m	struct:EcbEncryptor
block_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub block_len: usize,$/;"	m	struct:Algorithm
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	P	implementation:AesNiDecryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	P	implementation:AesNiEncryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2B_BLOCKBYTES }$/;"	P	implementation:Blake2b
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2S_BLOCKBYTES }$/;"	P	implementation:Blake2s
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    block_size: usize,$/;"	m	struct:BlockEngine
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Blowfish
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:Digest
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Md5
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Ripemd160
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha1
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha384
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512Trunc224
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	P	implementation:Sha512Trunc256
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha224
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	P	implementation:Sha256
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Sha3
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockDecryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockDecryptorX8
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockEncryptor
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	P	interface:BlockEncryptorX8
block_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn block_size(&self) -> usize {$/;"	P	implementation:Whirlpool
blockchain	/home/lieroz/blockchain_rust/src/main.rs	/^mod blockchain;$/;"	n
blockmodes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blockmodes;$/;"	n
blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    fn blocks(&self, state: &mut Opaque, data: &[u8], should_pad: Pad) {$/;"	P	implementation:Funcs
blocks_fn	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    blocks_fn:$/;"	m	struct:Funcs
blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn blowfish(bh: &mut Bencher) {$/;"	f	module:bench
blowfish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod blowfish;$/;"	n
bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for bool {$/;"	c
bool3ary_150	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_150 {$/;"	M	function:sha1rnds4p
bool3ary_202	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha1rnds4c
bool3ary_202	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha256_digest_round_x2
bool3ary_202	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	M	function:sha512_digest_round
bool3ary_232	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha1rnds4m
bool3ary_232	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha256_digest_round_x2
bool3ary_232	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	M	function:sha512_digest_round
borrow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    borrow: Option<syn::Meta>,$/;"	m	struct:Variant
borrow_cow_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub fn borrow_cow_bytes<'de: 'a, 'a, D>(deserializer: D) -> Result<Cow<'a, [u8]>, D::Error>$/;"	f
borrow_cow_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub fn borrow_cow_str<'de: 'a, 'a, D>(deserializer: D) -> Result<Cow<'a, str>, D::Error>$/;"	f
borrow_write_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn borrow_write_buffer(&mut self) -> BorrowedWriteBuffer {$/;"	P	implementation:OwnedReadBuffer
borrowable_lifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn borrowable_lifetimes($/;"	f
borrowed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    borrowed: BorrowedLifetimes,$/;"	m	struct:Parameters
borrowed_lifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn borrowed_lifetimes(cont: &Container) -> BorrowedLifetimes {$/;"	f
borrowed_lifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    borrowed_lifetimes: BTreeSet<syn::Lifetime>,$/;"	m	struct:Field
borrowed_lifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn borrowed_lifetimes(&self) -> &BTreeSet<syn::Lifetime> {$/;"	P	implementation:Field
bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod bound;$/;"	n
box_forwarded_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! box_forwarded_impl {$/;"	M
bssl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod bssl;$/;"	n
bssl_constant_time_test_main	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/constant_time.rs	/^            fn bssl_constant_time_test_main() -> bssl::Result;$/;"	f	function:tests::test_constant_time
buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    buf: [u8; 4],$/;"	m	struct:EncodeUtf8
buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    buf: [u8; 2*BLAKE2B_BLOCKBYTES],$/;"	m	struct:Blake2b
buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    buf: [u8; 2*BLAKE2S_BLOCKBYTES],$/;"	m	struct:Blake2s
buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/utf8.rs	/^    buf: [u8; 4],$/;"	m	struct:Encode
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: &'a [u8],$/;"	m	struct:RefReadBuffer
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: &'a mut [u8],$/;"	m	struct:RefWriteBuffer
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: Vec<u8>,$/;"	m	struct:OwnedReadBuffer
buff	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    buff: Vec<u8>,$/;"	m	struct:OwnedWriteBuffer
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer: [u8; 128],$/;"	m	struct:FixedBuffer128
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer: [u8; 64],$/;"	m	struct:FixedBuffer64
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod buffer;$/;"	n
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Md5
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    buffer    : [u8; 16],$/;"	m	struct:Poly1305
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Ripemd160
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Sha1
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    buffer: FixedBuffer128,$/;"	m	struct:Engine512
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Engine256
buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    buffer: FixedBuffer64,$/;"	m	struct:Whirlpool
buffer_idx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer_idx: usize,$/;"	m	struct:FixedBuffer128
buffer_idx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    buffer_idx: usize,$/;"	m	struct:FixedBuffer64
buflen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    buflen: usize,$/;"	m	struct:Blake2b
buflen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    buflen: usize,$/;"	m	struct:Blake2s
build_generics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn build_generics(cont: &Container, borrowed: &BorrowedLifetimes) -> syn::Generics {$/;"	f
build_generics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn build_generics(cont: &Container) -> syn::Generics {$/;"	f
byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        pub byte: u8,$/;"	m	struct:rand::FixedByteRandom
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    pub fn bytes(&'a self) -> &'a [u8] { self.private_key.bytes_less_safe() }$/;"	P	implementation:EphemeralPrivateKey
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    bytes: [u8; PUBLIC_KEY_MAX_LEN],$/;"	m	struct:PublicKey
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    bytes: [u8; SEED_MAX_BYTES],$/;"	m	struct:Seed
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    bytes: Vec<u8>,$/;"	m	struct:Writer
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    bytes: [u8; ec::PKCS8_DOCUMENT_MAX_LEN],$/;"	m	struct:Document
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    pub bytes: &'static [u8],$/;"	m	struct:Template
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        pub bytes: &'a [&'a [u8]],$/;"	m	struct:rand::FixedSliceSequenceRandom
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        pub bytes: &'a [u8],$/;"	m	struct:rand::FixedSliceRandom
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    bytes: OwnedReadBuffer$/;"	m	struct:CtrMode
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    bytes: OwnedReadBuffer$/;"	m	struct:CtrModeX8
bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        bytes: &'a [u8]$/;"	m	struct:no_panic::Slice
bytes_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub fn bytes_less_safe(&self) -> &[u8] { &self.bytes[..self.curve.elem_scalar_seed_len] }$/;"	P	implementation:Seed
c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  c: u32x4,$/;"	m	struct:ChaChaState
c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        c: u32,$/;"	m	struct:test::Test
c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  c: u32x4,$/;"	m	struct:SalsaState
c_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    c_len: usize,$/;"	m	struct:GhashWithC
cab	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    cab: HashMap<K, V>,$/;"	m	struct:KV
calculate_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^fn calculate_block<M: Mac>($/;"	f
can_absorb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    can_absorb: bool,  \/\/ Can absorb$/;"	m	struct:Sha3
can_squeeze	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    can_squeeze: bool,  \/\/ Can squeeze$/;"	m	struct:Sha3
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.buff.len() }$/;"	P	implementation:RefReadBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:BorrowedWriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:OwnedReadBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:OwnedWriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	P	implementation:RefWriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	P	interface:ReadBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	P	interface:WriteBuffer
capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn capacity(&self) -> usize {$/;"	P	implementation:Sha3Mode
case	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^mod case;$/;"	n
cause	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    fn cause(&self) -> Option<&error::Error> {$/;"	P	implementation:ErrorKind
cause	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn cause(&self) -> Option<&std::error::Error> { None }$/;"	P	implementation:KeyRejected
cause	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn cause(&self) -> Option<&std::error::Error> { None }$/;"	P	implementation:Unspecified
cautious	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub fn cautious(hint: Option<usize>) -> usize {$/;"	f	module:size_hint
cbc_decryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
cbc_encryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest/sha1.rs	/^fn ch(x: W32, y: W32, z: W32) -> W32 { (x & y) | (!x & z) }$/;"	f
chacha	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod chacha;$/;"	n
chacha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20;$/;"	n
chacha20_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_10(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_1k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_64k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20_init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^fn chacha20_init(key: &[u8], _todo: cpu::Features) -> Result<KeyInner, error::Unspecified> {$/;"	f
chacha20_new_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^fn chacha20_new_mask(key: &KeyInner, sample: Block) -> [u8; 5] {$/;"	f
chacha20_poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod chacha20_poly1305;$/;"	n
chacha20_poly1305_init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^fn chacha20_poly1305_init($/;"	f
chacha20_poly1305_open	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^fn chacha20_poly1305_open($/;"	f
chacha20_poly1305_openssh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub mod chacha20_poly1305_openssh;$/;"	n
chacha20_poly1305_seal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^fn chacha20_poly1305_seal($/;"	f
chacha20_test_case_inner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    fn chacha20_test_case_inner($/;"	f	module:tests
chacha20_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    pub fn chacha20_tests() {$/;"	f	module:tests
chacha20poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20poly1305;$/;"	n
chacha20poly1305_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_10(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_1k(bh: & mut Bencher) {$/;"	f	module:bench
chacha20poly1305_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_64k(bh: & mut Bencher) {$/;"	f	module:bench
chaining_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub chaining_len: usize,$/;"	m	struct:Algorithm
change_basis_a2x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_a2x(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_s2x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_s2x(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_x2a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2a(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
change_basis_x2s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2s(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de> Deserialize<'de> for char {$/;"	c
check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    check: bool,$/;"	m	struct:DecodeBuilder
check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    check: bool,$/;"	m	struct:EncodeBuilder
check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^pub fn check(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^    pub fn check(self) -> Result<(), Vec<syn::Error>> {$/;"	P	implementation:Ctxt
check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^mod check;$/;"	n
check_adjacent_tag_conflict	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_adjacent_tag_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_flatten(cx: &Ctxt, cont: &Container) {$/;"	f
check_flatten_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_flatten_field(cx: &Ctxt, style: Style, field: &Field) {$/;"	f
check_getter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_getter(cx: &Ctxt, cont: &Container) {$/;"	f
check_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_identifier(cx: &Ctxt, cont: &Container) {$/;"	f
check_internal_tag_field_name_conflict	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_internal_tag_field_name_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_minimum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    fn check_minimum(input: untrusted::Input, min_value: u8) -> Result<(), error::Unspecified> {$/;"	f	function:nonnegative_integer
check_per_nonce_max_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^fn check_per_nonce_max_bytes(alg: &Algorithm, in_out_len: usize) -> Result<(), error::Unspecifie/;"	f
check_private_key_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    check_private_key_bytes: fn(bytes: &[u8]) -> Result<(), error::Unspecified>,$/;"	m	struct:Curve
check_s_lt_l	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^fn check_s_lt_l(s: &[u8]) -> bool$/;"	f
check_scalar_big_endian_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn check_scalar_big_endian_bytes($/;"	f
check_state_layout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^pub fn check_state_layout() {$/;"	f
check_transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_transparent(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check_variant_skip_attrs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn check_variant_skip_attrs(cx: &Ctxt, cont: &Container) {$/;"	f
checksum	/home/lieroz/blockchain_rust/src/wallet.rs	/^    fn checksum(payload: &[u8]) -> Vec<u8> {$/;"	P	implementation:Wallet
chunk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn chunk(dest: &mut [u8]) -> Result<usize, error::Unspecified> {$/;"	f	module:sysrand_chunk
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CtrTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::TestData
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    cipher: Box<SynchronousStreamCipher + 'a>,$/;"	m	struct:AesGcm
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CbcTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::CtrTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        cipher: Vec<u8>$/;"	m	struct:test::EcbTest
cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    cipher  : ChaCha20,$/;"	m	struct:ChaCha20Poly1305
cipher_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                cipher_text:  Vec<u8>,$/;"	m	struct:test::TestVector
cipher_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    cipher_text: Vec<u8>,$/;"	m	struct:test::TestVector
ciphertext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        ciphertext: Vec<u8>$/;"	m	struct:test::Test
circular_shift	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^fn circular_shift(bits: u32, word: u32) -> u32 {$/;"	f
cli	/home/lieroz/blockchain_rust/src/main.rs	/^mod cli;$/;"	n
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:BoxedLimbs
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Elem
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	P	implementation:AesNiDecryptor
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	P	implementation:AesNiEncryptor
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	P	implementation:Blake2b
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	P	implementation:Blake2s
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	P	implementation:ChaCha20
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	P	implementation:FixedBuffer128
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	P	implementation:FixedBuffer64
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	P	implementation:Ghash
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	P	implementation:GhashWithC
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	P	implementation:Hc128
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	P	implementation:Rc4
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	P	implementation:Salsa20
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Sha3
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	P	implementation:Sosemanuk
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:CowStrDeserializer
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:StringDeserializer
clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	f
cnt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    cnt: usize,$/;"	m	struct:Hc128
code	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    code: Vec<u8>$/;"	m	struct:MacResult
code	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn code<'s>(&'s self) -> &'s [u8] {$/;"	P	implementation:MacResult
collect_lifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn collect_lifetimes(ty: &syn::Type, out: &mut BTreeSet<syn::Lifetime>) {$/;"	f
collect_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn collect_str<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
collect_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
columnround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^fn columnround(state: &mut SalsaState) -> () {$/;"	f
common	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub common: &'static CommonOps,$/;"	m	struct:PrivateKeyOps
common	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub common: &'static CommonOps,$/;"	m	struct:PublicKeyOps
common	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub common: &'static CommonOps,$/;"	m	struct:ScalarOps
compile_time_assert_clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn compile_time_assert_clone<T: Clone>() {}$/;"	f
compile_time_assert_copy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn compile_time_assert_copy<T: Copy>() {}$/;"	f
compile_time_assert_debug	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn compile_time_assert_debug<T: core::fmt::Debug>() {}$/;"	f
compile_time_assert_send	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn compile_time_assert_send<T: Send>() {}$/;"	f
compile_time_assert_sync	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn compile_time_assert_sync<T: Sync>() {}$/;"	f
completed_data_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    completed_data_blocks: u64,$/;"	m	struct:Context
compress	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn compress(&mut self) {$/;"	P	implementation:Blake2b
compress	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn compress(&mut self) {$/;"	P	implementation:Blake2s
compute_public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    pub fn compute_public_key(&self) -> Result<PublicKey, error::Unspecified> {$/;"	P	implementation:EphemeralPrivateKey
compute_public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub fn compute_public_key(&self) -> Result<PublicKey, error::Unspecified> {$/;"	P	implementation:Seed
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    computed: bool, \/\/ whether the final digest has been computed$/;"	m	struct:Blake2b
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    computed: bool, \/\/ whether the final digest has been computed$/;"	m	struct:Blake2s
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    computed: bool,$/;"	m	struct:Ripemd160
computed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    computed: bool,$/;"	m	struct:Sha1
cond_xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn cond_xor(self, x: Gf128, y: Gf128) -> Gf128 {$/;"	P	implementation:Gf128
config	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^mod config;$/;"	n
config	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn config() -> Config {$/;"	f
config_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^macro_rules! config_map {$/;"	M
constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod constant_time;$/;"	n
constrain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub fn constrain<T: ?Sized>(t: &T) -> &T {$/;"	f
construct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn construct(a: u32, b: u32, c: u32, d: u32, bit: u32) -> u16 {$/;"	f	function:bit_slice_4x4_with_u16
construct_ctr_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn construct_ctr_x8(in_ctr: &[u8], out_ctr_x8: &mut [u8]) {$/;"	f
consume_affine_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_affine_point($/;"	f	module:tests
consume_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_bool(&mut self, key: &str) -> bool {$/;"	P	implementation:TestCase
consume_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_bytes(&mut self, key: &str) -> Vec<u8> {$/;"	P	implementation:TestCase
consume_digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_digest_alg(&mut self, key: &str) -> Option<&'static digest::Algorithm> {$/;"	P	implementation:TestCase
consume_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_elem(ops: &CommonOps, test_case: &mut test::TestCase, name: &str) -> Elem<R> {$/;"	f	module:tests
consume_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn consume_elem<M>($/;"	f	module:tests
consume_elem_unchecked	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn consume_elem_unchecked<M>($/;"	f	module:tests
consume_jacobian_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_jacobian_point($/;"	f	module:tests
consume_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    fn consume_key(test_case: &mut test::TestCase, name: &str) -> Key {$/;"	f	module:tests
consume_modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn consume_modulus<M>(test_case: &mut test::TestCase, name: &str) -> Modulus<M> {$/;"	f	module:tests
consume_nonnegative	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn consume_nonnegative(test_case: &mut test::TestCase, name: &str) -> Nonnegative {$/;"	f	module:tests
consume_optional_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_optional_string(&mut self, key: &str) -> Option<String> {$/;"	P	implementation:TestCase
consume_padded_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_padded_bytes($/;"	f	module:tests
consume_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_point(ops: &PrivateKeyOps, test_case: &mut test::TestCase, name: &str) -> TestPoi/;"	f	module:tests
consume_point_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^        fn consume_point_elem(ops: &CommonOps, elems: &Vec<&str>, i: usize) -> Elem<R> {$/;"	f	function:tests::consume_point
consume_point_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_point_elem(ops: &CommonOps, limbs_out: &mut [Limb], elems: &Vec<&str>, i: usize) /;"	f	module:tests
consume_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_scalar(ops: &CommonOps, test_case: &mut test::TestCase, name: &str) -> Scalar {$/;"	f	module:tests
consume_scalar_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn consume_scalar_mont($/;"	f	module:tests
consume_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_string(&mut self, key: &str) -> String {$/;"	P	implementation:TestCase
consume_usize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_usize(&mut self, key: &str) -> usize {$/;"	P	implementation:TestCase
consume_usize_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub fn consume_usize_bits(&mut self, key: &str) -> bits::BitLength {$/;"	P	implementation:TestCase
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        content: &'a Content<'de>,$/;"	m	struct:content::ContentRefDeserializer
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        content: Content<'de>,$/;"	m	struct:content::ContentDeserializer
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub content: Content<'de>,$/;"	m	struct:content::TaggedContent
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^mod content {$/;"	n
content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^mod content {$/;"	n
contents	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub contents: &'a str,$/;"	m	struct:File
convert	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^pub mod convert;$/;"	n
copy_memory	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn copy_memory(src: &[u8], dst: &mut [u8]) {$/;"	f
core	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^    mod core {$/;"	n	module:lib
cost	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        cost: u32,$/;"	m	struct:test::Test
count	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    count: usize$/;"	m	struct:Pool
count	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    count: usize,$/;"	m	struct:MapDeserializer
count	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    count: usize,$/;"	m	struct:SeqDeserializer
cpu	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod cpu;$/;"	n
cpu_features	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    cpu_features: cpu::Features,$/;"	m	struct:Key
cpu_features	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    cpu_features: cpu::Features,$/;"	m	struct:Key
cpu_features	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    cpu_features: cpu::Features,$/;"	m	struct:Context
create	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn create(address: &str) -> Blockchain {$/;"	P	implementation:Blockchain
create	/home/lieroz/blockchain_rust/src/cli.rs	/^    fn create(&self, address: &str) {$/;"	P	implementation:CLI
create_keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn create_keys<D: Digest>(digest: &mut D, key: &[u8]) -> (Vec<u8>, Vec<u8>) {$/;"	f
create_wallet	/home/lieroz/blockchain_rust/src/wallets.rs	/^    pub fn create_wallet(&mut self) -> String {$/;"	P	implementation:Wallets
cryptoutil	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod cryptoutil;$/;"	n
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        ctr: Vec<u8>,$/;"	m	struct:test::CtrTest
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ctr($/;"	f
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        ctr: Vec<u8>,$/;"	m	struct:test::CtrTest
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    ctr: Vec<u8>,$/;"	m	struct:CtrMode
ctr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    ctr: [u8; CTR_LEN],$/;"	m	struct:FortunaGenerator
ctr32_encrypt_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub(super) fn ctr32_encrypt_blocks($/;"	P	implementation:Key
ctr_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    ctr_x8: Vec<u8>,$/;"	m	struct:CtrModeX8
ctx_prototype	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    ctx_prototype: SigningContext,$/;"	m	struct:SigningKey
ctxt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/mod.rs	/^mod ctxt;$/;"	n
current	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        pub current: core::cell::UnsafeCell<usize>,$/;"	m	struct:rand::FixedSliceSequenceRandom
current_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn current_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	P	interface:FixedBuffer
curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    curve: &'static Curve,$/;"	m	struct:Seed
curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^pub mod curve;$/;"	n
curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    curve: &'static ec::Curve,$/;"	m	struct:Algorithm
curve25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^pub mod curve25519;$/;"	n
curve25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519(n: &[u8], p: &[u8]) -> [u8; 32] {$/;"	f
curve25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod curve25519;$/;"	n
curve25519_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519_base(x: &[u8]) -> [u8; 32] {$/;"	f
curve_id_index	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    pub curve_id_index: usize,$/;"	m	struct:Template
curve_oid	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    pub fn curve_oid(&self) -> &[u8] { &self.alg_id_value()[self.curve_id_index..] }$/;"	P	implementation:Template
custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    fn custom<T: fmt::Display>(desc: T) -> Error {$/;"	P	implementation:Error
custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    fn custom<T: fmt::Display>(msg: T) -> Self {$/;"	P	implementation:Error
custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn custom<T>(msg: T) -> Self$/;"	P	implementation:Error
custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn custom<T>(_: T) -> Self$/;"	P	implementation:Error
cx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:Attr
cx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:VecAttr
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    d: Scalar<R>,$/;"	m	struct:KeyPair
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^  d: u32x4$/;"	m	struct:ChaChaState
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	m	struct:Gf128
d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^  d: u32x4$/;"	m	struct:SalsaState
darwin	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod darwin {$/;"	n
data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        data: Vec<TestData>$/;"	m	struct:test::Test
data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        data: Vec<u8>,$/;"	m	struct:test::Test
data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub data: Data<'a>,$/;"	m	struct:Container
data_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    data_len: usize$/;"	m	struct:ChaCha20Poly1305
db_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    db_len: usize,$/;"	m	struct:PSSMetrics
dbl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	P	implementation:GeP2
dbl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	P	implementation:GeP3
de	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^mod de;$/;"	n
de	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^pub mod de;$/;"	n
de	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/mod.rs	/^pub mod de;$/;"	n
de	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod de;$/;"	n
de_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
de_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
de_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
de_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
de_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
de_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
de_lifetime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn de_lifetime(&self) -> syn::Lifetime {$/;"	P	implementation:BorrowedLifetimes
de_lifetime_def	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn de_lifetime_def(&self) -> Option<syn::LifetimeDef> {$/;"	P	implementation:BorrowedLifetimes
debug	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod debug;$/;"	n
decide_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn decide_identifier($/;"	f
decide_tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn decide_tag($/;"	f
declare_error_trait	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
declare_error_trait	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
decode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^pub fn decode<I: AsRef<[u8]>>(input: I) -> decode::DecodeBuilder<'static, I> {$/;"	f
decode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^pub mod decode;$/;"	n
decode_once	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn decode_once(self, m: &Modulus<M>) -> Elem<M, <E as ReductionEncoding>::Output> {$/;"	P	implementation:Elem
deconstruct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn deconstruct(bs: &Bs8State<u16>, bit: u32) -> u32 {$/;"	f	function:un_bit_slice_4x4_with_u16
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^	fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool;$/;"	P	interface:AeadDecryptor
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8])  -> bool {$/;"	P	implementation:AesGcm
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrMode
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrModeX8
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:CbcDecryptor
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:EcbDecryptor
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	P	implementation:Blowfish
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:ChaCha20
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool {$/;"	P	implementation:ChaCha20Poly1305
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Hc128
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Rc4
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Salsa20
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Sosemanuk
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Box
decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	interface:Decryptor
decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:AesNiDecryptor
decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Blowfish
decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockDecryptor
decrypt_block_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn decrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockDecryptorX8
decrypt_core	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn decrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
decrypt_eay_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_eay_test_vectors() {$/;"	f	module:test
default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn default() -> u32x4 {$/;"	P	implementation:u32x4
default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Container
default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Field
default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Container
default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Field
default_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn default_param(outlen: u8) -> Blake2bParam {$/;"	P	implementation:Blake2b
default_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn default_param(outlen: u8) -> Blake2sParam {$/;"	P	implementation:Blake2s
define_aes_dec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec($/;"	M
define_aes_dec_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec_x8($/;"	M
define_aes_enc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc($/;"	M
define_aes_enc_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc_x8($/;"	M
define_aes_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl($/;"	M
define_aes_impl_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl_x8($/;"	M
define_aes_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct($/;"	M
define_aes_struct_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct_x8($/;"	M
define_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/endian.rs	/^macro_rules! define_endian {$/;"	M
delegate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    delegate: S,$/;"	m	struct:TaggedSerializer
deny_unknown_fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deny_unknown_fields: bool,$/;"	m	struct:Container
deny_unknown_fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn deny_unknown_fields(&self) -> bool {$/;"	P	implementation:Container
depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    depth: u8,$/;"	m	struct:Blake2bParam
depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    depth: u8,$/;"	m	struct:Blake2sParam
der	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^pub mod der;$/;"	n
der_writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^pub(crate) mod der_writer;$/;"	n
deref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn deref(&self) -> &Self::Target { &self.limbs }$/;"	P	implementation:BoxedLimbs
deref_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! deref_impl {$/;"	M
deref_mut	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target { &mut self.limbs }$/;"	P	implementation:BoxedLimbs
derive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub fn derive(seed: Seed) -> Result<Self, error::Unspecified> {$/;"	P	implementation:KeyPair
derive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pbkdf2.rs	/^pub fn derive($/;"	f
derive_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pbkdf2.rs	/^fn derive_block($/;"	f
derive_debug_self_as_ref_hex_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^macro_rules! derive_debug_self_as_ref_hex_bytes {$/;"	M
derive_debug_via_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^macro_rules! derive_debug_via_field {$/;"	M
derive_debug_via_id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^macro_rules! derive_debug_via_id {$/;"	M
derive_deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^pub fn derive_deserialize(input: TokenStream) -> TokenStream {$/;"	f
derive_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn derive_key(key: &mut [u8], mask: u8) {$/;"	f
derive_poly1305_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^pub(super) fn derive_poly1305_key(chacha_key: &chacha::Key, iv: Iv) -> poly1305::Key {$/;"	f
derive_serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^pub fn derive_serialize(input: TokenStream) -> TokenStream {$/;"	f
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:ErrorKind
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:DecodeError
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn description(&self) -> &str { Self::description_() }$/;"	P	implementation:Unspecified
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn description(&self) -> &str { self.description_() }$/;"	P	implementation:KeyRejected
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn description_() -> &'static str { "ring::error::Unspecified" }$/;"	P	implementation:Unspecified
description_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub fn description_(&self) -> &'static str { self.0 }$/;"	P	implementation:KeyRejected
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn deserialize<'a, T: serde::Deserialize<'a>>(&self, bytes: &'a [u8]) -> Result<T> {$/;"	P	implementation:Config
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn deserialize<'a, T, O>(bytes: &'a [u8], options: O) -> Result<T>$/;"	f
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn deserialize<'a, T>(bytes: &'a [u8]) -> Result<T>$/;"	f
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn deserialize<D>(deserializer: D) -> Result<IgnoredAny, D::Error>$/;"	P	implementation:IgnoredAny
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration::deserialize::Field
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime::deserialize::Field
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:deserialize::Field
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:range::Field
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(_deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:CString
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:IpAddr
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:OsString
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Path
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PathBuf
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PhantomData
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SocketAddr
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:String
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:T
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:bool
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:char
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:str
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:u8
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	f
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	interface:Deserialize
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:DeserializeSeed
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>$/;"	f
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:content::Content
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagContentOtherFieldVisitor
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentFieldVisitor
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:content
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deserialize: RenameRule,$/;"	m	struct:RenameAllRules
deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deserialize: String,$/;"	m	struct:Name
deserialize	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn deserialize(bytes: Vec<u8>) -> Block {$/;"	P	implementation:Block
deserialize_adjacently_tagged_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_adjacently_tagged_enum($/;"	f
deserialize_aliases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deserialize_aliases: Vec<String>,$/;"	m	struct:Name
deserialize_aliases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn deserialize_aliases(&self) -> Vec<String> {$/;"	P	implementation:Name
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value>$/;"	f
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_body	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_custom_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_custom_identifier($/;"	f
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! deserialize_enum {$/;"	M
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_enum<V>($/;"	P	interface:Deserializer
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_enum<V>($/;"	f	module:content
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_enum($/;"	f
deserialize_externally_tagged_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_externally_tagged_enum($/;"	f
deserialize_externally_tagged_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_externally_tagged_newtype_variant($/;"	f
deserialize_externally_tagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_externally_tagged_variant($/;"	f
deserialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn deserialize_from<R: Read, T: serde::de::DeserializeOwned>($/;"	P	implementation:Config
deserialize_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn deserialize_from<R, T, O>(reader: R, options: O) -> Result<T>$/;"	f
deserialize_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn deserialize_from<R, T>(reader: R) -> Result<T>$/;"	f
deserialize_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_from(type_from: &syn::Type) -> Fragment {$/;"	f
deserialize_from_custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn deserialize_from_custom<'a, R: BincodeRead<'a>, T: serde::de::DeserializeOwned>($/;"	P	implementation:Config
deserialize_from_custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn deserialize_from_custom<'a, R, T, O>(reader: R, options: O) -> Result<T>$/;"	f
deserialize_from_custom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn deserialize_from_custom<'a, R, T>(reader: R) -> Result<T>$/;"	f
deserialize_generated_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_generated_identifier($/;"	f
deserialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_identifier<V>(self, _visitor: V) -> Result<V::Value>$/;"	f
deserialize_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_identifier($/;"	f
deserialize_ignored_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_ignored_any<V>(self, _visitor: V) -> Result<V::Value>$/;"	f
deserialize_ignored_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_ignored_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn deserialize_in_place<'a, R, T>(&self, reader: R, place: &mut T) -> Result<()>$/;"	P	implementation:Config
deserialize_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn deserialize_in_place<'a, R, T, O>(reader: R, options: O, place: &mut T) -> Result</;"	f
deserialize_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn deserialize_in_place<'a, R, T>(reader: R, place: &mut T) -> Result<()>$/;"	f
deserialize_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	implementation:String
deserialize_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	f
deserialize_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	interface:Deserialize
deserialize_in_place_body	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_in_place_body(_cont: &Container, _params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_in_place_body	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_in_place_body(cont: &Container, params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_integer<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_internally_tagged_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_internally_tagged_enum($/;"	f
deserialize_internally_tagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_internally_tagged_variant($/;"	f
deserialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_map($/;"	f
deserialize_map_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_map_in_place($/;"	f
deserialize_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn deserialize_name(&self) -> String {$/;"	P	implementation:Name
deserialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value>$/;"	f
deserialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	interface:Deserializer
deserialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_newtype_struct<V>($/;"	f	module:content
deserialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, Self::Er/;"	f
deserialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_newtype_struct($/;"	f
deserialize_newtype_struct_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_newtype_struct_in_place(params: &Parameters, field: &Field) -> TokenStream {$/;"	f
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_other	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_other<V>() -> Result<V, E> {$/;"	f
deserialize_renamed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deserialize_renamed: bool,$/;"	m	struct:Name
deserialize_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn deserialize_seed<'a, T: serde::de::DeserializeSeed<'a>>($/;"	P	implementation:Config
deserialize_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn deserialize_seed<'a, T, O>(seed: T, bytes: &'a [u8], options: O) -> Result<T::Valu/;"	f
deserialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_seq<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_seq($/;"	f
deserialize_seq_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_seq_in_place($/;"	f
deserialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_struct<V>($/;"	f
deserialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_struct<V>($/;"	P	interface:Deserializer
deserialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_struct<V>($/;"	f	module:content
deserialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn deserialize_struct<V>($/;"	f
deserialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_struct($/;"	f
deserialize_struct_as_map_visitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_struct_as_map_visitor($/;"	f
deserialize_struct_as_struct_in_place_visitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_struct_as_struct_in_place_visitor($/;"	f
deserialize_struct_as_struct_visitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_struct_as_struct_visitor($/;"	f
deserialize_struct_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_struct_in_place($/;"	f
deserialize_transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value>$/;"	f
deserialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_tuple($/;"	f
deserialize_tuple_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_tuple_in_place($/;"	f
deserialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_tuple_struct<V>($/;"	f
deserialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	interface:Deserializer
deserialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_tuple_struct<V>($/;"	f	module:content
deserialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn deserialize_unit_struct<V>(self, _name: &'static str, visitor: V) -> Result<V::Value>$/;"	f
deserialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn deserialize_unit_struct<V>($/;"	P	interface:Deserializer
deserialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn deserialize_unit_struct<V>($/;"	f	module:content
deserialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_unit_struct(params: &Parameters, cattrs: &attr::Container) -> Fragment {$/;"	f
deserialize_untagged_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_untagged_enum($/;"	f
deserialize_untagged_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_untagged_newtype_variant($/;"	f
deserialize_untagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn deserialize_untagged_variant($/;"	f
deserialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
deserialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
deserialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
deserialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            deserializer: &'a mut Deserializer<R, O>,$/;"	m	struct:deserialize_map::Access
deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            deserializer: &'a mut Deserializer<R, O>,$/;"	m	struct:deserialize_tuple::Access
detect_implementation	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^fn detect_implementation(cpu_features: cpu::Features) -> Implementation {$/;"	f
detect_implementation	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^fn detect_implementation(cpu: cpu::Features) -> Implementation {$/;"	f
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub fn digest(algorithm: &'static Algorithm, data: &[u8]) -> Digest {$/;"	f
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519.rs	/^mod digest;$/;"	n
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod digest;$/;"	n
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        digest: D,$/;"	m	struct:test::TestVector
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    digest: D,$/;"	m	struct:Hmac
digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod digest;$/;"	n
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:Algorithm
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:Algorithm
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:PKCS1
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    digest_alg: &'static digest::Algorithm,$/;"	m	struct:PSS
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn digest_alg(&self) -> &'static digest::Algorithm { self.digest_alg }$/;"	P	implementation:PKCS1
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn digest_alg(&self) -> &'static digest::Algorithm { self.digest_alg }$/;"	P	implementation:PSS
digest_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn digest_alg(&self) -> &'static digest::Algorithm;$/;"	P	interface:Padding
digest_algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn digest_algorithm(&self) -> &'static digest::Algorithm { self.wrapped.digest_algorithm/;"	P	implementation:VerificationKey
digest_algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn digest_algorithm(&self) -> &'static digest::Algorithm {$/;"	P	implementation:SigningKey
digest_bytes_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/digest_scalar.rs	/^pub(crate) fn digest_bytes_scalar(ops: &ScalarOps, digest: &[u8]) -> Scalar {$/;"	f
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    digest_length: u8,$/;"	m	struct:Blake2b
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    digest_length: u8,$/;"	m	struct:Blake2bParam
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    digest_length: u8,$/;"	m	struct:Blake2s
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    digest_length: u8,$/;"	m	struct:Blake2sParam
digest_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn digest_length(&self) -> usize {$/;"	P	implementation:Sha3Mode
digest_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/digest.rs	/^pub fn digest_scalar(digest: digest::Digest) -> Scalar {$/;"	f
digest_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa.rs	/^mod digest_scalar;$/;"	n
digest_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/digest_scalar.rs	/^pub fn digest_scalar(ops: &ScalarOps, msg: digest::Digest) -> Scalar {$/;"	f
digest_scalar_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/digest_scalar.rs	/^fn digest_scalar_(ops: &ScalarOps, digest: &[u8]) -> Scalar {$/;"	f
digest_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod digest_tests {$/;"	n
digest_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod digest_tests {$/;"	n
digestinfo_prefix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    digestinfo_prefix: &'static [u8],$/;"	m	struct:PKCS1
donna_self_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn donna_self_test() {$/;"	f	module:test
double_scalarmult_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn double_scalarmult_vartime(a_scalar: &[u8], a_point: GeP3, b_scalar: &[u8]) -> GeP2 {$/;"	P	implementation:GeP2
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        fn drop(&mut self) {$/;"	P	implementation:rand::FixedSliceSequenceRandom
drop	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Ctxt
dummy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod dummy;$/;"	n
e	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^    pub e: bigint::PublicExponent,$/;"	m	struct:Key
eay_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn eay_test_vectors() -> Vec<Test> {$/;"	f	module:test
ec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^        &'static ec::Curve,$/;"	v	module:tests
ec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod ec;$/;"	n
ecb_decryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ecb_encryptor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ecdh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^pub mod ecdh;$/;"	n
ecdh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^fn ecdh($/;"	f
ecdh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^macro_rules! ecdh {$/;"	M
ecdsa	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^pub mod ecdsa;$/;"	n
ed25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519.rs	/^pub mod ed25519;$/;"	n
ed25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ed25519;$/;"	n
eddsa_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/digest.rs	/^pub fn eddsa_digest(signature_r: &[u8], public_key: &[u8], msg: &[u8]) -> digest::Digest {$/;"	f
edwards_to_montgomery_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^fn edwards_to_montgomery_x(ed_y: Fe) -> Fe {$/;"	f
elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^mod elem;$/;"	n
elem_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_add<E: Encoding>(&self, a: &mut Elem<E>, b: &Elem<E>) {$/;"	P	implementation:CommonOps
elem_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_add<M, E>(mut a: Elem<M, E>, b: Elem<M, E>, m: &Modulus<M>) -> Elem<M, E> {$/;"	f
elem_add_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    elem_add_impl: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:CommonOps
elem_add_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn elem_add_test(ops: &PublicScalarOps, test_file: test::File) {$/;"	f	module:tests
elem_div_by_2_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn elem_div_by_2_test($/;"	f	module:tests
elem_equals	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_equals(&self, a: &Elem<Unencoded>, b: &Elem<Unencoded>) -> bool {$/;"	P	implementation:PublicScalarOps
elem_exp_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_exp_consttime<M>($/;"	f
elem_exp_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^fn elem_exp_consttime<M, MM>($/;"	f
elem_exp_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_exp_vartime<M>($/;"	f
elem_exp_vartime_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn elem_exp_vartime_<M>(base: Elem<M, R>, exponent: u64, m: &PartialModulus<M>) -> Elem<M, R> {$/;"	f
elem_inv_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    elem_inv_squared: fn(a: &Elem<R>) -> Elem<R>,$/;"	m	struct:PrivateKeyOps
elem_inverse_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_inverse_consttime<M: Prime>($/;"	f
elem_inverse_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_inverse_squared(&self, a: &Elem<R>) -> Elem<R> { (self.elem_inv_squared)(a) }$/;"	P	implementation:PrivateKeyOps
elem_less_than	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_less_than(&self, a: &Elem<Unencoded>, b: &Elem<Unencoded>) -> bool {$/;"	P	implementation:PublicScalarOps
elem_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_mul(&self, a: &mut Elem<R>, b: &Elem<R>) {$/;"	P	implementation:CommonOps
elem_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_mul<M, AF, BF>($/;"	f
elem_mul_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn elem_mul_<M, AF, BF>($/;"	f
elem_mul_by_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn elem_mul_by_2<M, AF>(a: &mut Elem<M, AF>, m: &PartialModulus<M>) {$/;"	f
elem_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    elem_mul_mont: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:CommonOps
elem_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn elem_mul_test(ops: &CommonOps, test_file: test::File) {$/;"	f	module:tests
elem_neg_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn elem_neg_test($/;"	f	module:tests
elem_parse	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_parse(&self, input: &mut untrusted::Reader) -> Result<Elem<R>, error::Unspecifie/;"	P	implementation:PublicKeyOps
elem_parse_big_endian_fixed_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub fn elem_parse_big_endian_fixed_consttime($/;"	f
elem_product	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_product<EA: Encoding, EB: Encoding>($/;"	P	implementation:CommonOps
elem_reduced	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_reduced<Larger, Smaller: NotMuchSmallerModulus<Larger>>($/;"	f
elem_reduced_once	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_reduced_once<Larger, Smaller: SlightlySmallerModulus<Larger>>($/;"	f
elem_reduced_to_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub fn elem_reduced_to_scalar(ops: &CommonOps, elem: &Elem<Unencoded>) -> Scalar<Unencoded> {$/;"	f
elem_scalar_seed_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    pub elem_scalar_seed_len: usize,$/;"	m	struct:Curve
elem_sqr_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    elem_sqr_mont: unsafe extern "C" fn(r: *mut Limb, a: *const Limb),$/;"	m	struct:CommonOps
elem_sqr_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^fn elem_sqr_mul(ops: &CommonOps, a: &Elem<R>, squarings: usize, b: &Elem<R>) -> Elem<R> {$/;"	f
elem_sqr_mul_acc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^fn elem_sqr_mul_acc(ops: &CommonOps, acc: &mut Elem<R>, squarings: usize, b: &Elem<R>) {$/;"	f
elem_square	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_square(&self, a: &mut Elem<R>) { unary_op_assign(self.elem_sqr_mont, a); }$/;"	P	implementation:CommonOps
elem_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_squared(&self, a: &Elem<R>) -> Elem<R> { unary_op(self.elem_sqr_mont, a) }$/;"	P	implementation:CommonOps
elem_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn elem_squared<M, E>($/;"	f
elem_sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_sub<M, E>(mut a: Elem<M, E>, b: &Elem<M, E>, m: &Modulus<M>) -> Elem<M, E> {$/;"	f
elem_sub_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn elem_sub_test($/;"	f	module:tests
elem_sum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_sum(&self, a: &Elem<Unencoded>, b: &Elem<Unencoded>) -> Elem<Unencoded> {$/;"	P	implementation:PublicScalarOps
elem_unencoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_unencoded(&self, a: &Elem<R>) -> Elem<Unencoded> { self.elem_product(a, &ONE) }$/;"	P	implementation:CommonOps
elem_verify_equal_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_verify_equal_consttime<M, E>($/;"	f
elem_verify_is_not_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elem_verify_is_not_zero(&self, a: &Elem<R>) -> Result<(), error::Unspecified> {$/;"	P	implementation:CommonOps
elem_widen	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn elem_widen<Larger, Smaller: SmallerModulus<Larger>>($/;"	f
elements	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeSeq
elements	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeTuple
elems_are_equal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn elems_are_equal(&self, a: &Elem<R>, b: &Elem<R>) -> bool {$/;"	P	implementation:CommonOps
em_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    em_len: usize,$/;"	m	struct:PSSMetrics
emit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    fn emit(&self, state: &mut Opaque, nonce: &Nonce) -> Tag {$/;"	P	implementation:Funcs
emit_fn	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    emit_fn: unsafe extern "C" fn(&mut Opaque, &mut Tag, nonce: &Nonce),$/;"	m	struct:Funcs
empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn empty() -> Self { Self::from(&[]) }$/;"	P	implementation:Aad
encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^pub fn encode<I: AsRef<[u8]>>(input: I) -> encode::EncodeBuilder<'static, I> {$/;"	f
encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^pub mod encode;$/;"	n
encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn encode($/;"	P	implementation:PKCS1
encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn encode($/;"	P	implementation:PSS
encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn encode($/;"	P	interface:Encoding
encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/utf8.rs	/^pub fn encode(c: char) -> Encode {$/;"	f
encode_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^fn encode_point(x: Elem<T>, y: Elem<T>, z: Elem<T>) -> EncodedPoint {$/;"	f
encode_utf8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^fn encode_utf8(c: char) -> EncodeUtf8 {$/;"	f
encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    encoding: PhantomData<E>,$/;"	m	struct:Elem
encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^    pub encoding: PhantomData<E>,$/;"	m	struct:Elem
encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    encoding: PhantomData<E>,$/;"	m	struct:Elem
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    unsafe fn encrypt($/;"	P	implementation:Key
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs	/^	fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]);$/;"	P	interface:AeadEncryptor
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]) {$/;"	P	implementation:AesGcm
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrMode
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:CtrModeX8
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:CbcEncryptor
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	implementation:EcbEncryptor
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn encrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	P	implementation:Blowfish
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:ChaCha20
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], out_tag: &mut [u8]) {$/;"	P	implementation:ChaCha20Poly1305
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Hc128
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Rc4
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Salsa20
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Sosemanuk
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	P	implementation:Box
encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	P	interface:Encryptor
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub fn encrypt_block(&self, mut a: Block) -> Block {$/;"	P	implementation:Key
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:AesNiEncryptor
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Blowfish
encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockEncryptor
encrypt_block_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn encrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	P	interface:BlockEncryptorX8
encrypt_core	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn encrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
encrypt_eay_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_eay_test_vectors() {$/;"	f	module:test
encrypt_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    pub fn encrypt_in_place(&self, counter: Counter, in_out: &mut [u8]) {$/;"	P	implementation:Key
encrypt_iv_xor_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub fn encrypt_iv_xor_block(&self, iv: Iv, input: Block) -> Block {$/;"	P	implementation:Key
encrypt_overlapping	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    pub fn encrypt_overlapping(&self, counter: Counter, in_out: &mut [u8], in_prefix_len: usize)/;"	P	implementation:Key
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn end(self) -> Result<()> {$/;"	P	implementation:SizeCompound
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn end(self) -> Result<()> {$/;"	f
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    end: T,$/;"	m	struct:StepUp
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn end(self) -> Result<(), E> {$/;"	f
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn end(mut self) -> Result<M::Ok, M::Error> {$/;"	f	module:content
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn end(self) -> Result<Content, E> {$/;"	f	module:content
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn end(self) -> Result<(), Self::Error> {$/;"	f
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    fn end(self) -> Result<Ok, Error> {$/;"	f
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeMap
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeSeq
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStruct
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStructVariant
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTuple
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleStruct
end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleVariant
end_tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    end_tag: [u8; 16]$/;"	m	struct:AesGcm
endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    endian: EndianOption,$/;"	m	struct:Config
endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod endian;$/;"	n
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine256$/;"	m	struct:Sha224
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine256$/;"	m	struct:Sha256
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha384
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512Trunc224
engine	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    engine: Engine512$/;"	m	struct:Sha512Trunc256
entries	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        entries: Vec<(Content, Content)>,$/;"	m	struct:content::SerializeMap
entry	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn entry(table: &[Limb], i: usize, num_limbs: usize) -> &[Limb] {$/;"	f	function:elem_exp_consttime
entry_mut	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn entry_mut(table: &mut [Limb], i: usize, num_limbs: usize) -> &mut [Limb] {$/;"	f	function:elem_exp_consttime
enum_from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^fn enum_from_ast<'a>($/;"	f
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    fn eq(&self, other: &Algorithm) -> bool { self.curve.id == other.curve.id }$/;"	P	implementation:Algorithm
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn eq(&self, other: &Self) -> bool { self.id == other.id }$/;"	P	implementation:Algorithm
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn eq(&self, other: &Fe) -> bool {$/;"	P	implementation:Fe
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn eq(&self, x: &MacResult) -> bool {$/;"	P	implementation:MacResult
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn eq(&self, other: &&[u8]) -> bool {$/;"	P	implementation:Input
eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn eq(&self, other: &Input<'b>) -> bool {$/;"	P	implementation:Input
equal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn equal(b: u8, c: u8) -> i32 {$/;"	f
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    err: ErrorImpl,$/;"	m	struct:Error
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentRefDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumRefDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapRefDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqRefDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantDeserializer
err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantRefDeserializer
err_one	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn err_one(test_to_fail: usize) {$/;"	f	module:tests
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^mod error;$/;"	n
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^mod error;$/;"	n
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod error;$/;"	n
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    error: PhantomData<E>,$/;"	m	struct:MapDeserializer
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::ContentSerializer
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeMap
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeSeq
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStruct
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStructVariant
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTuple
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleStruct
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleVariant
error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    error: PhantomData<Error>,$/;"	m	struct:Impossible
error_spanned_by	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^    pub fn error_spanned_by<A: ToTokens, T: Display>(&self, obj: A, msg: T) {$/;"	P	implementation:Ctxt
errors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^    errors: RefCell<Option<Vec<syn::Error>>>,$/;"	m	struct:Ctxt
exchange	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn exchange(public_key: &[u8], private_key: &[u8]) -> [u8; 32] {$/;"	f
exists	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    fn exists(store: &mut KV<String, StoreValue>) -> bool {$/;"	P	implementation:Blockchain
expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hkdf.rs	/^pub fn expand(prk: &hmac::SigningKey, info: &[u8], out: &mut [u8]) {$/;"	f
expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> ChaChaState {$/;"	P	implementation:ChaCha20
expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> SalsaState {$/;"	P	implementation:Salsa20
expand_derive_deserialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^pub fn expand_derive_deserialize(input: &syn::DeriveInput) -> Result<TokenStream, Vec<syn::Error/;"	f
expand_derive_serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^pub fn expand_derive_serialize(input: &syn::DeriveInput) -> Result<TokenStream, Vec<syn::Error>>/;"	f
expand_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn expand_key(&mut self, key: &[u8]) {$/;"	P	implementation:Blowfish
expand_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^fn expand_key<D: Digest>(digest: &mut D, key: &[u8]) -> Vec<u8> {$/;"	f
expect_tag_and_get_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub fn expect_tag_and_get_value<'a>($/;"	f
expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        expected: Vec<u8>$/;"	m	struct:test::Test
expected_ver	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    expected_ver: Option<u8>$/;"	m	struct:DecodeBuilder
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IgnoredAny
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IpAddr::deserialize::IpAddrVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SocketAddr::deserialize::SocketAddrVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:range::Field::deserialize::FieldVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::DurationVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize_in_place
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:range
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        pub expecting: &'static str,$/;"	m	struct:range::RangeVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ArrayVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoolVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BytesVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CStringVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CharVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OsStringVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathBufVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PhantomDataVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StrVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringInPlaceVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:UnitVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Visitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::ContentVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:content
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_str::CowStrVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagContentOtherFieldVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentFieldVisitor
expecting	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::UntaggedUnitVisitor
exponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    exponent: bigint::PrivateExponent<M>,$/;"	m	struct:PrivatePrime
exponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    pub fn exponent<'a>(&'a self) -> io::Positive<'a> {$/;"	P	implementation:PublicKey
export	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^pub mod export;$/;"	n
expr_is_missing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn expr_is_missing(field: &Field, cattrs: &attr::Container) -> Fragment {$/;"	f
extract	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hkdf.rs	/^pub fn extract(salt: &hmac::SigningKey, secret: &[u8]) -> hmac::SigningKey {$/;"	f
extract_and_expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hkdf.rs	/^pub fn extract_and_expand(salt: &hmac::SigningKey, secret: &[u8], info: &[u8], out: &mut [u8]) {$/;"	f
f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    f: [u64; 2],$/;"	m	struct:Blake2b
f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    f: [u32; 2],$/;"	m	struct:Blake2s
f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn f(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
f1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^fn f1(x: u32) -> u32 {$/;"	f
f2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^fn f2(x: u32) -> u32 {$/;"	f
fake	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^mod fake {$/;"	n
fanout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fanout: u8,$/;"	m	struct:Blake2bParam
fanout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fanout: u8,$/;"	m	struct:Blake2sParam
fast_mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn fast_mode<R: ReadBuffer, W: WriteBuffer>($/;"	P	implementation:BlockEngine
features	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^pub(crate) fn features() -> Features {$/;"	f
ffmulx	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn ffmulx(x: u32) -> u32 {$/;"	f
field_i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn field_i(i: usize) -> Ident {$/;"	f
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fields: &'static [&'static str],$/;"	m	struct:FlatStructAccess
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStruct
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariant
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariantAsMapValue
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleStruct
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariant
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fields: Vec<(&'static str, Content)>,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub fields: Vec<Field<'a>>,$/;"	m	struct:Variant
fields_from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^fn fields_from_ast<'a>($/;"	f
file_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    pub file_name: &'a str,$/;"	m	struct:File
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^    pub fn fill(dest: &mut [u8], value: u8) {$/;"	f	module:slice
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> { fill_impl(dest) }$/;"	P	implementation:SystemRandom
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified>;$/;"	P	interface:SecureRandom
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:darwin
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:fuchsia
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:sysrand
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:sysrand_or_urandom
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn fill(dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	f	module:urandom
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:rand::FixedByteRandom
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:rand::FixedSliceRandom
fill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^        fn fill(&self, dest: &mut [u8]) -> Result<(), error::Unspecified> {$/;"	P	implementation:rand::FixedSliceSequenceRandom
fill_be_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn fill_be_bytes(&self, out: &mut [u8]) {$/;"	P	implementation:Elem
fill_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn fill_buffer(&mut self, length: usize) -> Result<()> {$/;"	f
fill_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	P	implementation:Fortuna
finalize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	P	implementation:Blake2b
finalize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	P	implementation:Blake2s
finalize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn finalize(&mut self) {$/;"	P	implementation:Sha3
finalized	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    finalized : bool,$/;"	m	struct:Poly1305
finalized	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    finalized: bool,$/;"	m	struct:Whirlpool
find_spendable_outputs	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn find_spendable_outputs($/;"	P	implementation:Blockchain
find_unspent_transactions	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn find_unspent_transactions(&mut self, address: &str) -> Vec<Transaction> {$/;"	P	implementation:Blockchain
find_utxo	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn find_utxo(&mut self, address: &str) -> Vec<TXOutput> {$/;"	P	implementation:Blockchain
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    pub(super) fn finish(mut self) -> Tag { self.func.emit(&mut self.opaque, &self.nonce) }$/;"	P	implementation:Context
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub fn finish(mut self) -> Digest {$/;"	P	implementation:Context
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Poly1305
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Engine256
finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	P	implementation:Engine512
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    finished: bool,$/;"	m	struct:AesGcm
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    finished: bool,$/;"	m	struct:ChaCha20Poly1305
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    finished: bool$/;"	m	struct:Ghash
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    finished: bool$/;"	m	struct:Hmac
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    finished: bool,$/;"	m	struct:Md5
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    finished: bool,$/;"	m	struct:Engine256
finished	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    finished: bool,$/;"	m	struct:Engine512
first_byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^    pub fn first_byte(&self) -> u8 {$/;"	P	implementation:Positive
first_dup_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    first_dup_tokens: TokenStream,$/;"	m	struct:VecAttr
first_err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn first_err() { err_one(0) }$/;"	f	module:tests
first_panic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn first_panic() { panic_one(0) }$/;"	f	module:tests
fixed_time_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn fixed_time_eq(lhs: &[u8], rhs: &[u8]) -> bool {$/;"	f
flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    flatten: bool,$/;"	m	struct:Field
flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn flatten(&self) -> bool {$/;"	P	implementation:Field
flush	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn flush(&mut self) {$/;"	P	implementation:Ghash
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ErrorKind
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:DecodeError
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:HexStr
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {$/;"	P	implementation:Digest
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:EdDSAParameters
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {$/;"	P	implementation:KeyRejected
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {$/;"	P	implementation:Unspecified
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:SigningContext
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:SigningKey
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter) -> Result<(), core::fmt::Error> {$/;"	P	implementation:VerificationKey
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn fmt(&self, fmt: &mut ::core::fmt::Formatter) -> Result<(), ::core::fmt::Error> {$/;"	P	implementation:Modulus
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Unexpected
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OneOf
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:a
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:str
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Expected
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Error
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInMap
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInSeq
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Unsupported
fold_5_bit_windows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn fold_5_bit_windows<R, I: FnOnce(Window) -> R, F: Fn(R, Window) -> R>($/;"	f
for_flt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn for_flt(p: &Modulus<M>) -> Self {$/;"	P	implementation:PrivateExponent
format_integer_tlv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn format_integer_tlv(ops: &ScalarOps, a: &Scalar, out: &mut [u8]) -> usize {$/;"	f	function:format_rs_asn1
format_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    format_output: fn(input: State) -> Output,$/;"	m	struct:Algorithm
format_rs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    format_rs:$/;"	m	struct:Algorithm
format_rs_asn1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^fn format_rs_asn1<'a>(ops: &'static ScalarOps, r: &Scalar, s: &Scalar, out: &'a mut [u8]) -> usi/;"	f
format_rs_fixed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^fn format_rs_fixed<'a>($/;"	f
fortuna	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod fortuna;$/;"	n
fortuna_new_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_1k(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_32(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64(bh: &mut Bencher) {$/;"	f	module:bench
fortuna_new_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64k(bh: &mut Bencher) {$/;"	f	module:bench
forward_read_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn forward_read_bytes<V>(&mut self, length: usize, visitor: V) -> Result<V::Value>$/;"	P	implementation:SliceReader
forward_read_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn forward_read_bytes<V>(&mut self, length: usize, visitor: V) -> Result<V::Value>$/;"	P	interface:BincodeRead
forward_read_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn forward_read_bytes<V>(&mut self, length: usize, visitor: V) -> Result<V::Value>$/;"	f
forward_read_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn forward_read_str<V>(&mut self, length: usize, visitor: V) -> Result<V::Value>$/;"	P	implementation:SliceReader
forward_read_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn forward_read_str<V>(&mut self, length: usize, visitor: V) -> Result<V::Value>$/;"	P	interface:BincodeRead
forward_read_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn forward_read_str<V>(&mut self, length: usize, visitor: V) -> Result<V::Value>$/;"	f
forward_to_deserialize_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/macros.rs	/^macro_rules! forward_to_deserialize_any {$/;"	M
forward_to_deserialize_any_helper	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/macros.rs	/^macro_rules! forward_to_deserialize_any_helper {$/;"	M
forward_to_deserialize_any_method	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/macros.rs	/^macro_rules! forward_to_deserialize_any_method {$/;"	M
forward_to_deserialize_other	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^macro_rules! forward_to_deserialize_other {$/;"	M
forwarded_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! forwarded_impl {$/;"	M
fragment	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod fragment;$/;"	n
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/error.rs	/^    fn from(err: io::Error) -> Error {$/;"	P	implementation:Error
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn from(aad: &'a [u8]) -> Self { Aad(aad) }$/;"	P	implementation:Aad
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    fn from(ZeroMeansSuccess(value): ZeroMeansSuccess) -> Self {$/;"	P	implementation:Result
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    fn from(counter: Counter<U32>) -> Self { Iv(unsafe { counter.block }) }$/;"	f
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^    fn from(ret: Result) -> Self {$/;"	P	implementation:Result
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn from(_: KeyRejected) -> Self { Unspecified }$/;"	P	implementation:Unspecified
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn from(_: TryFromSliceError) -> Self { Unspecified }$/;"	P	implementation:Unspecified
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    fn from(_: untrusted::EndOfInput) -> Self { Unspecified }$/;"	P	implementation:Unspecified
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    fn from(tag: Tag) -> Self { tag as usize }$/;"	P	implementation:usize
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn from(n0: u64) -> Self {$/;"	P	implementation:N0
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn from(self) -> Self::Deserializer {$/;"	f
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn from(self) -> Self::Deserializer;$/;"	P	interface:IdentifierDeserializer
from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn from(bytes: &'a [u8]) -> Input<'a> {$/;"	P	implementation:Input
from_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    fn from_(value: F) -> Self;$/;"	P	interface:From_
from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub fn from_ast($/;"	P	implementation:Container
from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn from_ast($/;"	P	implementation:Field
from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, item: &syn::DeriveInput) -> Self {$/;"	P	implementation:Container
from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, variant: &syn::Variant) -> Self {$/;"	P	implementation:Variant
from_attrs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn from_attrs($/;"	P	implementation:Name
from_base58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^    fn from_base58(&self) -> Result<Vec<u8>, DecodeError> {$/;"	P	implementation:str
from_base58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^    fn from_base58(&self) -> Result<Vec<u8>, DecodeError>;$/;"	P	interface:FromBase58
from_be_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn from_be_bytes($/;"	P	implementation:PublicExponent
from_be_bytes_padded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn from_be_bytes_padded($/;"	P	implementation:Elem
from_be_bytes_padded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn from_be_bytes_padded($/;"	P	implementation:PrivateExponent
from_be_bytes_padded_less_than	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn from_be_bytes_padded_less_than($/;"	P	implementation:BoxedLimbs
from_be_bytes_with_bit_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn from_be_bytes_with_bit_length($/;"	P	implementation:Modulus
from_be_bytes_with_bit_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn from_be_bytes_with_bit_length($/;"	P	implementation:Nonnegative
from_bounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pub fn from_bounds<I>(iter: &I) -> Option<usize>$/;"	f	module:size_hint
from_boxed_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn from_boxed_limbs(n: BoxedLimbs<M>) -> Result<(Self, bits::BitLength), error::KeyRejected>/;"	P	implementation:Modulus
from_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub(crate) fn from_bytes($/;"	P	implementation:Seed
from_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes(s: &[u8]) -> Fe {$/;"	P	implementation:Fe
from_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn from_bytes(bytes: &[u8]) -> Gf128 {$/;"	P	implementation:Gf128
from_bytes_negate_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes_negate_vartime(s: &[u8]) -> Option<GeP3> {$/;"	P	implementation:GeP3
from_der	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    pub fn from_der(input: untrusted::Input) -> Result<Self, KeyRejected> {$/;"	P	implementation:KeyPair
from_der_reader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    fn from_der_reader(input: &mut untrusted::Reader) -> Result<Self, KeyRejected> {$/;"	P	implementation:KeyPair
from_encoded_point_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    pub fn from_encoded_point_vartime(encoded: &EncodedPoint) -> Result<Self, error::Unspecified/;"	P	implementation:ExtPoint
from_hex	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn from_hex(hex_str: &str) -> Result<Vec<u8>, String> {$/;"	f
from_hex_digit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^fn from_hex_digit(d: u8) -> Result<u8, String> {$/;"	f
from_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_i16(n: i16) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_i32(n: i32) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_i64(n: i64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_i8(n: i8) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    pub fn from_key(Key(key_and_nonce): Key) -> Context {$/;"	P	implementation:Context
from_modulus_and_exponent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^    pub fn from_modulus_and_exponent($/;"	P	implementation:Key
from_n_and_e	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    fn from_n_and_e(n: io::Positive, e: io::Positive) -> Self {$/;"	P	implementation:PublicKey
from_nonnegative_with_bit_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn from_nonnegative_with_bit_length($/;"	P	implementation:Modulus
from_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_pkcs8(input: untrusted::Input) -> Result<Self, error::KeyRejected> {$/;"	P	implementation:KeyPair
from_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn from_pkcs8($/;"	P	implementation:KeyPair
from_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    pub fn from_pkcs8(input: untrusted::Input) -> Result<Self, KeyRejected> {$/;"	P	implementation:KeyPair
from_pkcs8_maybe_unchecked	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_pkcs8_maybe_unchecked(input: untrusted::Input) -> Result<Self, error::KeyRejecte/;"	P	implementation:KeyPair
from_primitive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^mod from_primitive;$/;"	n
from_private_key_and_public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn from_private_key_and_public_key($/;"	P	implementation:KeyPair
from_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn from_seed(seed: &'a [u8]) -> Fortuna {$/;"	P	implementation:Fortuna
from_seed_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    fn from_seed_(seed: &Seed) -> Self {$/;"	P	implementation:KeyPair
from_seed_and_public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_seed_and_public_key($/;"	P	implementation:KeyPair
from_seed_unchecked	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    pub fn from_seed_unchecked(seed: untrusted::Input) -> Result<Self, error::KeyRejected> {$/;"	P	implementation:KeyPair
from_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^    fn from_str(rename_all_str: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:RenameRule
from_test_vector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn from_test_vector(nonce: &[u8], initial_counter: u32) -> Self {$/;"	f
from_to_bytes_preserves	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn from_to_bytes_preserves() {$/;"	f	module:tests
from_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_u16(n: u16) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_u32(n: u32) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_u64(n: u64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    pub fn from_u64_be(first: BigEndian<u64>, second: BigEndian<u64>) -> Self {$/;"	P	implementation:Block
from_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    pub fn from_u64_le(first: LittleEndian<u64>, second: LittleEndian<u64>) -> Self {$/;"	P	implementation:Block
from_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^    fn from_u8(n: u8) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_usize_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^    pub const fn from_usize_bits(bits: usize) -> BitLength { BitLength(bits) }$/;"	P	implementation:BitLength
from_usize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^    pub fn from_usize_bytes(bytes: usize) -> Result<BitLength, error::Unspecified> {$/;"	P	implementation:BitLength
from_utf8_lossy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/export.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> &str {$/;"	f	module:string
from_utf8_lossy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/export.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> Cow<str> {$/;"	f	module:string
fsm_r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fsm_r: [u32; 2],$/;"	m	struct:Sosemanuk
fuchsia	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod fuchsia {$/;"	n
fuchsia_setup	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    pub fn fuchsia_setup() {$/;"	f	module:arm
full_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn full_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	P	interface:FixedBuffer
func	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    func: Funcs,$/;"	m	struct:Context
g	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn g(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
gather	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn gather(table: &[Limb], state: &mut [Limb], i: Window, num_limbs: usize) {$/;"	f	function:elem_exp_consttime
gather	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn gather<M>(table: &[Limb], i: Window, r: &mut Elem<M, R>) {$/;"	f	function:elem_exp_consttime
gather_mul_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn gather_mul_base(table: &[Limb], state: &mut [Limb], n0: &N0, i: Window, num_limbs: usize)/;"	f	function:elem_exp_consttime
gather_square	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn gather_square(table: &[Limb], state: &mut [Limb], n0: &N0, i: Window, num_limbs: usize) {$/;"	f	function:elem_exp_consttime
gcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod gcm;$/;"	n
gcm_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^    gcm_key: gcm::Key, \/\/ First because it has a large alignment requirement.$/;"	m	struct:Key
ge_scalarmult_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn ge_scalarmult_base(a: &[u8]) -> GeP3 {$/;"	f
generate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    pub fn generate($/;"	P	implementation:EphemeralPrivateKey
generate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub(crate) fn generate($/;"	P	implementation:Seed
generate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn generate($/;"	P	implementation:SigningKey
generate_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_blocks(&mut self, k: usize, out: &mut [u8]) {$/;"	P	implementation:FortunaGenerator
generate_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    pub fn generate_pkcs8(rng: &rand::SecureRandom) -> Result<pkcs8::Document, error::Unspecifie/;"	P	implementation:KeyPair
generate_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn generate_pkcs8($/;"	P	implementation:KeyPair
generate_private_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    generate_private_key: fn(rng: &rand::SecureRandom, &mut [u8]) -> Result<(), error::Unspecifi/;"	m	struct:Curve
generate_private_scalar_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn generate_private_scalar_bytes($/;"	f
generate_random_data	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_random_data(&mut self, out: &mut [u8]) {$/;"	P	implementation:FortunaGenerator
generate_serializable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn generate_serializable($/;"	P	implementation:SigningKey
generate_serializable_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn generate_serializable_tests() {$/;"	f	module:tests
generator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    generator: FortunaGenerator,$/;"	m	struct:Fortuna
generics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
generics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub generics: &'a syn::Generics,$/;"	m	struct:Container
generics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn get(&self) -> bool {$/;"	P	implementation:BoolAttr
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn get(self) -> Option<T> {$/;"	P	implementation:Attr
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn get(self) -> Vec<T> {$/;"	P	implementation:VecAttr
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    pub fn get(&mut self, key: &K) -> Result<Option<V>, KVError> {$/;"	f
get	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn get(&self, i: usize) -> Option<&u8> { self.bytes.get(i) }$/;"	P	implementation:no_panic::Slice
get_address	/home/lieroz/blockchain_rust/src/wallet.rs	/^    pub fn get_address(&self) -> String {$/;"	P	implementation:Wallet
get_addresses	/home/lieroz/blockchain_rust/src/wallets.rs	/^    pub fn get_addresses(&self) -> Vec<String> {$/;"	P	implementation:Wallets
get_balance	/home/lieroz/blockchain_rust/src/cli.rs	/^    fn get_balance(&self, address: &str) {$/;"	P	implementation:CLI
get_byte_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn get_byte_buffer(&mut self, length: usize) -> Result<Vec<u8>> {$/;"	P	implementation:SliceReader
get_byte_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn get_byte_buffer(&mut self, length: usize) -> Result<Vec<u8>> {$/;"	f
get_byte_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn get_byte_buffer(&mut self, length: usize) -> Result<Vec<u8>>;$/;"	P	interface:BincodeRead
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CbcTest
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CtrTest
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::EcbTest
get_cipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8];$/;"	P	interface:test::CipherTest
get_input_between_marks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn get_input_between_marks(&self, mark1: Mark, mark2: Mark)$/;"	P	implementation:Reader
get_lit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn get_lit_str<'a>($/;"	f
get_member	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn get_member(params: &Parameters, field: &Field, member: &Member) -> TokenStream {$/;"	f
get_multiple_renames	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn get_multiple_renames<'a>($/;"	f
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CbcTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::CtrTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	P	implementation:test::EcbTest
get_plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8];$/;"	P	interface:test::CipherTest
get_renames	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn get_renames<'a>($/;"	f
get_ser_and_de	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn get_ser_and_de<'a, 'b, T, F>($/;"	f
get_serde_meta_items	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^pub fn get_serde_meta_items(attr: &syn::Attribute) -> Option<Vec<syn::NestedMeta>> {$/;"	f
get_slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn get_slice(&self, r: core::ops::Range<usize>)$/;"	P	implementation:no_panic::Slice
get_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn get_test_vectors()-> [TestVector; 5]{$/;"	f	module:test
get_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn get_test_vectors()-> Vec<TestVector>{$/;"	f	module:test
get_wallet	/home/lieroz/blockchain_rust/src/wallets.rs	/^    pub fn get_wallet(&self, address: &str) -> &Wallet {$/;"	P	implementation:Wallets
get_where_predicates	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn get_where_predicates($/;"	f
get_with_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn get_with_tokens(self) -> Option<(TokenStream, T)> {$/;"	P	implementation:Attr
getauxval	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^            fn getauxval(type_: libc::c_ulong) -> libc::c_ulong;$/;"	f	function:arm::linux_setup
getter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    getter: Option<syn::ExprPath>,$/;"	m	struct:Field
getter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn getter(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
ghash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ghash;$/;"	n
ghash_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_10(bh: & mut Bencher) {$/;"	f	module:bench
ghash_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_1k(bh: & mut Bencher) {$/;"	f	module:bench
ghash_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_64k(bh: & mut Bencher) {$/;"	f	module:bench
greater_than	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn greater_than(a: &Nonnegative, b: &Nonnegative) -> bool {$/;"	f
gsm_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_10(bh: & mut Bencher) {$/;"	f	module:bench
gsm_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_1k(bh: & mut Bencher) {$/;"	f	module:bench
gsm_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_64k(bh: & mut Bencher) {$/;"	f	module:bench
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    h: [u64; 8],$/;"	m	struct:Blake2b
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    h: [u32; 8],$/;"	m	struct:Blake2s
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn h(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    h         : [u32; 5],$/;"	m	struct:Poly1305
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    h: [u32; DIGEST_BUF_LEN],$/;"	m	struct:Ripemd160
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    h: [u32; STATE_LEN],$/;"	m	struct:Sha1
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    h: [u32; 8],$/;"	m	struct:Engine256State
h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    h: [u64; 8]$/;"	m	struct:Engine512State
h_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    h_len: usize,$/;"	m	struct:PSSMetrics
half_rounded_up	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^    pub fn half_rounded_up(&self) -> BitLength {$/;"	P	implementation:BitLength
has_avx_movbe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^fn has_avx_movbe(cpu_features: cpu::Features) -> bool {$/;"	f
has_flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    has_flatten: bool,$/;"	m	struct:Container
has_flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn has_flatten(&self) -> bool {$/;"	P	implementation:Container
has_getter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    has_getter: bool,$/;"	m	struct:Parameters
has_getter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub fn has_getter(&self) -> bool {$/;"	P	implementation:Data
has_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn has_next<R: ReadBuffer, W: WriteBuffer>($/;"	f	method:BlockEngine::fast_mode
hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn hash() {$/;"	f	module:test
hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hash(&mut self) {$/;"	P	implementation:Salsa20
hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    hash: [u64; 8],$/;"	m	struct:Whirlpool
hash	/home/lieroz/blockchain_rust/src/block.rs	/^    hash: String,$/;"	m	struct:Block
hash	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn hash(&self) -> &str {$/;"	P	implementation:Block
hash_pub_key	/home/lieroz/blockchain_rust/src/wallet.rs	/^    pub fn hash_pub_key(pub_key: &[u8]) -> Vec<u8> {$/;"	P	implementation:Wallet
hash_transactions	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn hash_transactions(&self) -> String {$/;"	P	implementation:Block
hc128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hc128;$/;"	n
hc128_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_10(bh: & mut Bencher) {$/;"	f	module:bench
hc128_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_1k(bh: & mut Bencher) {$/;"	f	module:bench
hc128_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_64k(bh: & mut Bencher) {$/;"	f	module:bench
hchacha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn hchacha20(&mut self, out: &mut [u8]) -> () {$/;"	P	implementation:ChaCha20
helper	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn helper(bounds: (usize, Option<usize>)) -> Option<usize> {$/;"	f	module:size_hint
hex_to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn hex_to_bytes(raw_hex: &str) -> Vec<u8> {$/;"	f	module:test
hi	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    hi: u64,$/;"	m	struct:u128
hkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod hkdf;$/;"	n
hkdf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hkdf;$/;"	n
hkdf_expand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_expand<D: Digest>(mut digest: D, prk: &[u8], info: &[u8], okm: &mut [u8]) {$/;"	f
hkdf_extract	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_extract<D: Digest>(mut digest: D, salt: &[u8], ikm: &[u8], prk: &mut [u8]) {$/;"	f
hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod hmac;$/;"	n
hmac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod hmac;$/;"	n
hmac_signing_key_coverage	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn hmac_signing_key_coverage() {$/;"	f	module:tests
hpass	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            hpass: [u8; 64],$/;"	m	struct:test::test_bcrypt_hash::Test
hs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    hs: [Gf128; 128],$/;"	m	struct:Ghash
hs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    hs: [Gf128; 128],$/;"	m	struct:GhashWithC
hsalsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^pub fn hsalsa20(key: &[u8], nonce: &[u8], out: &mut [u8]) {$/;"	f
hsalsa20_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hsalsa20_hash(&mut self, out: &mut [u8]) {$/;"	P	implementation:Salsa20
hsalt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            hsalt: [u8; 64],$/;"	m	struct:test::test_bcrypt_hash::Test
i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn i(u: u32, v: u32, w: u32) -> u32 {$/;"	f	method:Md5State::process_block
i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    i: u8,$/;"	m	struct:Rc4
i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    i: usize$/;"	m	struct:Mark
i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    i: usize$/;"	m	struct:Reader
i_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    i_key: Vec<u8>,$/;"	m	struct:Hmac
id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    pub id: CurveID,$/;"	m	struct:Curve
id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    id: AlgorithmID,$/;"	m	struct:Algorithm
id	/home/lieroz/blockchain_rust/src/transaction.rs	/^    id: String,$/;"	m	struct:Transaction
id	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn id(&self) -> &str {$/;"	P	implementation:Transaction
ident	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Container
ident	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Variant
identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    identifier: Identifier,$/;"	m	struct:Container
identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn identifier(&self) -> Identifier {$/;"	P	implementation:Container
ignored_any	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^mod ignored_any;$/;"	n
ikm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        ikm: Vec<u8>,$/;"	m	struct:test::TestVector
impl_array_split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^macro_rules! impl_array_split {$/;"	M
impl_array_try_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^macro_rules! impl_array_try_from {$/;"	M
impl_copy_clone	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^macro_rules! impl_copy_clone {$/;"	M
impl_deserialize_num	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! impl_deserialize_num {$/;"	M
impl_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/endian.rs	/^macro_rules! impl_endian {$/;"	M
impl_fixed_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^macro_rules! impl_fixed_buffer( ($name:ident, $size:expr) => ($/;"	M
impl_from_primitive_for_float	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_float {$/;"	M
impl_from_primitive_for_int	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_int {$/;"	M
impl_from_primitive_for_uint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_uint {$/;"	M
impl_nums	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^macro_rules! impl_nums {$/;"	M
impls	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^mod impls;$/;"	n
impls	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^mod impls;$/;"	n
impossible	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^mod impossible;$/;"	n
in_hist	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    in_hist: Vec<u8>,$/;"	m	struct:BlockEngine
in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn in_place(self) -> InPlaceImplGenerics<'a> {$/;"	P	implementation:DeImplGenerics
in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn in_place(self) -> InPlaceTypeGenerics<'a> {$/;"	P	implementation:DeTypeGenerics
in_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    in_scratch: OwnedWriteBuffer,$/;"	m	struct:BlockEngine
inconsistent_components	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn inconsistent_components() -> Self { KeyRejected("InconsistentComponents") }$/;"	P	implementation:KeyRejected
increment	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn increment(&mut self) -> Iv {$/;"	f
increment_by_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn increment_by_less_safe(&mut self, increment_by: u32) {$/;"	f
increment_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn increment_counter(&mut self, inc : u64) {$/;"	P	implementation:Blake2b
increment_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn increment_counter(&mut self, inc : u32) {$/;"	P	implementation:Blake2s
increment_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn increment_counter(&mut self) {$/;"	P	implementation:FortunaGenerator
info	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        info: Vec<u8>,$/;"	m	struct:test::TestVector
init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    init: fn(key: &[u8], cpu_features: cpu::Features) -> Result<KeyInner, error::Unspecified>,$/;"	m	struct:Algorithm
init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn init($/;"	f
init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^fn init(state: &mut Opaque, key: DerivedKey, func: &mut Funcs) -> Result<(), error::Unspecified>/;"	f
init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    init: fn(key: &[u8], cpu_features: cpu::Features) -> Result<KeyInner, error::Unspecified>,$/;"	m	struct:Algorithm
init	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn init(&mut self, key : &[u8], nonce : &[u8]) {$/;"	P	implementation:Hc128
init0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init0(param: Blake2bParam, digest_length: u8, key: &[u8]) -> Blake2b {$/;"	P	implementation:Blake2b
init0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init0(param: Blake2sParam, digest_length: u8, key: &[u8]) -> Blake2s {$/;"	P	implementation:Blake2s
init_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn init_128(key: &[u8], cpu_features: cpu::Features) -> Result<aead::KeyInner, error::Unspecifie/;"	f
init_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn init_256(key: &[u8], cpu_features: cpu::Features) -> Result<aead::KeyInner, error::Unspecifie/;"	f
init_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init_param( p: Blake2bParam, key: &[u8] ) -> Blake2b {$/;"	P	implementation:Blake2b
init_param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init_param( p: Blake2sParam, key: &[u8] ) -> Blake2s {$/;"	P	implementation:Blake2s
init_state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn init_state() -> Blowfish {$/;"	P	implementation:Blowfish
initial_state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    initial_state: State,$/;"	m	struct:Algorithm
inner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    inner: KeyInner,$/;"	m	struct:Key
inner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    inner: AES_KEY,$/;"	m	struct:Key
inner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    inner: GCM128_CONTEXT,$/;"	m	struct:Context
inner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    inner: KeyInner,$/;"	m	struct:HeaderProtectionKey
inner	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    inner: digest::Context,$/;"	m	struct:SigningContext
inner_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    inner_length: u8,$/;"	m	struct:Blake2bParam
inner_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    inner_length: u8,$/;"	m	struct:Blake2sParam
inner_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub(super) fn inner_less_safe(&self) -> &AES_KEY { &self.inner }$/;"	P	implementation:Key
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    input: I,$/;"	m	struct:DecodeBuilder
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    input: I,$/;"	m	struct:EncodeBuilder
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        input: Vec<u8>,$/;"	m	struct:test::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        input: Vec<u8>,$/;"	m	struct:digest_tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Blake2b
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	P	implementation:Blake2b
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        input: Vec<u8>,$/;"	m	struct:digest_tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Blake2s
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	P	implementation:Blake2s
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn input<F: FnMut(&[u8])>(&mut self, input: &[u8], func: F);$/;"	P	interface:FixedBuffer
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn input(&mut self, input: &[u8]);$/;"	P	interface:Digest
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Pool
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Ghash
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Hmac
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn input(&mut self, data: &[u8]);$/;"	P	interface:Mac
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Md5
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Poly1305
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        input: &'static str,$/;"	m	struct:test::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn input(&mut self, msg: &[u8]) {$/;"	P	implementation:Ripemd160
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn input(&mut self, msg: &[u8]) { add_input(self, msg); }$/;"	P	implementation:Sha1
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha224
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha256
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha384
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512Trunc224
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	P	implementation:Sha512Trunc256
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Engine256
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	P	implementation:Engine512
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        input: &'static str,$/;"	m	struct:tests::Test
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	P	implementation:Sha3
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn input(&mut self, source: &[u8]) {$/;"	P	implementation:Whirlpool
input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    input: no_panic::Slice<'a>,$/;"	m	struct:Reader
input_a	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_a(mut self, a: &[u8]) -> Ghash {$/;"	P	implementation:Ghash
input_c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	P	implementation:Ghash
input_c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	P	implementation:GhashWithC
input_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn input_str(&mut self, input: &str) {$/;"	P	interface:Digest
insert	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn insert<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:VecAttr
insert	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    pub fn insert(&mut self, key: K, value: V) -> KVResult {$/;"	f
int_to_int	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^macro_rules! int_to_int {$/;"	M
int_to_uint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^macro_rules! int_to_uint {$/;"	M
integer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^mod integer128;$/;"	n
integerify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn integerify(x: &[u8], n: usize) -> usize {$/;"	f	function:scrypt_ro_mix
integrated_aes_gcm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^fn integrated_aes_gcm<'a>($/;"	f
intel	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^pub(crate) mod intel {$/;"	n
internal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^mod internal;$/;"	n
internal_benches	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^mod internal_benches {$/;"	n
internal_benches	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^mod internal_benches {$/;"	n
internal_benches	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^mod internal_benches {$/;"	n
internals	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod internals;$/;"	n
into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    pub fn into<O: AsMut<[u8]>>(self, mut output: O) -> Result<usize, DecodeError> {$/;"	P	implementation:DecodeBuilder
into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    pub fn into(self, output: &mut String) {$/;"	P	implementation:EncodeBuilder
into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn into(self) -> Box<[u8]> {$/;"	P	implementation:Writer
into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn into(self) -> usize { self.len }$/;"	P	implementation:LengthMeasurement
into_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    fn into_(self) -> T { T::from_(self) }$/;"	f
into_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    fn into_(self) -> T;$/;"	P	interface:Into_
into_block_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn into_block_less_safe(self) -> Block { self.0 }$/;"	P	implementation:Iv
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn into_deserializer(self) -> Self::Deserializer;$/;"	P	interface:IntoDeserializer
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn into_deserializer(self) -> CowStrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn into_deserializer(self) -> Self::Deserializer {$/;"	f
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn into_deserializer(self) -> StrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn into_deserializer(self) -> StringDeserializer<E> {$/;"	f
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn into_deserializer(self) -> U32Deserializer<E> {$/;"	f
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn into_deserializer(self) -> UnitDeserializer<E> {$/;"	f
into_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn into_deserializer(self) -> Self {$/;"	f	module:content
into_encoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn into_encoded<M>(a: Elem<M, Unencoded>, m: &Modulus<M>) -> Elem<M, R> {$/;"	f	module:tests
into_encoded_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    pub fn into_encoded_point(self) -> EncodedPoint { encode_point(self.x, self.y, self.z) }$/;"	P	implementation:ExtPoint
into_encoded_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    pub fn into_encoded_point(self) -> EncodedPoint { encode_point(self.x, self.y, self.z) }$/;"	P	implementation:Point
into_modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn into_modulus<MM>(self) -> Result<Modulus<MM>, error::KeyRejected> {$/;"	P	implementation:Elem
into_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_read_buffer(self) -> OwnedReadBuffer {$/;"	P	implementation:OwnedWriteBuffer
into_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    pub fn into_string(self) -> String {$/;"	P	implementation:EncodeBuilder
into_unencoded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn into_unencoded(self, m: &Modulus<M>) -> Elem<M, Unencoded> { self.decode_once(m) }$/;"	P	implementation:Elem
into_vec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    pub fn into_vec(self) -> Result<Vec<u8>, DecodeError> {$/;"	P	implementation:DecodeBuilder
into_write_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_write_buffer(self) -> OwnedWriteBuffer {$/;"	P	implementation:OwnedReadBuffer
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Self;$/;"	P	interface:Gf8Ops
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs4State<T> {$/;"	P	implementation:Bs4State
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	P	interface:Gf2Ops
inv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	P	interface:Gf4Ops
inv_mcol	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn inv_mcol(x: u32) -> u32 {$/;"	f
inv_mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Self;$/;"	P	interface:AesOps
inv_shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> Self;$/;"	P	interface:AesBitValueOps
inv_shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u16 {$/;"	P	implementation:u16
inv_shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u32x4 {$/;"	P	implementation:u32x4
inv_shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Self;$/;"	P	interface:AesOps
inv_sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
inv_sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Self;$/;"	P	interface:AesOps
invalid_component	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn invalid_component() -> Self { KeyRejected("InvalidComponent") }$/;"	P	implementation:KeyRejected
invalid_encoding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn invalid_encoding() -> Self { KeyRejected("InvalidEncoding") }$/;"	P	implementation:KeyRejected
invalid_type	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn invalid_type(self, exp: &Expected) -> E {$/;"	f	module:content
invert	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn invert(&self) -> Fe {$/;"	P	implementation:Fe
invert_inverts	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn invert_inverts() {$/;"	f	module:tests
invert_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    pub fn invert_vartime(&mut self) {$/;"	P	implementation:ExtPoint
io	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod io;$/;"	n
ios	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        ios: bool,$/;"	m	struct:arm::Feature
is_aes_hw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub fn is_aes_hw(&self) -> bool {$/;"	P	implementation:Key
is_avx2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    pub(super) fn is_avx2(&self, cpu_features: cpu::Features) -> bool {$/;"	P	implementation:Context
is_coinbase	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn is_coinbase(&self) -> bool {$/;"	P	implementation:Transaction
is_cow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_cow(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:BorrowedWriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:OwnedWriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	P	implementation:RefWriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.buff.len() }$/;"	P	implementation:RefReadBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.len }$/;"	P	implementation:OwnedReadBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	P	interface:ReadBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	P	interface:WriteBuffer
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn is_empty(&self) -> bool { self.bytes.is_empty() }$/;"	P	implementation:no_panic::Slice
is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn is_empty(&self) -> bool { self.value.is_empty() }$/;"	P	implementation:Input
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	P	implementation:OwnedReadBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	P	implementation:RefReadBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:BorrowedWriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:OwnedWriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	P	implementation:RefWriteBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	P	interface:ReadBuffer
is_full	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	P	interface:WriteBuffer
is_human_readable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	f
is_human_readable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	implementation:Serializer
is_human_readable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	implementation:SizeChecker
is_human_readable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Deserializer
is_human_readable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Serializer
is_implicitly_borrowed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_implicitly_borrowed(ty: &syn::Type) -> bool {$/;"	f
is_implicitly_borrowed_reference	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_implicitly_borrowed_reference(ty: &syn::Type) -> bool {$/;"	f
is_keccak	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_keccak(&self) -> bool {$/;"	P	implementation:Sha3Mode
is_locked_with_key	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn is_locked_with_key(&self, pub_key_hash: &[u8]) -> bool {$/;"	P	implementation:TXOutput
is_negative	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_negative(&self) -> bool {$/;"	P	implementation:Fe
is_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn is_none(&self) -> bool {$/;"	P	implementation:Default
is_nonzero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_nonzero(&self) -> bool {$/;"	P	implementation:Fe
is_odd	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn is_odd(&self) -> bool {$/;"	P	implementation:Nonnegative
is_one	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn is_one(&self) -> bool {$/;"	P	implementation:Elem
is_option	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_option(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_primitive_path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_primitive_path(path: &syn::Path, primitive: &str) -> bool {$/;"	f
is_primitive_type	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_primitive_type(ty: &syn::Type, primitive: &str) -> bool {$/;"	f
is_reference	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_reference(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_remote	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    is_remote: bool,$/;"	m	struct:Parameters
is_shake	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_shake(&self) -> bool {$/;"	P	implementation:Sha3Mode
is_slice_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_slice_u8(ty: &syn::Type) -> bool {$/;"	f
is_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn is_some(self) -> bool {$/;"	P	implementation:Identifier
is_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn is_str(ty: &syn::Type) -> bool {$/;"	f
is_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn is_unit(variant: &Variant) -> bool {$/;"	f	function:deserialize_adjacently_tagged_enum
is_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn is_zero<M, E: Encoding>(&self, a: &elem::Elem<M, E>) -> bool {$/;"	P	implementation:CommonOps
is_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn is_zero(&self) -> bool { limb::limbs_are_zero_constant_time(&self.limbs) == LimbMask::Tru/;"	P	implementation:BoxedLimbs
is_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn is_zero(&self) -> bool { self.limbs.is_zero() }$/;"	P	implementation:Elem
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:MapDeserializer
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:SeqDeserializer
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        iter: <&'a [(Content<'de>, Content<'de>)] as IntoIterator>::IntoIter,$/;"	m	struct:content::MapRefDeserializer
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        iter: <&'a [Content<'de>] as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqRefDeserializer
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        iter: <Vec<(Content<'de>, Content<'de>)> as IntoIterator>::IntoIter,$/;"	m	struct:content::MapDeserializer
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        iter: <Vec<Content<'de>> as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqDeserializer
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    iter: slice::Iter<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatMapAccess
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatInternallyTaggedAccess
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatStructAccess
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn iter(&self) -> <&'a [u8] as IntoIterator>::IntoIter {$/;"	P	implementation:no_panic::Slice
iter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn iter(&self) -> <&[u8] as IntoIterator>::IntoIter {$/;"	P	implementation:Input
iter	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn iter<'a>(&'a mut self) -> BlockchainIterator<'a> {$/;"	P	implementation:Blockchain
iterator_len_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^fn iterator_len_hint<I>(iter: &I) -> Option<usize>$/;"	f
iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                iv:  Vec<u8>,$/;"	m	struct:test::TestVector
iv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        iv: Vec<u8>,$/;"	m	struct:test::CbcTest
j	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    j: u8,$/;"	m	struct:Rc4
join	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs2State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs2State
join	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs4State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs4State
kSecRandomDefault	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        static kSecRandomDefault: &'static SecRandomRef;$/;"	v	module:darwin
k_1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^    k_1: chacha::Key,$/;"	m	struct:Key
k_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^    k_2: chacha::Key,$/;"	m	struct:Key
keccak224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak224() -> Sha3 {$/;"	P	implementation:Sha3
keccak256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak256() -> Sha3 {$/;"	P	implementation:Sha3
keccak384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak384() -> Sha3 {$/;"	P	implementation:Sha3
keccak512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak512() -> Sha3 {$/;"	P	implementation:Sha3
keccak_f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^fn keccak_f(state: &mut [u8]) {$/;"	f
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    key: Key,$/;"	m	struct:OpeningKey
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    key: Key,$/;"	m	struct:SealingKey
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^    key: Key,$/;"	m	struct:OpeningKey
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^    key: Key,$/;"	m	struct:SealingKey
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    key: GCM128_KEY,$/;"	m	struct:GCM128_CONTEXT
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CtrTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                key:  Vec<u8>,$/;"	m	struct:test::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        key: Option<Vec<u8>>,$/;"	m	struct:digest_tests::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key: [u8; BLAKE2B_KEYBYTES],$/;"	m	struct:Blake2b
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        key: Option<Vec<u8>>,$/;"	m	struct:digest_tests::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key: [u8; BLAKE2S_KEYBYTES],$/;"	m	struct:Blake2s
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CbcTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::CtrTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        key: Vec<u8>,$/;"	m	struct:test::EcbTest
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            key:   [u8; 32],$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            key:   [u8; 32],$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    key:   [u8; 32],$/;"	m	struct:test::TestVector
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    key: [u8; KEY_LEN],$/;"	m	struct:FortunaGenerator
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^        key: Vec<u8>,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        key: &'static str,$/;"	m	struct:test::Test
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        key: Option<Content>,$/;"	m	struct:content::SerializeMap
key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/macros.rs	/^macro_rules! key {$/;"	M
key_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    key_len: usize,$/;"	m	struct:Algorithm
key_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn key_len(&self) -> usize { self.key_len }$/;"	P	implementation:Algorithm
key_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    key_len: usize,$/;"	m	struct:Algorithm
key_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    pub fn key_len(&self) -> usize { self.key_len }$/;"	P	implementation:Algorithm
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key_length: u8,$/;"	m	struct:Blake2b
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    key_length: u8,$/;"	m	struct:Blake2bParam
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key_length: u8,$/;"	m	struct:Blake2s
key_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    key_length: u8,$/;"	m	struct:Blake2sParam
key_pair_from_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^pub(crate) fn key_pair_from_bytes($/;"	f
key_pair_from_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^pub(crate) fn key_pair_from_pkcs8($/;"	f
key_pair_from_pkcs8_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^fn key_pair_from_pkcs8_<'a>($/;"	f
keypair_cases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_cases() {$/;"	f	module:tests
keypair_matches_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_matches_mont() {$/;"	f	module:tests
keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^mod keys;$/;"	n
keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    pub fn keys(&mut self) -> Result<Vec<K>, KVError> {$/;"	f
keystream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            keystream: Vec<u8>,$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
keystream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            keystream: Vec<u8>,$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
l	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        l: usize,$/;"	m	struct:test::TestVector
last_err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn last_err() { err_one(2) }$/;"	f	module:tests
last_node	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    last_node: u8,$/;"	m	struct:Blake2b
last_node	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    last_node: u8,$/;"	m	struct:Blake2s
last_panic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn last_panic() { panic_one(2) }$/;"	f	module:tests
last_reseed_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    last_reseed_time: f64$/;"	m	struct:Fortuna
leaf_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    leaf_length: u32,$/;"	m	struct:Blake2bParam
leaf_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    leaf_length: u32,$/;"	m	struct:Blake2sParam
leftover	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    leftover  : usize,$/;"	m	struct:Poly1305
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            len: usize,$/;"	m	struct:deserialize_map::Access
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            len: usize,$/;"	m	struct:deserialize_tuple::Access
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    len: usize,$/;"	m	struct:PublicKey
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    len: usize,$/;"	m	struct:LengthMeasurement
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    len: usize,$/;"	m	struct:Document
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^    len: usize,$/;"	m	struct:Signature
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize$/;"	m	struct:BorrowedWriteBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:OwnedReadBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:OwnedWriteBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    len: usize,$/;"	m	struct:RefWriteBuffer
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn len(&self) -> usize { self.bytes.len() }$/;"	P	implementation:no_panic::Slice
len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn len(&self) -> usize { self.value.len() }$/;"	P	implementation:Input
len_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    default fn len_hint(&self) -> Option<usize> {$/;"	f
len_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn len_hint(&self) -> Option<usize> {$/;"	f
len_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn len_hint(&self) -> Option<usize>;$/;"	P	interface:LenHint
len_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    len_len: usize,$/;"	m	struct:Algorithm
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    length_bits: u64,$/;"	m	struct:Ripemd160
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    length_bits: u64,$/;"	m	struct:Sha1
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    length_bits: (u64, u64),$/;"	m	struct:Engine512
length_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    length_bits: u64,$/;"	m	struct:Engine256
length_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    length_bytes: u64,$/;"	m	struct:Md5
lfsr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    lfsr: [u32; 10],$/;"	m	struct:Sosemanuk
lib	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^mod lib {$/;"	n
lifetime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    lifetime: PhantomData<&'de ()>,$/;"	m	struct:MapDeserializer
limb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod limb;$/;"	n
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    limbs: [Limb; ELEM_LIMBS], \/\/ This is called `v` in the C code.$/;"	m	struct:Elem
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^macro_rules! limbs {$/;"	M
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^    pub limbs: [Limb; MAX_LIMBS],$/;"	m	struct:Elem
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    limbs: &'a [Limb],$/;"	m	struct:PartialModulus
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    limbs: Box<[Limb]>,$/;"	m	struct:BoxedLimbs
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    limbs: BoxedLimbs<M>, \/\/ Also `value >= 3`.$/;"	m	struct:Modulus
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    limbs: BoxedLimbs<M>,$/;"	m	struct:Elem
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    limbs: BoxedLimbs<M>,$/;"	m	struct:PrivateExponent
limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    limbs: Vec<Limb>,$/;"	m	struct:Nonnegative
limbs_are_even_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_are_even_constant_time(limbs: &[Limb]) -> LimbMask {$/;"	f
limbs_are_zero_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_are_zero_constant_time(limbs: &[Limb]) -> LimbMask {$/;"	f
limbs_equal_limb_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_equal_limb_constant_time(a: &[Limb], b: Limb) -> LimbMask {$/;"	f
limbs_equal_limbs_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_equal_limbs_consttime(a: &[Limb], b: &[Limb]) -> LimbMask {$/;"	f
limbs_less_than_limb_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_less_than_limb_constant_time(a: &[Limb], b: Limb) -> LimbMask {$/;"	f
limbs_less_than_limbs_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_less_than_limbs_consttime(a: &[Limb], b: &[Limb]) -> LimbMask {$/;"	f
limbs_less_than_limbs_vartime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_less_than_limbs_vartime(a: &[Limb], b: &[Limb]) -> bool {$/;"	f
limbs_minimal_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_minimal_bits(a: &[Limb]) -> bits::BitLength {$/;"	f
limbs_mont_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn limbs_mont_mul(r: &mut [Limb], a: &[Limb], m: &[Limb], n0: &N0) {$/;"	f
limbs_mont_product	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn limbs_mont_product(r: &mut [Limb], a: &[Limb], b: &[Limb], m: &[Limb], n0: &N0) {$/;"	f
limbs_mont_square	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^fn limbs_mont_square(r: &mut [Limb], m: &[Limb], n0: &N0) {$/;"	f
limbs_reduce_once_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn limbs_reduce_once_constant_time(r: &mut [Limb], m: &[Limb]) {$/;"	f
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn limit(&mut self) -> &mut Infinite {$/;"	P	implementation:DefaultOptions
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn limit(&mut self) -> &mut L {$/;"	P	implementation:WithOtherLimit
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn limit(&mut self) -> &mut O::Limit {$/;"	P	implementation:WithOtherEndian
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn limit(&mut self) -> &mut Self::Limit {$/;"	P	implementation:O
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn limit(&mut self) -> &mut Self::Limit;$/;"	P	interface:Options
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    limit: LimitOption,$/;"	m	struct:Config
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn limit(&mut self, limit: u64) -> &mut Self {$/;"	P	implementation:Config
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn limit(&self) -> Option<u64> {$/;"	P	implementation:Bounded
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn limit(&self) -> Option<u64> {$/;"	P	implementation:CountSize
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn limit(&self) -> Option<u64> {$/;"	P	implementation:Infinite
limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    fn limit(&self) -> Option<u64>;$/;"	P	interface:SizeLimit
linux_setup	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    pub fn linux_setup() {$/;"	f	module:arm
little_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn little_endian(&mut self) -> &mut Self {$/;"	P	implementation:Config
lo	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    lo: u64,$/;"	m	struct:u128
load_3i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3i(s: &[u8]) -> i64 {$/;"	f
load_3u	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3u(s: &[u8]) -> u64 {$/;"	f
load_4i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4i(s: &[u8]) -> i64 {$/;"	f
load_4u	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4u(s: &[u8]) -> u64 {$/;"	f
load_from_file	/home/lieroz/blockchain_rust/src/wallets.rs	/^    pub fn load_from_file(&mut self) {$/;"	P	implementation:Wallets
load_from_persist	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    fn load_from_persist(&mut self) -> KVResult {$/;"	f
local	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    local: syn::Ident,$/;"	m	struct:Parameters
lock	/home/lieroz/blockchain_rust/src/transaction.rs	/^    fn lock(&mut self, address: &str) {$/;"	P	implementation:TXOutput
log_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        log_n: u8,$/;"	m	struct:test::Test
log_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    log_n: u8,$/;"	m	struct:ScryptParams
lsh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn lsh(self, s: u32) -> u32x4 {$/;"	P	implementation:u32x4
m	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^    pub m: PhantomData<M>,$/;"	m	struct:Elem
m	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    m: PhantomData<M>,$/;"	m	struct:BoxedLimbs
m	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    m: PhantomData<M>,$/;"	m	struct:PartialModulus
m	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    m: PhantomData<M>,$/;"	m	struct:Width
mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    mac: Ghash,$/;"	m	struct:AesGcm
mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    mac: Poly1305,$/;"	m	struct:ChaCha20Poly1305
mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod mac;$/;"	n
mac_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^mod mac_tests {$/;"	n
mac_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^mod mac_tests {$/;"	n
macros	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^mod macros;$/;"	n
macros	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/mod.rs	/^mod macros;$/;"	n
macros	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^pub mod macros;$/;"	n
main	/home/lieroz/blockchain_rust/src/main.rs	/^fn main() {$/;"	f
maj	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest/sha1.rs	/^fn maj(x: W32, y: W32, z: W32) -> W32 { (x & y) | (x & z) | (y & z) }$/;"	f
make_counter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305_openssh.rs	/^fn make_counter(sequence_number: u32) -> Counter {$/;"	f
map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    map: A,$/;"	m	struct:MapAccessDeserializer
map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeStructVariantAsMapValue
map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    map: &'a mut M,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
map_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! map_impl {$/;"	M
map_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! map_impl {$/;"	M
mark	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn mark(&self) -> Mark { Mark { i: self.i } }$/;"	P	implementation:Reader
mark_has_flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn mark_has_flatten(&mut self) {$/;"	P	implementation:Container
mark_transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn mark_transparent(&mut self) {$/;"	P	implementation:Field
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            marker: PhantomData<T>,$/;"	m	struct:deserialize::VecVisitor
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    marker: PhantomData<A>,$/;"	m	struct:ArrayVisitor
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:OptionVisitor
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:PhantomDataVisitor
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        marker: PhantomData<E>,$/;"	m	struct:private::UnitOnly
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedBytesDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedStrDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:CowStrDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:NeverDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:SeqDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StringDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:U32Deserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:UnitDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BytesDeserializer
marker	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        mask: u32,$/;"	m	struct:arm::Feature
mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        mask: u32,$/;"	m	struct:intel::Feature
max_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    mod max_input {$/;"	n	module:tests
max_input_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    max_input_len: u64,$/;"	m	struct:Algorithm
max_input_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^const fn max_input_len(block_len: usize, overhead_blocks_per_nonce: usize) -> u64 {$/;"	f
max_input_len_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^    fn max_input_len_test() {$/;"	f	module:tests
max_input_len_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^    fn max_input_len_test() {$/;"	f	module:tests
max_input_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^        fn max_input_test(alg: &'static digest::Algorithm) {$/;"	f	module:tests::max_input
max_input_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^        macro_rules! max_input_tests {$/;"	M	module:tests::max_input
maybe_set	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &Fe, do_swap: i32) {$/;"	P	implementation:Fe
maybe_set	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &GePrecomp, do_swap: i32) {$/;"	P	implementation:GePrecomp
maybe_swap_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_swap_with(&mut self, other: &mut Fe, do_swap: i32) {$/;"	P	implementation:Fe
md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod md5;$/;"	n
md5_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_10(bh: & mut Bencher) {$/;"	f	module:bench
md5_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_1k(bh: & mut Bencher) {$/;"	f	module:bench
md5_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_64k(bh: & mut Bencher) {$/;"	f	module:bench
member	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub member: syn::Member,$/;"	m	struct:Field
member_message	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/check.rs	/^fn member_message(member: &Member) -> String {$/;"	f
mgf1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^fn mgf1($/;"	f
middle_err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn middle_err() { err_one(1) }$/;"	f	module:tests
middle_panic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn middle_panic() { panic_one(1) }$/;"	f	module:tests
min_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^    min_bits: bits::BitLength,$/;"	m	struct:Parameters
mine_block	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn mine_block(&mut self, transactions: Vec<Transaction>) {$/;"	P	implementation:Blockchain
minimal_width_from_unpadded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn minimal_width_from_unpadded(limbs: &[Limb]) -> Self {$/;"	P	implementation:BoxedLimbs
missing_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>$/;"	f
mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
mix_columns	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Self;$/;"	P	interface:AesOps
mk_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn mk_result(st: &mut Sha1, rs: &mut [u8]) {$/;"	f
mode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    mode: Sha3Mode,$/;"	m	struct:Sha3
modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    modulus: bigint::Modulus<M>,$/;"	m	struct:PrivatePrime
modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    pub fn modulus<'a>(&'a self) -> io::Positive<'a> {$/;"	P	implementation:PublicKey
montgomery	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/arithmetic.rs	/^pub mod montgomery;$/;"	n
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn mul(a: &Scalar<R>, b: &Scalar<R>) -> Scalar<R> { binary_op(GFp_p256_scalar_mul_mont, a, b/;"	f	function:p256_scalar_inv_to_mont
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn mul(a: &Scalar<R>, b: &Scalar<R>) -> Scalar<R> { binary_op(GFp_p384_scalar_mul_mont, a, b/;"	f	function:p384_scalar_inv_to_mont
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs2State<T>) -> Bs2State<T> {$/;"	P	implementation:Bs2State
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs4State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs4State
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	P	interface:Gf2Ops
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	P	interface:Gf4Ops
mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
mul_121666	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_121666(&self) -> Fe {$/;"	P	implementation:Fe
mul_assoc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_assoc() {$/;"	f	module:tests
mul_commutes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_commutes() {$/;"	f	module:tests
mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub fn mul_mont<M, EA: Encoding, EB: Encoding>($/;"	f
mut_if	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn mut_if(is_mut: bool) -> Option<TokenStream> {$/;"	f
n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub n: Elem<Unencoded>,$/;"	m	struct:CommonOps
n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^    pub n: bigint::Modulus<N>,$/;"	m	struct:Key
n0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    n0: N0,$/;"	m	struct:Modulus
n0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    n0: N0,$/;"	m	struct:PartialModulus
n_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^    pub n_bits: bits::BitLength,$/;"	m	struct:Key
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        name: &'static str,$/;"	m	struct:content::TagOrContentVisitor
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStruct
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariant
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariantAsMapValue
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleStruct
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariant
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    name: &'static str,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    name: &'static str,$/;"	m	struct:Attr
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    name: &'static str,$/;"	m	struct:VecAttr
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Container
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Field
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Variant
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Container
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Field
name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Variant
names	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    names: &'static [&'static str],$/;"	m	struct:OneOf
native_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn native_endian(&mut self) -> &mut Self {$/;"	P	implementation:Config
nearly_full_context	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^        fn nearly_full_context(alg: &'static digest::Algorithm) -> digest::Context {$/;"	f	module:tests::max_input
needs_deserialize_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn needs_deserialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
needs_serialize_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn needs_serialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
neg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn neg(&self) -> Fe {$/;"	P	implementation:Fe
negate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn negate(&mut self) {$/;"	P	implementation:Elem
nested	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub fn nested<'a, F, R, E: Copy>($/;"	f
never	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    never: !,$/;"	m	struct:NeverDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn new() -> DefaultOptions {$/;"	P	implementation:DefaultOptions
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub(crate) fn new() -> Config {$/;"	P	implementation:Config
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub(crate) fn new(options: O) -> WithOtherEndian<O, E> {$/;"	P	implementation:WithOtherEndian
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub(crate) fn new(options: O, limit: L) -> WithOtherLimit<O, L> {$/;"	P	implementation:WithOtherLimit
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    pub(crate) fn new(r: R, options: O) -> Deserializer<R, O> {$/;"	P	implementation:Deserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    pub fn new(bytes: &'storage [u8]) -> SliceReader<'storage> {$/;"	P	implementation:SliceReader
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    pub fn new(r: R) -> IoReader<R> {$/;"	P	implementation:IoReader
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    pub fn new(options: O) -> SizeChecker<O> {$/;"	P	implementation:SizeChecker
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    pub fn new(w: W, options: O) -> Serializer<W, O> {$/;"	P	implementation:Serializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    fn new(algorithm: &'static Algorithm, key_bytes: &[u8]) -> Result<Self, error::Unspecified> /;"	P	implementation:Key
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn new($/;"	P	implementation:OpeningKey
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn new($/;"	P	implementation:SealingKey
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub fn new($/;"	P	implementation:Key
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    pub(crate) fn new(key: &Key, aad: Aad, cpu_features: cpu::Features) -> Self {$/;"	P	implementation:Context
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    pub(super) fn new(mut h_be: Block, cpu_features: cpu::Features) -> Self {$/;"	P	implementation:Key
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    fn new(Nonce(nonce): Nonce, initial_counter: u32) -> Self {$/;"	f
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    pub fn new($/;"	P	implementation:HeaderProtectionKey
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub fn new(algorithm: &'static Algorithm) -> Context {$/;"	P	implementation:Context
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn new(alg: &'static Algorithm, key_pair: ec::KeyPair) -> Self {$/;"	P	implementation:KeyPair
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn new(digest_alg: &'static digest::Algorithm, key_value: &[u8]) -> SigningKey {$/;"	P	implementation:SigningKey
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn new(digest_alg: &'static digest::Algorithm, key_value: &[u8]) -> VerificationKey {$/;"	P	implementation:VerificationKey
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    pub fn new() -> SystemRandom { SystemRandom }$/;"	P	implementation:SystemRandom
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn new($/;"	P	implementation:PSSMetrics
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    fn new(p: bigint::Nonnegative, dP: untrusted::Input) -> Result<Self, KeyRejected> {$/;"	P	implementation:PrivatePrime
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn new (key_size: KeySize, key: &[u8], nonce: &[u8], aad: &[u8]) -> AesGcm<'a> {$/;"	P	implementation:AesGcm
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiDecryptor {$/;"	P	implementation:AesNiDecryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiEncryptor {$/;"	P	implementation:AesNiEncryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new(outlen: usize) -> Blake2b {$/;"	P	implementation:Blake2b
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new(outlen: usize) -> Blake2s {$/;"	P	implementation:Blake2s
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new(processor: P, padding: X, block_size: usize) -> BlockEngine<P, X> {$/;"	P	implementation:BlockEngine
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: &[u8]) -> CtrModeX8<A> {$/;"	P	implementation:CtrModeX8
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: Vec<u8>) -> CtrMode<A> {$/;"	P	implementation:CtrMode
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbDecryptor<T, DecPadding<X>> {$/;"	P	implementation:EcbDecryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbEncryptor<T, EncPadding<X>> {$/;"	P	implementation:EcbEncryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcDecryptor<T, DecPadding<X>> {$/;"	P	implementation:CbcDecryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcEncryptor<T, EncPadding<X>> {$/;"	P	implementation:CbcEncryptor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn new(key: &[u8]) -> Blowfish {$/;"	P	implementation:Blowfish
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn new(parent: &mut OwnedReadBuffer) -> BorrowedWriteBuffer {$/;"	P	implementation:BorrowedWriteBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &[u8]) -> RefReadBuffer {$/;"	P	implementation:RefReadBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &mut [u8]) -> RefWriteBuffer {$/;"	P	implementation:RefWriteBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedReadBuffer {$/;"	P	implementation:OwnedReadBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedWriteBuffer {$/;"	P	implementation:OwnedWriteBuffer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	P	implementation:ChaCha20
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  pub fn new(key: &[u8], nonce: &[u8], aad: &[u8]) -> ChaCha20Poly1305 {$/;"	P	implementation:ChaCha20Poly1305
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer128 {$/;"	P	implementation:FixedBuffer128
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer64 {$/;"	P	implementation:FixedBuffer64
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        fn new(seed: u32) -> CurveGen {$/;"	P	implementation:tests::CurveGen
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> FortunaGenerator {$/;"	P	implementation:FortunaGenerator
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> Pool {$/;"	P	implementation:Pool
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn new(a: u32, b: u32, c: u32, d: u32) -> Gf128 {$/;"	P	implementation:Gf128
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn new(h: &[u8]) -> Ghash {$/;"	P	implementation:Ghash
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Hc128 {$/;"	P	implementation:Hc128
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    pub fn new(mut digest: D, key: &[u8]) -> Hmac<D> {$/;"	P	implementation:Hmac
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new(code: &[u8]) -> MacResult {$/;"	P	implementation:MacResult
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn new() -> Md5State {$/;"	P	implementation:Md5State
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    pub fn new() -> Md5 {$/;"	P	implementation:Md5
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn new(key: &[u8]) -> Poly1305 {$/;"	P	implementation:Poly1305
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn new(key: &[u8]) -> Rc4 {$/;"	P	implementation:Rc4
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn new() -> Ripemd160 {$/;"	P	implementation:Ripemd160
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	P	implementation:Salsa20
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    pub fn new(log_n: u8, r: u32, p: u32) -> ScryptParams {$/;"	P	implementation:ScryptParams
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn new() -> Sha1 {$/;"	P	implementation:Sha1
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha224 {$/;"	P	implementation:Sha224
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha256 {$/;"	P	implementation:Sha256
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha384 {$/;"	P	implementation:Sha384
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512 {$/;"	P	implementation:Sha512
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc224 {$/;"	P	implementation:Sha512Trunc224
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc256 {$/;"	P	implementation:Sha512Trunc256
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn new(mode: Sha3Mode) -> Sha3 {$/;"	P	implementation:Sha3
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Sosemanuk {$/;"	P	implementation:Sosemanuk
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    pub fn new() -> Whirlpool {$/;"	P	implementation:Whirlpool
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn new() -> Self {$/;"	P	implementation:ArrayVisitor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn new(iter: I) -> Self {$/;"	f
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn new(map: A) -> Self {$/;"	P	implementation:MapAccessDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn new(seq: A) -> Self {$/;"	P	implementation:SeqAccessDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn new(value: &'de [u8]) -> BorrowedBytesDeserializer<'de, E> {$/;"	P	implementation:BorrowedBytesDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn new(value: &'de str) -> BorrowedStrDeserializer<'de, E> {$/;"	P	implementation:BorrowedStrDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn new() -> Self {$/;"	P	implementation:content::ContentVisitor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn new(map: &'a [(Content<'de>, Content<'de>)]) -> Self {$/;"	f	module:content
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn new(map: Vec<(Content<'de>, Content<'de>)>) -> Self {$/;"	f	module:content
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TagOrContentVisitor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn new(slice: &'a [Content<'de>]) -> Self {$/;"	f	module:content
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn new(vec: Vec<Content<'de>>) -> Self {$/;"	f	module:content
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn new(content: &'a Content<'de>) -> Self {$/;"	P	implementation:content::ContentRefDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn new(content: Content<'de>) -> Self {$/;"	P	implementation:content::ContentDeserializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TaggedContentVisitor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::UntaggedUnitVisitor
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub fn new(variant: Content<'de>, value: Option<Content<'de>>) -> EnumDeserializer<'de, /;"	f	module:content
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatMapAccess
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatStructAccess
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        pub fn new() -> Self {$/;"	P	implementation:content::ContentSerializer
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeStructVariantAsMapValue
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeTupleVariantAsMapValue
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn new(map: &'a mut M, name: &'static str) -> FlatMapSerializeStructVariantAsMapValue<'a, M>/;"	f
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ctxt.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Ctxt
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    pub fn new(p: &'static str) -> Result<KV<K, V>, PersyError> {$/;"	f
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^        pub fn new(bytes: &'a [u8]) -> Slice<'a> {$/;"	P	implementation:no_panic::Slice
new	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn new(input: Input<'a>) -> Reader<'a> {$/;"	P	implementation:Reader
new	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn new(transactions: Vec<Transaction>, prev_block_hash: &str) -> Block {$/;"	P	implementation:Block
new	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    pub fn new() -> Blockchain {$/;"	P	implementation:Blockchain
new	/home/lieroz/blockchain_rust/src/cli.rs	/^    pub fn new(args: &'a [String]) -> CLI<'a> {$/;"	P	implementation:CLI
new	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    pub fn new(block: &Block) -> ProofOfWork {$/;"	P	implementation:ProofOfWork
new	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn new(amount: i32, to: &str) -> TXOutput {$/;"	P	implementation:TXOutput
new	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn new(tx_id: &str, v_out: i32, signature: Vec<u8>, public_key: Vec<u8>) -> TXInput {$/;"	P	implementation:TXInput
new	/home/lieroz/blockchain_rust/src/wallet.rs	/^    pub fn new() -> Wallet {$/;"	P	implementation:Wallet
new	/home/lieroz/blockchain_rust/src/wallets.rs	/^    pub fn new() -> Wallets {$/;"	P	implementation:Wallets
newRR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn newRR(m: &PartialModulus<M>, m_bits: bits::BitLength) -> One<M, RR> {$/;"	P	implementation:One
new_at_infinity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    pub fn new_at_infinity() -> Self {$/;"	P	implementation:ExtPoint
new_at_infinity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    pub fn new_at_infinity() -> Self {$/;"	P	implementation:Point
new_at_infinity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn new_at_infinity() -> Point {$/;"	P	implementation:Point
new_coin_base_tx	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn new_coin_base_tx(to: &str, data: &str) -> Transaction {$/;"	P	implementation:Transaction
new_from_owned	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new_from_owned(code: Vec<u8>) -> MacResult {$/;"	P	implementation:MacResult
new_genesis_block	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn new_genesis_block(coinbase: Transaction) -> Block {$/;"	P	implementation:Block
new_keyed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2b {$/;"	P	implementation:Blake2b
new_keyed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2s {$/;"	P	implementation:Blake2s
new_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub fn new_mask(&self, sample: Block) -> [u8; 5] {$/;"	P	implementation:Key
new_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^    pub fn new_mask(&self, sample: Block) -> [u8; 5] {$/;"	P	implementation:Key
new_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    new_mask: fn(key: &KeyInner, sample: Block) -> [u8; 5],$/;"	m	struct:Algorithm
new_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    pub fn new_mask(&self, sample: &[u8]) -> Result<[u8; 5], error::Unspecified> {$/;"	P	implementation:HeaderProtectionKey
new_unseeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn new_unseeded() -> Fortuna {$/;"	P	implementation:Fortuna
new_utxo_tx	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn new_utxo_tx(from: &str, to: &str, amount: i32, bc: &mut Blockchain) -> Transaction {$/;"	P	implementation:Transaction
new_with_history	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new_with_history($/;"	P	implementation:BlockEngine
new_with_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new_with_len<'a>(buff: Vec<u8>, len: usize) -> OwnedReadBuffer {$/;"	P	implementation:OwnedReadBuffer
new_xchacha20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new_xchacha20(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	P	implementation:ChaCha20
new_xsalsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new_xsalsa20(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	P	implementation:Salsa20
newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn newtype_variant<T>(self) -> Result<T, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value>$/;"	f
newtype_variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, E>$/;"	f	module:content
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8];$/;"	P	interface:FixedBuffer
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        fn next(&mut self) -> Option<Fe> {$/;"	P	implementation:tests::CurveGen
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Hc128
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Rc4
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn next(&mut self) -> u8 {$/;"	P	implementation:Sosemanuk
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn next(&mut self) -> Option<T> {$/;"	f
next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    next: T,$/;"	m	struct:StepUp
next	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:BlockchainIterator
next_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	P	interface:SeqAccess
next_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	f
next_element_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>$/;"	P	implementation:deserialize_tuple::Access
next_element_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	P	interface:SeqAccess
next_element_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn next_element_seed<V>(&mut self, seed: V) -> Result<Option<V::Value>, Self::Error>$/;"	f
next_element_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_entry	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	P	interface:MapAccess
next_entry	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	f
next_entry_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	P	interface:MapAccess
next_entry_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	f
next_entry_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn next_entry_seed<TK, TV>($/;"	f
next_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	P	interface:MapAccess
next_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	f
next_key_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>$/;"	P	implementation:deserialize_map::Access
next_key_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	P	interface:MapAccess
next_key_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	f
next_key_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_key_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_key_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_pair	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn next_pair(&mut self) -> Option<(First<I::Item>, Second<I::Item>)> {$/;"	f
next_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	P	implementation:Fortuna
next_u32_wrap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^fn next_u32_wrap(buf: &[u8], offset: &mut usize) -> u32 {$/;"	f
next_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	P	interface:MapAccess
next_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	f
next_value_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value>$/;"	P	implementation:deserialize_map::Access
next_value_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	P	interface:MapAccess
next_value_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	f
next_value_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
next_value_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:content
next_value_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
no_limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn no_limit(&mut self) -> &mut Self {$/;"	P	implementation:Config
no_panic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^mod no_panic {$/;"	n
node_depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    node_depth: u8,$/;"	m	struct:Blake2bParam
node_depth	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    node_depth: u8,$/;"	m	struct:Blake2sParam
node_offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    node_offset: u64,$/;"	m	struct:Blake2bParam
node_offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    node_offset: [u8; 6],$/;"	m	struct:Blake2sParam
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod nonce;$/;"	n
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    nonce: Nonce,$/;"	m	struct:Context
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            nonce: [u8; 12],$/;"	m	struct:test::test_chacha20_256_tls_vectors_96_nonce::TestVector
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^            nonce: [u8; 8],$/;"	m	struct:test::test_chacha20_256_tls_vectors::TestVector
nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    nonce: [u8; 8],$/;"	m	struct:test::TestVector
nonce	/home/lieroz/blockchain_rust/src/block.rs	/^    nonce: u64,$/;"	m	struct:Block
nonce	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn nonce(&self) -> u64 {$/;"	P	implementation:Block
nonce_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn nonce_len(&self) -> usize { NONCE_LEN }$/;"	P	implementation:Algorithm
none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: &'static str) -> Self {$/;"	P	implementation:Attr
none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: &'static str) -> Self {$/;"	P	implementation:BoolAttr
none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: &'static str) -> Self {$/;"	P	implementation:VecAttr
nonnegative_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^fn nonnegative_integer<'a>($/;"	f
nonzero_integers	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
nonzero_integers	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
nop_reserve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^fn nop_reserve<T>(_seq: T, _n: usize) {}$/;"	f
not	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn not(self) -> u32x4 {$/;"	P	implementation:u32x4
num_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub num_limbs: usize,$/;"	m	struct:CommonOps
num_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    num_limbs: usize,$/;"	m	struct:Width
num_pending	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    num_pending: usize,$/;"	m	struct:Context
o_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    o_key: Vec<u8>,$/;"	m	struct:Hmac
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    offset : usize,$/;"	m	struct:ChaCha20
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    offset: usize,$/;"	m	struct:Salsa20
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    offset: usize  \/\/ Enqueued bytes in state for absorb phase$/;"	m	struct:Sha3
offset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    offset: u32$/;"	m	struct:Sosemanuk
ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    ok: PhantomData<Ok>,$/;"	m	struct:Impossible
okm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        okm: Vec<u8>,$/;"	m	struct:test::TestVector
one	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn one(nonce: Nonce) -> Self { Self::new(nonce, 1) }$/;"	f
one	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn one(&self) -> Elem<M, Unencoded> {$/;"	P	implementation:Modulus
oneRR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    oneRR: One<M, RR>,$/;"	m	struct:Modulus
oneRR	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn oneRR(&self) -> &One<M, RR> { &self.oneRR }$/;"	P	implementation:Modulus
oneRR_mod_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub oneRR_mod_n: Scalar<RR>, \/\/ 1 * R**2 (mod n). TOOD: Use One<RR>.$/;"	m	struct:PrivateScalarOps
one_err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn one_err() {$/;"	f	module:tests
one_ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn one_ok() {$/;"	f	module:tests
one_panics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn one_panics() {$/;"	f	module:tests
op_f	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_g	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_h	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
op_i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f	method:Md5State::process_block
opaque	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    opaque: Opaque,$/;"	m	struct:Context
open	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    open: fn($/;"	m	struct:Algorithm
open_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub fn open_in_place<'a>($/;"	f
openwall_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn openwall_test_vectors() -> Vec<Test> {$/;"	f	module:test
ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519.rs	/^mod ops;$/;"	n
ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^mod ops;$/;"	n
ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^        &'static ops::CommonOps,$/;"	v	module:tests
ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    ops: &'static PublicScalarOps,$/;"	m	struct:Algorithm
options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    options: O,$/;"	m	struct:WithOtherEndian
options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    options: O,$/;"	m	struct:Deserializer
options	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    pub options: O,$/;"	m	struct:SizeChecker
original	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub original: &'a syn::DeriveInput,$/;"	m	struct:Container
original	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub original: &'a syn::Field,$/;"	m	struct:Field
original	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub original: &'a syn::Variant,$/;"	m	struct:Variant
other	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    other: bool,$/;"	m	struct:Variant
other	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn other(&self) -> bool {$/;"	P	implementation:Variant
other_limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    other_limit: L,$/;"	m	struct:CountSize
out	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            out:   [u8; 32],$/;"	m	struct:test::test_bcrypt_hash::Test
out	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            out: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
out_hist	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_hist: Vec<u8>,$/;"	m	struct:BlockEngine
out_read_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_read_scratch: Option<OwnedReadBuffer>,$/;"	m	struct:BlockEngine
out_write_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    out_write_scratch: Option<OwnedWriteBuffer>,$/;"	m	struct:BlockEngine
outer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    outer: digest::Context,$/;"	m	struct:SigningContext
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        output: Vec<u8>$/;"	m	struct:test::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^        output: Vec<u8>,$/;"	m	struct:digest_tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^        output: Vec<u8>,$/;"	m	struct:digest_tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    output : [u8; 64],$/;"	m	struct:ChaCha20
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    output: [u8; 4],$/;"	m	struct:Hc128
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^        output: Vec<u8>$/;"	m	struct:test::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        output: Vec<u8>,$/;"	m	struct:tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    output: [u8; 64],$/;"	m	struct:Salsa20
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        output: Vec<u8>,$/;"	m	struct:tests::Test
output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    output: [u8; 80],$/;"	m	struct:Sosemanuk
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	P	implementation:Blake2b
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	P	implementation:Blake2s
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bits(&self) -> usize;$/;"	P	interface:Digest
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn output_bits(&self) -> usize { 128 }$/;"	P	implementation:Md5
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	P	implementation:Ripemd160
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	P	implementation:Sha1
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	P	implementation:Sha224
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	P	implementation:Sha512Trunc224
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	P	implementation:Sha256
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	P	implementation:Sha512Trunc256
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 384 }$/;"	P	implementation:Sha384
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 512 }$/;"	P	implementation:Sha512
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn output_bits(&self) -> usize {$/;"	P	implementation:Sha3
output_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn output_bits(&self) -> usize {$/;"	P	implementation:Whirlpool
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	P	implementation:Blake2b
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	P	implementation:Blake2s
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bytes(&self) -> usize {$/;"	P	interface:Digest
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	P	implementation:Ghash
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn output_bytes(&self) -> usize { self.digest.output_bytes() }$/;"	P	implementation:Hmac
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn output_bytes(&self) -> usize;$/;"	P	interface:Mac
output_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	P	implementation:Poly1305
output_index	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    output_index: usize$/;"	m	struct:Hc128
output_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub output_len: usize,$/;"	m	struct:Algorithm
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
output_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        output_str: &'static str,$/;"	m	struct:tests::Test
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    p: [Limb; MAX_LIMBS],$/;"	m	struct:Modulus
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    p: PrivatePrime<P>,$/;"	m	struct:KeyPair
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    p: [u32; 18]$/;"	m	struct:Blowfish
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    p: [u32; 512],$/;"	m	struct:Hc128
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        p: u32,$/;"	m	struct:test::Test
p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    p: u32$/;"	m	struct:ScryptParams
p256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub mod p256;$/;"	n
p256_elem_add_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_elem_add_test() {$/;"	f	module:tests
p256_elem_inv_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^fn p256_elem_inv_squared(a: &Elem<R>) -> Elem<R> {$/;"	f
p256_elem_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_elem_mul_test() {$/;"	f	module:tests
p256_elem_neg_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_elem_neg_test() {$/;"	f	module:tests
p256_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^macro_rules! p256_limbs {$/;"	M
p256_point_double_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_point_double_test() {$/;"	f	module:tests
p256_point_mul_base_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^fn p256_point_mul_base_impl(g_scalar: &Scalar) -> Point {$/;"	f
p256_point_mul_base_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_point_mul_base_test() {$/;"	f	module:tests
p256_point_mul_serialized_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_point_mul_serialized_test() {$/;"	f	module:tests
p256_point_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_point_mul_test() {$/;"	f	module:tests
p256_point_sum_mixed_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_point_sum_mixed_test() {$/;"	f	module:tests
p256_point_sum_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_point_sum_test() {$/;"	f	module:tests
p256_q_minus_n_plus_n_equals_0_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_q_minus_n_plus_n_equals_0_test() {$/;"	f	module:tests
p256_scalar_inv_to_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^fn p256_scalar_inv_to_mont(a: &Scalar<Unencoded>) -> Scalar<R> {$/;"	f
p256_scalar_inv_to_mont_zero_panic_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_scalar_inv_to_mont_zero_panic_test() {$/;"	f	module:tests
p256_scalar_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_scalar_mul_test() {$/;"	f	module:tests
p256_scalar_square_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p256_scalar_square_test() {$/;"	f	module:tests
p384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub mod p384;$/;"	n
p384_elem_add_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_elem_add_test() {$/;"	f	module:tests
p384_elem_div_by_2_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_elem_div_by_2_test() {$/;"	f	module:tests
p384_elem_inv_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^fn p384_elem_inv_squared(a: &Elem<R>) -> Elem<R> {$/;"	f
p384_elem_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_elem_mul_test() {$/;"	f	module:tests
p384_elem_neg_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_elem_neg_test() {$/;"	f	module:tests
p384_elem_sub_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_elem_sub_test() {$/;"	f	module:tests
p384_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^macro_rules! p384_limbs {$/;"	M
p384_point_double_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_point_double_test() {$/;"	f	module:tests
p384_point_mul_base_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^fn p384_point_mul_base_impl(a: &Scalar) -> Point {$/;"	f
p384_point_mul_base_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_point_mul_base_test() {$/;"	f	module:tests
p384_point_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_point_mul_test() {$/;"	f	module:tests
p384_point_sum_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_point_sum_test() {$/;"	f	module:tests
p384_q_minus_n_plus_n_equals_0_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_q_minus_n_plus_n_equals_0_test() {$/;"	f	module:tests
p384_scalar_inv_to_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^fn p384_scalar_inv_to_mont(a: &Scalar<Unencoded>) -> Scalar<R> {$/;"	f
p384_scalar_inv_to_mont_zero_panic_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_scalar_inv_to_mont_zero_panic_test() {$/;"	f	module:tests
p384_scalar_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn p384_scalar_mul_test() {$/;"	f	module:tests
pad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pad       : [u32; 4],$/;"	m	struct:Poly1305
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	P	implementation:DecPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	P	implementation:NoPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, a: &mut W) { self.padding.pad_input(a); }$/;"	P	implementation:EncPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W) {$/;"	P	implementation:PkcsPadding
pad_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W);$/;"	P	interface:PaddingProcessor
pad_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn pad_len(ds_len: usize, offset: usize, rate: usize) -> usize {$/;"	f	method:Sha3::finalize
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^mod padding;$/;"	n
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X$/;"	m	struct:DecPadding
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X$/;"	m	struct:EncPadding
padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    padding: X,$/;"	m	struct:BlockEngine
padding_alg	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^    padding_alg: &'static padding::Verification,$/;"	m	struct:Parameters
panic_one	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn panic_one(test_to_fail: usize) {$/;"	f	module:tests
param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    param: Blake2bParam$/;"	m	struct:Blake2b
param	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    param: Blake2sParam$/;"	m	struct:Blake2s
parent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    parent: &'a mut OwnedReadBuffer,$/;"	m	struct:BorrowedWriteBuffer
parity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest/sha1.rs	/^fn parity(x: W32, y: W32, z: W32) -> W32 { x ^ y ^ z }$/;"	f
parse	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^        fn parse(input: ParseStream) -> parse::Result<Self> {$/;"	P	implementation:parse_lit_into_lifetimes::BorrowedLifetimes
parse_big_endian_and_pad_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn parse_big_endian_and_pad_consttime($/;"	f
parse_big_endian_fixed_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^fn parse_big_endian_fixed_consttime<M>($/;"	f
parse_big_endian_in_range_and_pad_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn parse_big_endian_in_range_and_pad_consttime($/;"	f
parse_big_endian_in_range_partially_reduced_and_pad_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^pub fn parse_big_endian_in_range_partially_reduced_and_pad_consttime($/;"	f
parse_ip_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! parse_ip_impl {$/;"	M
parse_lit_into_expr_path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn parse_lit_into_expr_path($/;"	f
parse_lit_into_lifetimes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn parse_lit_into_lifetimes($/;"	f
parse_lit_into_path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn parse_lit_into_path(cx: &Ctxt, attr_name: &Ident, lit: &syn::Lit) -> Result<syn::Path, ()> {$/;"	f
parse_lit_into_ty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn parse_lit_into_ty(cx: &Ctxt, attr_name: &Ident, lit: &syn::Lit) -> Result<syn::Type, ()> {$/;"	f
parse_lit_into_where	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn parse_lit_into_where($/;"	f
parse_lit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn parse_lit_str<T>(s: &syn::LitStr) -> parse::Result<T>$/;"	f
parse_public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^fn parse_public_key($/;"	f
parse_socket_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! parse_socket_impl {$/;"	M
parse_test_case	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^fn parse_test_case<'a>($/;"	f
parse_uncompressed_point	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/public_key.rs	/^pub fn parse_uncompressed_point($/;"	f
parse_uncompressed_point_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/public_key.rs	/^    fn parse_uncompressed_point_test() {$/;"	f	module:tests
partial_copy_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    pub fn partial_copy_from(&mut self, a: &[u8]) { self.as_mut()[..a.len()].copy_from_slice(a);/;"	P	implementation:Block
password	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            password: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
password	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        password: Vec<u8>,$/;"	m	struct:test::Test
password	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        password: &'static str,$/;"	m	struct:test::Test
pb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u16, bit: u32, shift: u32) -> u32 {$/;"	f	function:un_bit_slice_4x4_with_u16
pb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u32, bit: u32, shift: u32) -> u16 {$/;"	f	function:bit_slice_4x4_with_u16
pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod pbkdf2;$/;"	n
pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod pbkdf2;$/;"	n
pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2<M: Mac>(mac: &mut M, salt: &[u8], c: u32, output: &mut [u8]) {$/;"	f
pbkdf2_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
pbkdf2_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_simple(password: &str, c: u32) -> io::Result<String> {$/;"	f
peek	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn peek(&self, b: u8) -> bool {$/;"	P	implementation:Reader
peek_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	P	implementation:OwnedReadBuffer
peek_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	P	implementation:RefReadBuffer
peek_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8];$/;"	P	interface:ReadBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:BorrowedWriteBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:RefWriteBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer;$/;"	P	interface:WriteBuffer
peek_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	P	implementation:OwnedWriteBuffer
peek_remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_remaining(&self) -> &[u8] {$/;"	P	interface:ReadBuffer
pending	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pending: [u8; MAX_BLOCK_LEN],$/;"	m	struct:Context
pending	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pending: Option<&'a Content<'de>>,$/;"	m	struct:FlatInternallyTaggedAccess
pending_content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pending_content: Option<&'a Content<'de>>,$/;"	m	struct:FlatMapAccess
pending_content	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    pending_content: Option<Content<'de>>,$/;"	m	struct:FlatStructAccess
personal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    personal: [u8; BLAKE2B_PERSONALBYTES],$/;"	m	struct:Blake2bParam
personal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    personal: [u8; BLAKE2S_PERSONALBYTES],$/;"	m	struct:Blake2sParam
persy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    persy: Persy,$/;"	m	struct:KV
phantom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        pub phantom: PhantomData<Idx>,$/;"	m	struct:range::RangeVisitor
pkcs1_digestinfo_prefix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^macro_rules! pkcs1_digestinfo_prefix {$/;"	M
pkcs1_encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^fn pkcs1_encode(pkcs1: &PKCS1, m_hash: &digest::Digest, m_out: &mut [u8]) {$/;"	f
pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod pkcs8;$/;"	n
pkcs8_bytes	/home/lieroz/blockchain_rust/src/wallet.rs	/^    pkcs8_bytes: Vec<u8>,$/;"	m	struct:Wallet
pkcs8_template	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    pkcs8_template: &'static pkcs8::Template,$/;"	m	struct:Algorithm
place_lifetime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn place_lifetime() -> syn::LifetimeDef {$/;"	f
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CtrTest
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::TestData
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CbcTest
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::CtrTest
plain	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        plain: Vec<u8>,$/;"	m	struct:test::EcbTest
plain_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                plain_text: Vec<u8>,$/;"	m	struct:test::TestVector
plain_text	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    plain_text: Vec<u8>,$/;"	m	struct:test::TestVector
plaintext	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^        plaintext: Vec<u8>,$/;"	m	struct:test::Test
point_add_jacobian_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    point_add_jacobian_impl: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:CommonOps
point_double_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn point_double_test($/;"	f	module:tests
point_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn point_mul(&self, p_scalar: &Scalar, (p_x, p_y): &(Elem<R>, Elem<R>)) -> Point {$/;"	P	implementation:PrivateKeyOps
point_mul_base	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn point_mul_base(&self, a: &Scalar) -> Point { (self.point_mul_base_impl)(a) }$/;"	P	implementation:PrivateKeyOps
point_mul_base_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    point_mul_base_impl: fn(a: &Scalar) -> Point,$/;"	m	struct:PrivateKeyOps
point_mul_base_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn point_mul_base_tests(ops: &PrivateKeyOps, test_file: test::File) {$/;"	f	module:tests
point_mul_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    point_mul_impl: unsafe extern "C" fn($/;"	m	struct:PrivateKeyOps
point_mul_serialized_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn point_mul_serialized_test($/;"	f	module:tests
point_mul_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn point_mul_tests(ops: &PrivateKeyOps, test_file: test::File) {$/;"	f	module:tests
point_sum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn point_sum(&self, a: &Point, b: &Point) -> Point {$/;"	P	implementation:CommonOps
point_sum_mixed_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn point_sum_mixed_test($/;"	f	module:tests
point_sum_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn point_sum_test(ops: &PrivateKeyOps, test_file: test::File) {$/;"	f	module:tests
point_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn point_x(&self, p: &Point) -> Elem<R> {$/;"	P	implementation:CommonOps
point_y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn point_y(&self, p: &Point) -> Elem<R> {$/;"	P	implementation:CommonOps
point_z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn point_z(&self, p: &Point) -> Elem<R> {$/;"	P	implementation:CommonOps
poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod poly1305;$/;"	n
poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod poly1305;$/;"	n
poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn poly1305(key: &[u8], msg: &[u8], mac: &mut [u8]) {$/;"	f	module:test
poly1305_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_10(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_1k(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_64k(bh: & mut Bencher) {$/;"	f	module:bench
poly1305_update_padded_16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^fn poly1305_update_padded_16(ctx: &mut poly1305::Context, input: &[u8]) {$/;"	f
polyfill	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod polyfill;$/;"	n
pool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    pool: [Pool; NUM_POOLS],$/;"	m	struct:Fortuna
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    pos: usize,$/;"	m	struct:EncodeUtf8
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:OwnedReadBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:OwnedWriteBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:RefReadBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize$/;"	m	struct:RefWriteBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    pos: usize,$/;"	m	struct:BorrowedWriteBuffer
pos	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/utf8.rs	/^    pos: usize,$/;"	m	struct:Encode
position	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	P	interface:ReadBuffer
position	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	P	interface:WriteBuffer
position	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn position(&self) -> usize;$/;"	P	interface:FixedBuffer
positive_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub fn positive_integer<'a>($/;"	f
positive_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^        fn positive_integer<'a>($/;"	f	method:KeyPair::from_der_reader
positive_minimal_width_from_be_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn positive_minimal_width_from_be_bytes($/;"	P	implementation:BoxedLimbs
pow25523	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn pow25523(&self) -> Fe {$/;"	P	implementation:Fe
power	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn power(table: &[Limb], state: &mut [Limb], n0: &N0, i: Window, num_limbs: usize) {$/;"	f	function:elem_exp_consttime
power	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn power<M>($/;"	f	function:elem_exp_consttime
pre_finish	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    pub(super) fn pre_finish<F>(self, f: F) -> super::Tag$/;"	P	implementation:Context
precondition	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_no_de_lifetime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn precondition_no_de_lifetime(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_sized	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn precondition_sized(cx: &Ctxt, cont: &Container) {$/;"	f
prepare_columnround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_columnround {$/;"	M
prepare_data	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    fn prepare_data(&self, nonce: u64) -> String {$/;"	P	implementation:ProofOfWork
prepare_enum_variant_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn prepare_enum_variant_enum($/;"	f
prepare_rowround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_rowround {$/;"	M
pretend	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod pretend;$/;"	n
pretend_fields_used	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/pretend.rs	/^fn pretend_fields_used(cont: &Container) -> TokenStream {$/;"	f
pretend_used	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/pretend.rs	/^pub fn pretend_used(cont: &Container) -> TokenStream {$/;"	f
pretend_variants_used	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/pretend.rs	/^fn pretend_variants_used(cont: &Container) -> TokenStream {$/;"	f
prev_block_hash	/home/lieroz/blockchain_rust/src/block.rs	/^    prev_block_hash: String,$/;"	m	struct:Block
prev_block_hash	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn prev_block_hash(&self) -> &str {$/;"	P	implementation:Block
primitive	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^pub mod primitive {$/;"	n
primitive_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^macro_rules! primitive_deserializer {$/;"	M
primitive_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! primitive_impl {$/;"	M
print_chain	/home/lieroz/blockchain_rust/src/cli.rs	/^    fn print_chain(&self) {$/;"	P	implementation:CLI
print_usage	/home/lieroz/blockchain_rust/src/cli.rs	/^    fn print_usage(&self) {$/;"	P	implementation:CLI
private	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^mod private {$/;"	n
private	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^pub mod private;$/;"	n
private_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/agreement.rs	/^    private_key: ec::Seed,$/;"	m	struct:EphemeralPrivateKey
private_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^mod private_key;$/;"	n
private_key_as_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn private_key_as_scalar(ops: &PrivateKeyOps, private_key: &ec::Seed) -> Scalar {$/;"	f
private_key_index	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^    pub private_key_index: usize,$/;"	m	struct:Template
private_key_ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    private_key_ops: &'static PrivateKeyOps,$/;"	m	struct:Algorithm
private_key_ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub private_key_ops: &'static PrivateKeyOps,$/;"	m	struct:PublicScalarOps
private_modulus_len_not_multiple_of_512_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn private_modulus_len_not_multiple_of_512_bits() -> Self {$/;"	P	implementation:KeyRejected
private_prefix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    private_prefix: Prefix,$/;"	m	struct:KeyPair
private_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    private_scalar: Scalar,$/;"	m	struct:KeyPair
private_scalar_ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    private_scalar_ops: &'static PrivateScalarOps,$/;"	m	struct:Algorithm
prk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        prk: Vec<u8>,$/;"	m	struct:test::TestVector
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CtrMode
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CtrModeX8
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process<R: ReadBuffer, W: WriteBuffer>($/;"	P	implementation:BlockEngine
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:ChaCha20
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Hc128
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Rc4
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Salsa20
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Sosemanuk
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	P	implementation:Box
process	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]);$/;"	P	interface:SynchronousStreamCipher
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:EcbDecryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:EcbEncryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CbcEncryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	P	implementation:CbcDecryptorProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]/;"	P	interface:BlockProcessor
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn process_block(&mut self, input: &[u8]) {$/;"	P	implementation:Md5State
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! process_block($/;"	M
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	P	implementation:Engine256State
process_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	P	implementation:Engine512State
process_scratch	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn process_scratch<P: BlockProcessor, X: PaddingProcessor>(me: &mut BlockEngine<P, X>) {$/;"	f	method:BlockEngine::process
processor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    processor: P,$/;"	m	struct:BlockEngine
proofofwork	/home/lieroz/blockchain_rust/src/main.rs	/^mod proofofwork;$/;"	n
ps_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    ps_len: usize,$/;"	m	struct:PSSMetrics
pss_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^fn pss_digest($/;"	f
pub_key	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn pub_key(&self) -> String {$/;"	P	implementation:TXInput
pub_key_hash	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn pub_key_hash(&self) -> String {$/;"	P	implementation:TXOutput
pub_key_hash	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub_key_hash: Vec<u8>,$/;"	m	struct:TXOutput
public	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    public: verification::Key,$/;"	m	struct:KeyPair
public_from_private	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    public_from_private:$/;"	m	struct:Curve
public_from_private	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn public_from_private($/;"	f
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    fn public_key(&self) -> &Self::PublicKey { &self.public_key }$/;"	P	implementation:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    public_key: PublicKey,$/;"	m	struct:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub fn public_key(&self) -> &PublicKey { &self.public_key }$/;"	P	implementation:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    public_key: PublicKey,$/;"	m	struct:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^mod public_key;$/;"	n
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn public_key(&self) -> &Self::PublicKey { &self.public_key }$/;"	P	implementation:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    public_key: PublicKey,$/;"	m	struct:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    fn public_key(&self) -> &Self::PublicKey { &self.public_key }$/;"	P	implementation:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    public_key: PublicKey,$/;"	m	struct:KeyPair
public_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^    fn public_key(&self) -> &Self::PublicKey;$/;"	P	interface:KeyPair
public_key	/home/lieroz/blockchain_rust/src/transaction.rs	/^    public_key: Vec<u8>,$/;"	m	struct:TXInput
public_key	/home/lieroz/blockchain_rust/src/wallet.rs	/^    pub fn public_key(&self) -> Vec<u8> {$/;"	P	implementation:Wallet
public_key_is_missing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn public_key_is_missing() -> Self { KeyRejected("PublicKeyIsMissing") }$/;"	P	implementation:KeyRejected
public_key_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^    pub public_key_len: usize,$/;"	m	struct:Curve
public_key_ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub public_key_ops: &'static PublicKeyOps,$/;"	m	struct:PublicScalarOps
public_key_ops_from_curve_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/public_key.rs	/^    fn public_key_ops_from_curve_name(curve_name: &str) -> &'static PublicKeyOps {$/;"	f	module:tests
public_modulus_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    pub fn public_modulus_len(&self) -> usize {$/;"	P	implementation:KeyPair
push_to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn push_to<W: WriteBuffer>(&mut self, output: &mut W) {$/;"	P	interface:ReadBuffer
q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    q: Modulus,$/;"	m	struct:CommonOps
q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    q: PrivatePrime<Q>,$/;"	m	struct:KeyPair
q	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    q: [u32; 512],$/;"	m	struct:Hc128
qInv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    qInv: bigint::Elem<P, R>,$/;"	m	struct:KeyPair
q_minus_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub q_minus_n: Elem<Unencoded>,$/;"	m	struct:PublicScalarOps
q_minus_n_plus_n_equals_0_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn q_minus_n_plus_n_equals_0_test(ops: &PublicScalarOps) {$/;"	f	module:tests
q_mod_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    q_mod_n: bigint::Elem<N, R>,$/;"	m	struct:KeyPair
qq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    qq: bigint::Modulus<QQ>,$/;"	m	struct:KeyPair
quic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub mod quic;$/;"	n
quote_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^macro_rules! quote_block {$/;"	M
quote_expr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^macro_rules! quote_expr {$/;"	M
r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    r         : [u32; 5],$/;"	m	struct:Poly1305
r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        r: u32,$/;"	m	struct:test::Test
r	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    r: u32,$/;"	m	struct:ScryptParams
rand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod rand;$/;"	n
rand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub mod rand {$/;"	n
random_scalar	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn random_scalar($/;"	f
range	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^mod range {$/;"	n
rate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn rate(&self) -> usize {$/;"	P	implementation:Sha3
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Blake2b
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Blake2s
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Ghash
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Hmac
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn raw_result(&mut self, output: &mut [u8]);$/;"	P	interface:Mac
raw_result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Poly1305
rc4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod rc4;$/;"	n
rc4_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_10(bh: & mut Bencher) {$/;"	f	module:bench
rc4_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_1k(bh: & mut Bencher) {$/;"	f	module:bench
rc4_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_64k(bh: & mut Bencher) {$/;"	f	module:bench
rd_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub rd_key: [u32; 4 * (MAX_ROUNDS + 1)],$/;"	m	struct:AES_KEY
read	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^pub mod read;$/;"	n
read	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn read(&mut self, out: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:IoReader
read	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn read(&mut self, out: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:SliceReader
read_all	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn read_all<F, R, E>(&self, incomplete_read: E, read: F)$/;"	P	implementation:Input
read_all_mut	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn read_all_mut<F, R, E>(&self, incomplete_read: E, mut read: F)$/;"	P	implementation:Input
read_all_optional	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^pub fn read_all_optional<F, R, E>(input: Option<Input>,$/;"	f
read_byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn read_byte(&mut self) -> Result<u8, EndOfInput> {$/;"	P	implementation:Reader
read_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn read_bytes(&mut self, count: u64) -> Result<()> {$/;"	P	implementation:Deserializer
read_exact	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn read_exact(&mut self, out: &mut [u8]) -> io::Result<()> {$/;"	P	implementation:IoReader
read_exact	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn read_exact(&mut self, out: &mut [u8]) -> io::Result<()> {$/;"	P	implementation:SliceReader
read_row_major	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn read_row_major(data: &[u8]) -> u32x4 {$/;"	f	function:bit_slice_1x128_with_u32x4
read_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn read_string(&mut self) -> Result<String> {$/;"	P	implementation:Deserializer
read_tag_and_get_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub fn read_tag_and_get_value<'a>($/;"	f
read_type	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn read_type<T>(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
read_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_be(input: &[u8]) -> u32 {$/;"	f
read_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_le(input: &[u8]) -> u32 {$/;"	f
read_u32v_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_be(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u32v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_le(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u64v_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_be(dst: &mut[u64], input: &[u8]) {$/;"	f
read_u64v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_le(dst: &mut[u64], input: &[u8]) {$/;"	f
read_vec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn read_vec(&mut self) -> Result<Vec<u8>> {$/;"	P	implementation:Deserializer
reader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    reader: R,$/;"	m	struct:Deserializer
reader	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    reader: R,$/;"	m	struct:IoReader
recommended_key_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub fn recommended_key_len(digest_alg: &digest::Algorithm) -> usize { digest_alg.chaining_len }$/;"	f
relevant_type_params	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^        relevant_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.buff.len() - self.pos }$/;"	P	implementation:RefReadBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:BorrowedWriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:OwnedReadBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:OwnedWriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	P	implementation:RefWriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:ReadBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:WriteBuffer
remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn remaining(&self) -> usize;$/;"	P	interface:FixedBuffer
remote	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn remote(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
remote	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    remote: Option<syn::Path>,$/;"	m	struct:Container
remove	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    pub fn remove(&mut self, key: &K) -> KVResult {$/;"	f
rename_all_rules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Container
rename_all_rules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Variant
rename_all_rules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Container
rename_all_rules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Variant
rename_by_rules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Field
rename_by_rules	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Variant
rename_fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^fn rename_fields() {$/;"	f
rename_variants	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/case.rs	/^fn rename_variants() {$/;"	f
replacement	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/try.rs	/^pub fn replacement() -> TokenStream {$/;"	f
requested_capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    requested_capacity: usize,$/;"	m	struct:Writer
requires_default	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn requires_default(field: &attr::Field, _variant: Option<&attr::Variant>) -> bool {$/;"	f
reseed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, s: &[u8]) {$/;"	P	implementation:FortunaGenerator
reseed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, seed: &'a [u8]) {$/;"	P	implementation:Fortuna
reseed_count	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    reseed_count: u32,$/;"	m	struct:Fortuna
reserved	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    reserved: [u8; 14],$/;"	m	struct:Blake2bParam
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) { Blake2b::reset(self); }$/;"	P	implementation:Blake2b
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Blake2b
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:Blake2b
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) { Blake2s::reset(self); }$/;"	P	implementation:Blake2s
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Blake2s
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:Blake2s
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset(&mut self) {$/;"	P	implementation:BlockEngine
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:EcbDecryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	P	implementation:EcbEncryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	P	implementation:CtrMode
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	P	implementation:CtrModeX8
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	P	implementation:CbcDecryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	P	implementation:CbcEncryptor
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:OwnedReadBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:OwnedWriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:RefReadBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	P	implementation:RefWriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) {$/;"	P	implementation:BorrowedWriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	P	interface:ReadBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	P	interface:WriteBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn reset(&mut self);$/;"	P	interface:FixedBuffer
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn reset(&mut self);$/;"	P	interface:Digest
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Ghash
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Hmac
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn reset(&mut self);$/;"	P	interface:Mac
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Md5
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Md5State
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Poly1305
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Ripemd160
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha1
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha224
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha256
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha384
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512Trunc224
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha512Trunc256
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Sha3
reset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn reset(&mut self) {$/;"	P	implementation:Whirlpool
reset_with_history	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset_with_history(&mut self, in_hist: &[u8], out_hist: &[u8]) {$/;"	P	implementation:BlockEngine
respan_token_stream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn respan_token_stream(stream: TokenStream, span: Span) -> TokenStream {$/;"	f
respan_token_tree	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn respan_token_tree(mut token: TokenTree, span: Span) -> TokenTree {$/;"	f
rest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    rest: Option<[u8; 16]>$/;"	m	struct:GhashWithC
rest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    rest: Option<[u8; 16]>,$/;"	m	struct:Ghash
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^    mod result {$/;"	n	module:tests
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Blake2b
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	P	implementation:Blake2b
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Blake2s
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	P	implementation:Blake2s
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn result(&mut self, out: &mut [u8]);$/;"	P	interface:Digest
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn result(&mut self, output: &mut [u8]) {$/;"	P	implementation:Pool
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Ghash
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	P	implementation:Ghash
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	P	implementation:GhashWithC
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Hmac
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs	/^    fn result(&mut self) -> MacResult;$/;"	P	interface:Mac
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Md5
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn result(&mut self) -> MacResult {$/;"	P	implementation:Poly1305
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Ripemd160
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn result(&mut self, out: &mut [u8]) { mk_result(self, out) }$/;"	P	implementation:Sha1
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha224
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha256
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha384
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512Trunc224
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha512Trunc256
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Sha3
result	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	P	implementation:Whirlpool
result_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs	/^    fn result_str(&mut self) -> String {$/;"	P	interface:Digest
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:OwnedReadBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:OwnedWriteBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:RefReadBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	P	implementation:RefWriteBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) {$/;"	P	implementation:BorrowedWriteBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	P	interface:ReadBuffer
rewind	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	P	interface:WriteBuffer
ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod ripemd160;$/;"	n
ripemd160_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_10(bh: & mut Bencher) {$/;"	f	module:bench
ripemd160_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_1k(bh: & mut Bencher) {$/;"	f	module:bench
ripemd160_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_64k(bh: & mut Bencher) {$/;"	f	module:bench
ror1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> Self;$/;"	P	interface:AesBitValueOps
ror1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u16 {$/;"	P	implementation:u16
ror1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u32x4 {$/;"	P	implementation:u32x4
ror2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> Self;$/;"	P	interface:AesBitValueOps
ror2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u16 {$/;"	P	implementation:u16
ror2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u32x4 {$/;"	P	implementation:u32x4
ror3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> Self;$/;"	P	interface:AesBitValueOps
ror3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u16 {$/;"	P	implementation:u16
ror3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u32x4 {$/;"	P	implementation:u32x4
rotate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! rotate {$/;"	M
rotl64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^fn rotl64(v: u64, n: usize) -> u64 {$/;"	f
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	M
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	M
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! round{$/;"	M
round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! round($/;"	M
round_function	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    fn round_function(&self, x: u32) -> u32 {$/;"	P	implementation:Blowfish
round_keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    round_keys: [u8; 240]$/;"	m	struct:AesNiDecryptor
round_keys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    round_keys: [u8; 240]$/;"	m	struct:AesNiEncryptor
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub rounds: libc::c_uint,$/;"	m	struct:AES_KEY
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    rounds: u8,$/;"	m	struct:AesNiDecryptor
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    rounds: u8,$/;"	m	struct:AesNiEncryptor
rounds	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            rounds: u32,$/;"	m	struct:test::test_openbsd_vectors::Test
rounds4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! rounds4 {$/;"	M
rounds4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! rounds4 {$/;"	M
rowround	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^fn rowround(state: &mut SalsaState) -> () {$/;"	f
rr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    rr: [Limb; MAX_LIMBS],$/;"	m	struct:Modulus
rsa	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod rsa;$/;"	n
rsa_params	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^macro_rules! rsa_params {$/;"	M
rsa_pkcs1_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^macro_rules! rsa_pkcs1_padding {$/;"	M
rsa_pss_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^macro_rules! rsa_pss_padding {$/;"	M
rsh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn rsh(self, s: u32) -> u32x4 {$/;"	P	implementation:u32x4
run	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^pub fn run<F>(test_file: File, mut f: F)$/;"	f
run	/home/lieroz/blockchain_rust/src/cli.rs	/^    pub fn run(&self) {$/;"	P	implementation:CLI
run	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    pub fn run(&self) -> (u64, String) {$/;"	P	implementation:ProofOfWork
run_full_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_full_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f	module:test
run_inc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc<OpFunc, NextInFunc, NextOutFunc>($/;"	f	module:test
run_inc1_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc1_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f	module:test
run_rand_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_rand_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f	module:test
run_round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    macro_rules! run_round ($/;"	M	function:salsa20_8
run_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn run_test<E: BlockEncryptor, D: BlockDecryptor>(enc: &mut E, dec: &mut D, test: &Test) {$/;"	f	module:test
run_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f	module:test
rust_crypto_aesni_aesimc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_aesimc(round_keys: *mut u8);$/;"	f
rust_crypto_aesni_decrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_decrypt_block($/;"	f
rust_crypto_aesni_encrypt_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_encrypt_block($/;"	f
rust_crypto_aesni_setup_working_key_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_128(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_192(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_256(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_util_fixed_time_eq_asm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_fixed_time_eq_asm($/;"	f
rust_crypto_util_secure_memset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_secure_memset($/;"	f
rust_crypto_util_supports_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_supports_aesni() -> u32;$/;"	f
s	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    s: [[u32; 256]; 4],$/;"	m	struct:Blowfish
s0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s0: u32,$/;"	m	struct:Md5State
s1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s1: u32,$/;"	m	struct:Md5State
s2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s2: u32,$/;"	m	struct:Md5State
s3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    s3: u32$/;"	m	struct:Md5State
s_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    s_len: usize,$/;"	m	struct:PSSMetrics
salsa20	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod salsa20;$/;"	n
salsa20_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_10(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_1k(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_64k(bh: & mut Bencher) {$/;"	f	module:bench
salsa20_8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn salsa20_8(input: &[u8], output: &mut [u8]) {$/;"	f
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::Test
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^            salt: Vec<u8>,$/;"	m	struct:test::test_openbsd_vectors::Test
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    salt: [u8; BLAKE2B_SALTBYTES],$/;"	m	struct:Blake2bParam
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    salt: [u8; BLAKE2S_SALTBYTES],$/;"	m	struct:Blake2sParam
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::TestVector
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^        salt: Vec<u8>,$/;"	m	struct:test::Test
salt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^        salt: &'static str,$/;"	m	struct:test::Test
salted_expand_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn salted_expand_key(&mut self, salt: &[u8], key: &[u8]) {$/;"	P	implementation:Blowfish
sample_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/quic.rs	/^    pub fn sample_len(&self) -> usize { SAMPLE_LEN }$/;"	P	implementation:Algorithm
save_to_file	/home/lieroz/blockchain_rust/src/wallets.rs	/^    pub fn save_to_file(&self) {$/;"	P	implementation:Wallets
sc_muladd	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_muladd(s: &mut[u8], a: &[u8], b: &[u8], c: &[u8]) {$/;"	f
sc_reduce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_reduce(s: &mut [u8]) {$/;"	f
scalar_as_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn scalar_as_elem(&self, a: &Scalar) -> Elem<Unencoded> {$/;"	P	implementation:PublicScalarOps
scalar_bytes_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn scalar_bytes_len(&self) -> usize { self.common.num_limbs * LIMB_BYTES }$/;"	P	implementation:ScalarOps
scalar_from_big_endian_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/private_key.rs	/^pub fn scalar_from_big_endian_bytes($/;"	f
scalar_inv_to_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn scalar_inv_to_mont(&self, a: &Scalar) -> Scalar<R> {$/;"	P	implementation:ScalarOps
scalar_inv_to_mont_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    scalar_inv_to_mont_impl: fn(a: &Scalar) -> Scalar<R>,$/;"	m	struct:ScalarOps
scalar_mul_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    scalar_mul_mont: unsafe extern "C" fn(r: *mut Limb, a: *const Limb, b: *const Limb),$/;"	m	struct:ScalarOps
scalar_mul_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn scalar_mul_test(ops: &ScalarOps, test_file: test::File) {$/;"	f	module:tests
scalar_mult	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^    fn scalar_mult($/;"	f	function:x25519_ecdh
scalar_ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub scalar_ops: &'static ScalarOps,$/;"	m	struct:PrivateScalarOps
scalar_ops	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub scalar_ops: &'static ScalarOps,$/;"	m	struct:PublicScalarOps
scalar_parse_big_endian_fixed_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub fn scalar_parse_big_endian_fixed_consttime($/;"	f
scalar_parse_big_endian_partially_reduced_variable_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub fn scalar_parse_big_endian_partially_reduced_variable_consttime($/;"	f
scalar_parse_big_endian_variable	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub fn scalar_parse_big_endian_variable($/;"	f
scalar_product	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    pub fn scalar_product<EA: Encoding, EB: Encoding>($/;"	P	implementation:ScalarOps
scalar_square_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    fn scalar_square_test($/;"	f	module:tests
scalar_sum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^pub fn scalar_sum(ops: &CommonOps, a: &Scalar, b: &Scalar) -> Scalar {$/;"	f
scatter	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn scatter(table: &mut [Limb], state: &[Limb], i: Window, num_limbs: usize) {$/;"	f	function:elem_exp_consttime
schedule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! schedule {$/;"	M
schedule	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! schedule {$/;"	M
scl_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
scl_n	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Self;$/;"	P	interface:Gf2Ops
scl_n2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
scl_n2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Self;$/;"	P	interface:Gf2Ops
scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod scrypt;$/;"	n
scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt(password: &[u8], salt: &[u8], params: &ScryptParams, output: &mut [u8]) {$/;"	f
scrypt_block_mix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_block_mix(input: &[u8], output: &mut [u8]) {$/;"	f
scrypt_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
scrypt_ro_mix	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_ro_mix(b: &mut [u8], v: &mut [u8], t: &mut [u8], n: usize) {$/;"	f
scrypt_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_simple(password: &str, params: &ScryptParams) -> io::Result<String> {$/;"	f
seal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    seal: fn($/;"	m	struct:Algorithm
seal_in_place	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^pub fn seal_in_place($/;"	f
sealed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^mod sealed {$/;"	n
secure_memset	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn secure_memset(dst: &mut [u8], val: u8) {$/;"	f
seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    seed: Seed,$/;"	m	struct:KeyPair
select	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn select(pos: usize, b: i8) -> GePrecomp {$/;"	P	implementation:GePrecomp
self_var	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    self_var: Ident,$/;"	m	struct:Parameters
semantics	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^        fn semantics() {$/;"	f	module:tests::result
send	/home/lieroz/blockchain_rust/src/cli.rs	/^    fn send(&self, from: &str, to: &str, amount: i32) {$/;"	P	implementation:CLI
seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    seq: A,$/;"	m	struct:SeqAccessDeserializer
seq_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! seq_impl {$/;"	M
seq_impl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! seq_impl {$/;"	M
ser	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^mod ser;$/;"	n
ser	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    ser: &'a mut Serializer<W, O>,$/;"	m	struct:Compound
ser	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    ser: &'a mut SizeChecker<S>,$/;"	m	struct:SizeCompound
ser	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/mod.rs	/^pub mod ser;$/;"	n
ser	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod ser;$/;"	n
ser_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
ser_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
ser_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
ser_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
ser_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
ser_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
serde_if_integer128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/integer128.rs	/^macro_rules! serde_if_integer128 {$/;"	M
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn serialize<T: ?Sized + serde::Serialize>(&self, t: &T) -> Result<Vec<u8>> {$/;"	P	implementation:Config
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn serialize<T: ?Sized, O>(value: &T, mut options: O) -> Result<Vec<u8>>$/;"	f
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn serialize<T: ?Sized>(value: &T) -> Result<Vec<u8>>$/;"	f
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:content::Content
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Arguments
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CStr
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CString
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Duration
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:IpAddr
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv4Addr
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv6Addr
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsStr
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsString
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Path
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PathBuf
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PhantomData
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddr
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV4
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV6
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:String
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SystemTime
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:T
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:str
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	interface:Serialize
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    serialize: RenameRule,$/;"	m	struct:RenameAllRules
serialize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    serialize: String,$/;"	m	struct:Name
serialize	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn serialize(&self) -> Vec<u8> {$/;"	P	implementation:Block
serialize_adjacently_tagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_adjacently_tagged_variant($/;"	f
serialize_body	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_bool(self, _: bool) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_bool(self, v: bool) -> Result<()> {$/;"	P	implementation:Serializer
serialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_bool(self, v: bool) -> Result<Content, E> {$/;"	f	module:content
serialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_bytes(self, v: &[u8]) -> Result<()> {$/;"	P	implementation:Serializer
serialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_bytes(self, v: &[u8]) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_bytes(self, value: &[u8]) -> Result<Content, E> {$/;"	f	module:content
serialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_char(self, c: char) -> Result<()> {$/;"	P	implementation:Serializer
serialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_char(self, c: char) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_char(self, v: char) -> Result<Content, E> {$/;"	f	module:content
serialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_display_bounded_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! serialize_display_bounded_length {$/;"	M
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SizeCompound
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeSeq
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTuple
serialize_element	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    fn serialize_element(&self, span: Span) -> TokenStream {$/;"	P	implementation:TupleTrait
serialize_entry	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_entry<K: ?Sized, V: ?Sized>(&mut self, key: &K, value: &V) -> Result<(), E>$/;"	f	module:content
serialize_entry	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	P	interface:SerializeMap
serialize_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_enum(params: &Parameters, variants: &[Variant], cattrs: &attr::Container) -> Fragme/;"	f
serialize_externally_tagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_externally_tagged_variant($/;"	f
serialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_f32(self, v: f32) -> Result<()> {$/;"	P	implementation:Serializer
serialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_f32(self, v: f32) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_f32(self, v: f32) -> Result<Content, E> {$/;"	f	module:content
serialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_f64(self, v: f64) -> Result<()> {$/;"	P	implementation:Serializer
serialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_f64(self, v: f64) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_f64(self, v: f64) -> Result<Content, E> {$/;"	f	module:content
serialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, _key: &'static str, value: &T) -> Result<()>$/;"	P	implementation:SizeCompound
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, _key: &'static str, value: &T) -> Result<()>$/;"	f
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SizeCompound
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>($/;"	f	module:content
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), M::Error>$/;"	f	module:content
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_field<T: ?Sized>($/;"	f
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStruct
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStructVariant
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleStruct
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleVariant
serialize_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    fn serialize_field(&self, span: Span) -> TokenStream {$/;"	P	implementation:StructTrait
serialize_i128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i128(self, v: i128) -> Result<()> {$/;"	P	implementation:Serializer
serialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i16(self, v: i16) -> Result<()> {$/;"	P	implementation:Serializer
serialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i16(self, v: i16) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_i16(self, v: i16) -> Result<Content, E> {$/;"	f	module:content
serialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i32(self, v: i32) -> Result<()> {$/;"	P	implementation:Serializer
serialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i32(self, v: i32) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_i32(self, v: i32) -> Result<Content, E> {$/;"	f	module:content
serialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i64(self, v: i64) -> Result<()> {$/;"	P	implementation:Serializer
serialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i64(self, v: i64) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_i64(self, v: i64) -> Result<Content, E> {$/;"	f	module:content
serialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i8(self, v: i8) -> Result<()> {$/;"	P	implementation:Serializer
serialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_i8(self, v: i8) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_i8(self, v: i8) -> Result<Content, E> {$/;"	f	module:content
serialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_internally_tagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_internally_tagged_variant($/;"	f
serialize_into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn serialize_into<W: Write, T: ?Sized + serde::Serialize>($/;"	P	implementation:Config
serialize_into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn serialize_into<W, T: ?Sized, O>(writer: W, value: &T, mut options: O) -> Result<()/;"	f
serialize_into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn serialize_into<W, T: ?Sized>(writer: W, value: &T) -> Result<()>$/;"	f
serialize_into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_into(params: &Parameters, type_into: &syn::Type) -> Fragment {$/;"	f
serialize_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_key<K: ?Sized>(&mut self, value: &K) -> Result<()>$/;"	P	implementation:SizeCompound
serialize_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_key<K: ?Sized>(&mut self, value: &K) -> Result<()>$/;"	f
serialize_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), E>$/;"	f	module:content
serialize_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	f
serialize_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Error>$/;"	f
serialize_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:Serializer
serialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:SizeChecker
serialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, E> {$/;"	f	module:content
serialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error>;$/;"	P	interface:Serializer
serialize_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn serialize_name(&self) -> String {$/;"	P	implementation:Name
serialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_newtype_struct<T: ?Sized>(self, _name: &'static str, value: &T) -> Result<()>$/;"	P	implementation:Serializer
serialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_newtype_struct<V: serde::Serialize + ?Sized>($/;"	P	implementation:SizeChecker
serialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_newtype_struct<T: ?Sized>($/;"	f	module:content
serialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	f
serialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	P	interface:Serializer
serialize_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_newtype_struct($/;"	f
serialize_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	implementation:Serializer
serialize_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_newtype_variant<V: serde::Serialize + ?Sized>($/;"	P	implementation:SizeChecker
serialize_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_newtype_variant<T: ?Sized>($/;"	f	module:content
serialize_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	f
serialize_newtype_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	interface:Serializer
serialize_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	P	implementation:Serializer
serialize_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_none(self) -> Result<Content, E> {$/;"	f	module:content
serialize_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_renamed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    serialize_renamed: bool,$/;"	m	struct:Name
serialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:Serializer
serialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:SizeChecker
serialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, E> {$/;"	f	module:content
serialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {$/;"	f
serialize_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error>;$/;"	P	interface:Serializer
serialize_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_some<T: ?Sized>(self, v: &T) -> Result<()>$/;"	P	implementation:Serializer
serialize_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_some<T: ?Sized>(self, v: &T) -> Result<()>$/;"	P	implementation:SizeChecker
serialize_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Content, E>$/;"	f	module:content
serialize_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
serialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_str(self, v: &str) -> Result<()> {$/;"	P	implementation:Serializer
serialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_str(self, v: &str) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_str(self, value: &str) -> Result<Content, E> {$/;"	f	module:content
serialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:Serializer
serialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:SizeChecker
serialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_struct($/;"	f	module:content
serialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_struct($/;"	f
serialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_struct($/;"	P	interface:Serializer
serialize_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct(params: &Parameters, fields: &[Field], cattrs: &attr::Container) -> Fragment/;"	f
serialize_struct_as_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct_as_map($/;"	f
serialize_struct_as_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct_as_struct($/;"	f
serialize_struct_tag_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct_tag_field(cattrs: &attr::Container, struct_trait: &StructTrait) -> TokenStre/;"	f
serialize_struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_struct_variant($/;"	P	implementation:Serializer
serialize_struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_struct_variant($/;"	P	implementation:SizeChecker
serialize_struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_struct_variant($/;"	f	module:content
serialize_struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_struct_variant($/;"	P	interface:Serializer
serialize_struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct_variant<'a>($/;"	f
serialize_struct_variant_with_flatten	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct_variant_with_flatten<'a>($/;"	f
serialize_struct_visitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_struct_visitor($/;"	f
serialize_tagged_newtype	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^pub fn serialize_tagged_newtype<S, T>($/;"	f
serialize_transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:Serializer
serialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:SizeChecker
serialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, E> {$/;"	f	module:content
serialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> {$/;"	f
serialize_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;$/;"	P	interface:Serializer
serialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:Serializer
serialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:SizeChecker
serialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_tuple_struct($/;"	f	module:content
serialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_tuple_struct($/;"	P	interface:Serializer
serialize_tuple_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_tuple_struct($/;"	f
serialize_tuple_struct_visitor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_tuple_struct_visitor($/;"	f
serialize_tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:Serializer
serialize_tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:SizeChecker
serialize_tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_tuple_variant($/;"	f	module:content
serialize_tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_tuple_variant($/;"	P	interface:Serializer
serialize_tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_tuple_variant($/;"	f
serialize_u128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u128(self, v: u128) -> Result<()> {$/;"	P	implementation:Serializer
serialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u16(self, v: u16) -> Result<()> {$/;"	P	implementation:Serializer
serialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u16(self, v: u16) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_u16(self, v: u16) -> Result<Content, E> {$/;"	f	module:content
serialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u32(self, v: u32) -> Result<()> {$/;"	P	implementation:Serializer
serialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u32(self, v: u32) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_u32(self, v: u32) -> Result<Content, E> {$/;"	f	module:content
serialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u64(self, v: u64) -> Result<()> {$/;"	P	implementation:Serializer
serialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u64(self, v: u64) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_u64(self, v: u64) -> Result<Content, E> {$/;"	f	module:content
serialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u8(self, v: u8) -> Result<()> {$/;"	P	implementation:Serializer
serialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_u8(self, v: u8) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_u8(self, v: u8) -> Result<Content, E> {$/;"	f	module:content
serialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	P	implementation:Serializer
serialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_unit(self) -> Result<Content, E> {$/;"	f	module:content
serialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_unit_struct(self, _: &'static str) -> Result<()> {$/;"	P	implementation:Serializer
serialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_unit_struct(self, _: &'static str) -> Result<()> {$/;"	P	implementation:SizeChecker
serialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_unit_struct(self, name: &'static str) -> Result<Content, E> {$/;"	f	module:content
serialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_unit_struct(cattrs: &attr::Container) -> Fragment {$/;"	f
serialize_unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_unit_variant($/;"	P	implementation:Serializer
serialize_unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_unit_variant($/;"	P	implementation:SizeChecker
serialize_unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_unit_variant($/;"	f	module:content
serialize_unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_unit_variant($/;"	f
serialize_unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_unit_variant($/;"	P	interface:Serializer
serialize_untagged_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_untagged_variant($/;"	f
serialize_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_value<V: ?Sized>(&mut self, value: &V) -> Result<()>$/;"	P	implementation:SizeCompound
serialize_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    fn serialize_value<V: ?Sized>(&mut self, value: &V) -> Result<()>$/;"	f
serialize_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	f
serialize_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn serialize_variant($/;"	f
serialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
serialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
serialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
serialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
serialized_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn serialized_size<T: ?Sized + serde::Serialize>(&self, t: &T) -> Result<u64> {$/;"	P	implementation:Config
serialized_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^pub(crate) fn serialized_size<T: ?Sized, O: Options>(value: &T, mut options: O) -> Result<u64>$/;"	f
serialized_size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn serialized_size<T: ?Sized>(value: &T) -> Result<u64>$/;"	f
set	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn set<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:Attr
set_domain_sep	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_domain_sep(out_len: usize, buf: &mut [u8]) {$/;"	f	method:Sha3::finalize
set_id	/home/lieroz/blockchain_rust/src/transaction.rs	/^    fn set_id(&mut self) {$/;"	P	implementation:Transaction
set_if_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn set_if_none(&mut self, value: T) {$/;"	P	implementation:Attr
set_lastblock	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastblock(&mut self) {$/;"	P	implementation:Blake2b
set_lastblock	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastblock(&mut self) {$/;"	P	implementation:Blake2s
set_lastnode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastnode(&mut self) {$/;"	P	implementation:Blake2b
set_lastnode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastnode(&mut self) {$/;"	P	implementation:Blake2s
set_opt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn set_opt<A: ToTokens>(&mut self, obj: A, value: Option<T>) {$/;"	P	implementation:Attr
set_pad	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_pad(offset: usize, buf: &mut [u8]) {$/;"	f	method:Sha3::finalize
set_true	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    fn set_true<A: ToTokens>(&mut self, obj: A) {$/;"	P	implementation:BoolAttr
setup	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^fn setup(cost: u32, salt: &[u8], key: &[u8]) -> Blowfish {$/;"	f
setup_working_key_aesni_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_128(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_192(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_256(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^mod sha1;$/;"	n
sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha1;$/;"	n
sha1_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_10(bh: & mut Bencher) {$/;"	f	module:bench
sha1_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha1_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha1_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_block(bh: & mut Bencher) {$/;"	f	module:bench
sha1_digest_round_x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_digest_round_x4(abcd: u32x4, work: u32x4, i: i8) -> u32x4 {$/;"	f
sha1_first	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first(w0: u32x4) -> u32 {$/;"	f
sha1_first_add	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_add(e: u32, w0: u32x4) -> u32x4 {$/;"	f
sha1_first_half	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_half(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1_schedule_x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha1msg1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg1(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1msg2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg2(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1rnds4c	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4c(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4m	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4m(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4p	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4p(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha2;$/;"	n
sha256_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_10(bh: & mut Bencher) {$/;"	f	module:bench
sha256_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha256_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha256_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_block(bh: & mut Bencher) {$/;"	f	module:bench
sha256_digest_round_x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_digest_round_x2(cdgh: u32x4, abef: u32x4, wk: u32x4) -> u32x4 {$/;"	f
sha256_format_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^fn sha256_format_output(input: State) -> Output {$/;"	f
sha256_schedule_x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256load	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256load(v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256msg1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg1(v0: u32x4, v1: u32x4) -> u32x4 {$/;"	f
sha256msg2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg2(v4: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256swap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256swap(v0: u32x4) -> u32x4 {$/;"	f
sha3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha3;$/;"	n
sha3_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_224() -> Sha3 {$/;"	P	implementation:Sha3
sha3_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_256() -> Sha3 {$/;"	P	implementation:Sha3
sha3_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_384() -> Sha3 {$/;"	P	implementation:Sha3
sha3_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_512() -> Sha3 {$/;"	P	implementation:Sha3
sha512_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_10(bh: & mut Bencher) {$/;"	f	module:bench
sha512_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_1k(bh: & mut Bencher) {$/;"	f	module:bench
sha512_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_64k(bh: & mut Bencher) {$/;"	f	module:bench
sha512_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_block(bh: & mut Bencher) {$/;"	f	module:bench
sha512_digest_round	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_digest_round(ae: u64x2, bf: u64x2, cg: u64x2, dh: u64x2, wk0: u64) -> u64x2 {$/;"	f
sha512_format_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^fn sha512_format_output(input: State) -> Output {$/;"	f
sha512_schedule_x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_schedule_x2(v0: u64x2, v1: u64x2, v4to5: u64x2, v7: u64x2) -> u64x2 {$/;"	f
sha512load	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^fn sha512load(v0: u64x2, v1: u64x2) -> u64x2 {$/;"	f
shake_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_128() -> Sha3 {$/;"	P	implementation:Sha3
shake_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_256() -> Sha3 {$/;"	P	implementation:Sha3
shift	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^mod shift;$/;"	n
shift_partial	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/shift.rs	/^pub fn shift_partial<F>((in_prefix_len, in_out): (usize, &mut [u8]), transform: F)$/;"	f
shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> Self;$/;"	P	interface:AesBitValueOps
shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u16 {$/;"	P	implementation:u16
shift_row	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u32x4 {$/;"	P	implementation:u32x4
shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
shift_rows	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Self;$/;"	P	interface:AesOps
shl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, amt: usize) -> u32x4 {$/;"	P	implementation:fake::u32x4
shl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
shr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, amt: usize) -> u32x4 {$/;"	P	implementation:fake::u32x4
shr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
sig_r_equals_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^        fn sig_r_equals_x($/;"	f	method:Algorithm::verify_digest
sigma0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0(x: u64) -> u64 {$/;"	f	function:sha512_schedule_x2
sigma0x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0x4(x: u32x4) -> u32x4 {$/;"	f	function:sha256msg1
sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma1(x: u64) -> u64 {$/;"	f	function:sha512_schedule_x2
sigma1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! sigma1 {$/;"	M	function:sha256msg2
sign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^pub(super) fn sign(key: Key, input: &[u8]) -> Tag {$/;"	f
sign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^    pub fn sign(&self, msg: &[u8]) -> signature::Signature {$/;"	P	implementation:KeyPair
sign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    pub fn sign($/;"	P	implementation:KeyPair
sign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn sign(mut self) -> Signature {$/;"	P	implementation:SigningContext
sign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub fn sign(key: &SigningKey, data: &[u8]) -> Signature {$/;"	f
sign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    pub fn sign($/;"	P	implementation:KeyPair
sign	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn sign(&self, priv_key: ) {$/;"	P	implementation:Transaction
sign_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn sign_($/;"	P	implementation:KeyPair
sign_verify_cases	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^    fn sign_verify_cases() {$/;"	f	module:tests
signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod signature;$/;"	n
signature	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn signature(message: &[u8], secret_key: &[u8]) -> [u8; 64] {$/;"	f
signature	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn signature(&self) -> String {$/;"	P	implementation:TXInput
signature	/home/lieroz/blockchain_rust/src/transaction.rs	/^    signature: Vec<u8>,$/;"	m	struct:TXInput
signature_ecdsa_sign_asn1_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn signature_ecdsa_sign_asn1_test() {$/;"	f	module:tests
signature_ecdsa_sign_fixed_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^    fn signature_ecdsa_sign_fixed_test() {$/;"	f	module:tests
signing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519.rs	/^pub mod signing;$/;"	n
signing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa.rs	/^pub mod signing;$/;"	n
signing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^pub mod signing;$/;"	n
simd	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod simd;$/;"	n
simd_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self {$/;"	P	implementation:u32x4
simd_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self;$/;"	P	interface:SimdExt
size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs	/^fn size(rounds: u8) -> usize { 16 * ((rounds as usize) + 1) }$/;"	f
size	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn size(&self) -> usize;$/;"	P	interface:FixedBuffer
size_and_alignment	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^        fn size_and_alignment() {$/;"	f	module:tests::result
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:deserialize_map::Access
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:deserialize_tuple::Access
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:MapAccess
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:SeqAccess
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn size_hint(&self) -> Option<usize> {$/;"	f	module:content
size_hint	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^pub mod size_hint {$/;"	n
skip	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn skip(&mut self, num_bytes: usize) -> Result<(), EndOfInput> {$/;"	P	implementation:Reader
skip_and_get_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn skip_and_get_input(&mut self, num_bytes: usize)$/;"	P	implementation:Reader
skip_deserializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Field
skip_deserializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Variant
skip_deserializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Field
skip_deserializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Variant
skip_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStruct
skip_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStructVariant
skip_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    fn skip_field(&self, span: Span) -> Option<TokenStream> {$/;"	P	implementation:StructTrait
skip_serializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Field
skip_serializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Variant
skip_serializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Field
skip_serializing	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Variant
skip_serializing_if	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn skip_serializing_if(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
skip_serializing_if	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    skip_serializing_if: Option<syn::ExprPath>,$/;"	m	struct:Field
skip_to_end	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    pub fn skip_to_end(&mut self) -> Input<'a> {$/;"	P	implementation:Reader
slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    slice: &'storage [u8],$/;"	m	struct:SliceReader
slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^pub mod slice {$/;"	n
slide	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn slide(a: &[u8]) -> [i8; 256] {$/;"	P	implementation:GeP2
small_nonnegative_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^pub fn small_nonnegative_integer(input: &mut untrusted::Reader) -> Result<u8, error::Unspecified/;"	f
sosemanuk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod sosemanuk;$/;"	n
sosemanuk_10	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_10(bh: & mut Bencher) {$/;"	f	module:bench
sosemanuk_1k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_1k(bh: & mut Bencher) {$/;"	f	module:bench
sosemanuk_64k	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_64k(bh: & mut Bencher) {$/;"	f	module:bench
spanned_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn spanned_tokens(s: &syn::LitStr) -> parse::Result<TokenStream> {$/;"	f
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/keys.rs	/^    pub fn split(self) -> (Seed, PublicKey) { (self.seed, self.public_key) }$/;"	P	implementation:KeyPair
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs2State<T>, Bs2State<T>) {$/;"	P	implementation:Bs4State
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs4State<T>, Bs4State<T>) {$/;"	P	implementation:Bs8State
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (T, T) {$/;"	P	implementation:Bs2State
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        fn split(self) -> (A, B) {$/;"	P	implementation:private::B
split	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        fn split(self) -> (Self::First, Self::Second);$/;"	P	interface:private::Pair
split_at	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn split_at<'a>(vec: &'a [u8], at: usize) -> (&'a [u8], &'a [u8]) {$/;"	f	method:BlockEngine::fast_mode
split_input	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn split_input() {$/;"	f	module:test
split_rs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    split_rs:$/;"	m	struct:Algorithm
split_rs_asn1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^fn split_rs_asn1<'a>($/;"	f
split_rs_fixed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^fn split_rs_fixed<'a>($/;"	f
split_with_de_lifetime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn split_with_de_lifetime($/;"	f
sq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Bs2State<T> {$/;"	P	implementation:Bs2State
sq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Self;$/;"	P	interface:Gf2Ops
sq_scl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Bs4State<T> {$/;"	P	implementation:Bs4State
sq_scl	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Self;$/;"	P	interface:Gf4Ops
sqr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn sqr(a: &Scalar<R>) -> Scalar<R> { unary_op(GFp_p256_scalar_sqr_mont, a) }$/;"	f	function:p256_scalar_inv_to_mont
sqr	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn sqr(a: &Scalar<R>) -> Scalar<R> { binary_op(GFp_p384_scalar_mul_mont, a, a) }$/;"	f	function:p384_scalar_inv_to_mont
sqr_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul(a: &Elem<R>, squarings: usize, b: &Elem<R>) -> Elem<R> {$/;"	f	function:p256_elem_inv_squared
sqr_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul(a: &Scalar<R>, squarings: Limb, b: &Scalar<R>) -> Scalar<R> {$/;"	f	function:p256_scalar_inv_to_mont
sqr_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul(a: &Elem<R>, squarings: usize, b: &Elem<R>) -> Elem<R> {$/;"	f	function:p384_elem_inv_squared
sqr_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul(a: &Scalar<R>, squarings: usize, b: &Scalar<R>) -> Scalar<R> {$/;"	f	function:p384_scalar_inv_to_mont
sqr_mul_acc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul_acc(a: &mut Elem<R>, squarings: usize, b: &Elem<R>) {$/;"	f	function:p256_elem_inv_squared
sqr_mul_acc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn sqr_mul_acc(acc: &mut Scalar<R>, squarings: Limb, b: &Scalar<R>) {$/;"	f	function:p256_scalar_inv_to_mont
sqr_mul_acc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul_acc(a: &mut Elem<R>, squarings: usize, b: &Elem<R>) {$/;"	f	function:p384_elem_inv_squared
sqr_mul_acc	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mul_acc(acc: &mut Scalar<R>, squarings: usize, b: &Scalar<R>) {$/;"	f	function:p384_scalar_inv_to_mont
sqr_mut	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn sqr_mut(a: &mut Scalar<R>) { unary_op_from_binary_op_assign(GFp_p384_scalar_mul_mont, a);/;"	f	function:p384_scalar_inv_to_mont
square	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square(&self) -> Fe {$/;"	P	implementation:Fe
square_and_double	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_and_double(&self) -> Fe {$/;"	P	implementation:Fe
square_by_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_by_mul() {$/;"	f	module:tests
standard_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, func: F);$/;"	P	interface:StandardPadding
standard_padding	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, mut func: F) {$/;"	P	implementation:T
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    state: State,$/;"	m	struct:Context
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    state: BlockEngineState$/;"	m	struct:BlockEngine
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    state  : ChaChaState,$/;"	m	struct:ChaCha20
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    state: Sha256,$/;"	m	struct:Pool
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    state: Gf128,$/;"	m	struct:Ghash
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    state: Gf128,$/;"	m	struct:GhashWithC
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    state: Md5State,$/;"	m	struct:Md5
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    state: [u8; 256]$/;"	m	struct:Rc4
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    state: SalsaState,$/;"	m	struct:Salsa20
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    state: Engine256State,$/;"	m	struct:Engine256
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    state: Engine512State,$/;"	m	struct:Engine512
state	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    state: [u8; B],  \/\/ B bytes$/;"	m	struct:Sha3
state_to_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! state_to_buffer {$/;"	M
step	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn step(&mut self) -> u32 {$/;"	P	implementation:Hc128
step_by	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^mod step_by;$/;"	n
step_up	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T> {$/;"	f
step_up	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T>;$/;"	P	interface:RangeExt
store	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    store: &'a mut KV<String, StoreValue>,$/;"	m	struct:BlockchainIterator
store	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    store: KV<String, StoreValue>,$/;"	m	struct:Blockchain
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^const CHECK_TEST_CASES: &'static [(&'static [u8], &'static str)] = &[$/;"	v
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^const TEST_CASES: &'static [(&'static [u8], &'static str)] = &[$/;"	v
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^impl FromBase58 for str {$/;"	c
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^        &'static str,$/;"	v	module:tests
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	v	function:pbkdf2_check
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	v	function:scrypt_check
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	v	module:test
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs", "nanos"];$/;"	v	method:Duration::deserialize
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs_since_epoch", "nanos_since_epoch"];$/;"	v	method:SystemTime::deserialize
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Ok", "Err"];$/;"	v	function:deserialize
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Unbounded", "Included", "Excluded"];$/;"	v	function:deserialize
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    pub const FIELDS: &'static [&'static str] = &["start", "end"];$/;"	v	module:range
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a str {$/;"	c
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^impl<'a> Expected for &'a str {$/;"	c
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for &'a str$/;"	c
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a str$/;"	c
str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^impl Serialize for str {$/;"	c
string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/export.rs	/^mod string {$/;"	n
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	P	implementation:EncPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	P	implementation:NoPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, a: &mut R) -> bool { self.padding.strip_output(a) /;"	P	implementation:DecPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool {$/;"	P	implementation:PkcsPadding
strip_output	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool;$/;"	P	interface:PaddingProcessor
struct_from_ast	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^fn struct_from_ast<'a>($/;"	f
struct_pattern	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/pretend.rs	/^fn struct_pattern(fields: &[Field]) -> TokenStream {$/;"	f
struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn struct_variant<V>(self, fields: &'static [&'static str], visitor: V) -> Result<V::Value>$/;"	f
struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn struct_variant<V>($/;"	P	interface:VariantAccess
struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        fn struct_variant<V>($/;"	f	module:private
struct_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn struct_variant<V>($/;"	f	module:content
style	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub style: Style,$/;"	m	struct:Variant
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: Fe) -> Fe {$/;"	P	implementation:Fe
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GeCached) -> GeP1P1 {$/;"	P	implementation:GeP3
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	P	implementation:GeP3
sub	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^        fn sub(self, rhs: u32x4) -> u32x4 {$/;"	P	implementation:fake::u32x4
sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
sub_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Self;$/;"	P	interface:AesOps
sub_word	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn sub_word(x: u32) -> u32 {$/;"	f
subblocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    subblocks: [u64; 2],$/;"	m	struct:Block
subkeys	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    subkeys: [u32; 100],$/;"	m	struct:Sosemanuk
suite_b	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec.rs	/^pub mod suite_b;$/;"	n
suite_b_curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/curve.rs	/^macro_rules! suite_b_curve {$/;"	M
supports_aesni	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^pub fn supports_aesni() -> bool {$/;"	f
swap_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn swap_test() {$/;"	f	module:tests
swizzle	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! swizzle{$/;"	M
symm_enc_or_dec	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn symm_enc_or_dec<S: SynchronousStreamCipher, R: ReadBuffer, W: WriteBuffer>($/;"	f
symmetriccipher	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod symmetriccipher;$/;"	n
syntax_error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^    fn syntax_error() { test::run(test_file!("test_1_syntax_error_tests.txt"), |_, _| Ok(())); }$/;"	f	module:tests
sysrand	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod sysrand {$/;"	n
sysrand_chunk	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod sysrand_chunk {$/;"	n
sysrand_or_urandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod sysrand_or_urandom {$/;"	n
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    t: Elem<T>,$/;"	m	struct:ExtPoint
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    t: [u64; 2],$/;"	m	struct:Blake2b
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    t: [u32; 2],$/;"	m	struct:Blake2s
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t: Fe,$/;"	m	struct:GeP1P1
t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t: Fe,$/;"	m	struct:GeP3
t2d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    t2d: Fe,$/;"	m	struct:GeCached
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^                tag:  Vec<u8>,$/;"	m	struct:test::TestVector
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    tag: Vec<u8>$/;"	m	struct:test::TestVector
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        pub tag: T,$/;"	m	struct:content::TaggedContent
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    tag: &'static str,$/;"	m	struct:TaggedSerializer
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn tag(&self) -> &TagType {$/;"	P	implementation:Container
tag	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    tag: TagType,$/;"	m	struct:Container
tag_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead.rs	/^    pub fn tag_len(&self) -> usize { TAG_LEN }$/;"	P	implementation:Algorithm
tag_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        tag_name: &'static str,$/;"	m	struct:content::TaggedContentVisitor
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	P	implementation:OwnedReadBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	P	implementation:RefReadBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8];$/;"	P	interface:ReadBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8] {$/;"	P	implementation:RefWriteBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8];$/;"	P	interface:WriteBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<'a>(&'a mut self, count: usize) -> &'a mut [u8] {$/;"	P	implementation:OwnedWriteBuffer
take_next	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<>(&mut self, count: usize) -> &mut [u8] {$/;"	P	implementation:BorrowedWriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:BorrowedWriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	P	implementation:RefWriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer;$/;"	P	interface:WriteBuffer
take_read_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	P	implementation:OwnedWriteBuffer
take_remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &[u8] {$/;"	P	interface:ReadBuffer
take_remaining	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &mut [u8] {$/;"	P	interface:WriteBuffer
target	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    target: String,$/;"	m	struct:ProofOfWork
temp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    temp: Vec<u8>$/;"	m	struct:CbcDecryptorProcessor
temp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    temp: Vec<u8>$/;"	m	struct:CbcEncryptorProcessor
temp_buffer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    temp_buffer: Vec<u8>,$/;"	m	struct:IoReader
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/digest_scalar.rs	/^    fn test() {$/;"	f	module:tests
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/lib.rs	/^pub mod test;$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test() {$/;"	f	module:tests
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn test() {$/;"	f	module:tests
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^mod test {$/;"	n
test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^mod test {$/;"	n
test_1million_random_md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_1million_random_md5() {$/;"	f	module:tests
test_1million_random_ripemd160	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test_1million_random_ripemd160() {$/;"	f	module:tests
test_1million_random_sha1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^    fn test_1million_random_sha1() {$/;"	f	module:tests
test_1million_random_sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha256() {$/;"	f	module:tests
test_1million_random_sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha512() {$/;"	f	module:tests
test_accumulator_correctness	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_accumulator_correctness() {$/;"	f	module:tests
test_add_bytes_to_bits_ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_ok() {$/;"	f	module:test
test_add_bytes_to_bits_overflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_overflow() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok2() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_ok3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok3() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_overflow	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow() {$/;"	f	module:test
test_add_bytes_to_bits_tuple_overflow2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow2() {$/;"	f	module:test
test_aes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^    pub fn test_aes() {$/;"	f	module:tests
test_aesni_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_128() {$/;"	f	module:test
test_aesni_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_192() {$/;"	f	module:test
test_aesni_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_256() {$/;"	f	module:test
test_aessafe_128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128() {$/;"	f	module:test
test_aessafe_128_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128_x8() {$/;"	f	module:test
test_aessafe_192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192() {$/;"	f	module:test
test_aessafe_192_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192_x8() {$/;"	f	module:test
test_aessafe_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256() {$/;"	f	module:test
test_aessafe_256_x8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256_x8() {$/;"	f	module:test
test_agreement_suite_b_ecdh_generate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^    fn test_agreement_suite_b_ecdh_generate() {$/;"	f	module:tests
test_avx_movbe_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        fn test_avx_movbe_mask() {$/;"	f	module:intel::x86_64_tests
test_badly_seeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_badly_seeded() {$/;"	f	module:tests
test_bcrypt_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_bcrypt_hash() {$/;"	f	module:test
test_big_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/endian.rs	/^    fn test_big_endian() {$/;"	f	module:tests
test_big_endian_from_limbs_fewer_limbs	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_big_endian_from_limbs_fewer_limbs() {$/;"	f	module:tests
test_big_endian_from_limbs_same_length	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_big_endian_from_limbs_same_length() {$/;"	f	module:tests
test_bitxor_assign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    fn test_bitxor_assign() {$/;"	f	module:tests
test_blake2b_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_digest() {$/;"	f	module:digest_tests
test_blake2b_mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_mac() {$/;"	f	module:mac_tests
test_blake2s_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_digest() {$/;"	f	module:digest_tests
test_blake2s_mac	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_mac() {$/;"	f	module:mac_tests
test_chacha20_256_poly1305_boringssl_vectors_decrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_decrypt() {$/;"	f	module:test
test_chacha20_256_poly1305_boringssl_vectors_encrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_encrypt() {$/;"	f	module:test
test_chacha20_256_tls_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors() {$/;"	f	module:test
test_chacha20_256_tls_vectors_96_nonce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors_96_nonce() {$/;"	f	module:test
test_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    fn test_check(){$/;"	f	module:test_check
test_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^mod test_check{$/;"	n
test_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^mod test_check {$/;"	n
test_check_ver_failed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    fn test_check_ver_failed() {$/;"	f	module:test_check
test_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/constant_time.rs	/^    fn test_constant_time() -> Result<(), error::Unspecified> {$/;"	f	module:tests
test_create_unseeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_create_unseeded() {$/;"	f	module:tests
test_digest_1million_random	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: usize, expected: &s/;"	f	module:test
test_digest_based_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    fn test_digest_based_test_vectors() {$/;"	f	module:tests
test_elem_exp_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_elem_exp_consttime() {$/;"	f	module:tests
test_elem_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_elem_mul() {$/;"	f	module:tests
test_elem_reduced	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_elem_reduced() {$/;"	f	module:tests
test_elem_reduced_once	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_elem_reduced_once() {$/;"	f	module:tests
test_elem_squared	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_elem_squared() {$/;"	f	module:tests
test_file	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^macro_rules! test_file {$/;"	M
test_fixed_time_eq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs	/^    pub fn test_fixed_time_eq() {$/;"	f	module:test
test_force_reseed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^fn test_force_reseed(f: &mut Fortuna) {$/;"	f
test_from_base58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^    fn test_from_base58() {$/;"	f	module:tests
test_generator_correctness	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_generator_correctness() {$/;"	f	module:tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f	module:digest_tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f	module:digest_tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hash	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f	module:tests
test_hc128_ecrypt_set_2_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_2_vector_0() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_1() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_2() {$/;"	f	module:test
test_hc128_ecrypt_set_6_vector_3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_3() {$/;"	f	module:test
test_hkdf_rfc5869_sha1_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha1_vectors() {$/;"	f	module:test
test_hkdf_rfc5869_sha256_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha256_vectors() {$/;"	f	module:test
test_hmac_md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5() {$/;"	f	module:test
test_hmac_md5_incremental	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5_incremental() {$/;"	f	module:test
test_input_as_iterator	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_as_iterator() {$/;"	f	module:tests
test_input_as_slice_less_safe	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_as_slice_less_safe() {$/;"	f	module:tests
test_input_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_from() {$/;"	f	module:tests
test_input_is_empty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_is_empty() {$/;"	f	module:tests
test_input_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_len() {$/;"	f	module:tests
test_input_read_all	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_read_all() {$/;"	f	module:tests
test_input_read_all_unconsume	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    fn test_input_read_all_unconsume() {$/;"	f	module:tests
test_invalid_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    fn test_invalid_char() {$/;"	f	module:tests
test_keccak_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_224() {$/;"	f	module:tests
test_keccak_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_256() {$/;"	f	module:tests
test_keccak_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_384() {$/;"	f	module:tests
test_keccak_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_512() {$/;"	f	module:tests
test_limbs_are_even	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_limbs_are_even() {$/;"	f	module:tests
test_limbs_are_zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_limbs_are_zero() {$/;"	f	module:tests
test_limbs_equal_limb	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_limbs_equal_limb() {$/;"	f	module:tests
test_limbs_less_than_limb_constant_time	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_limbs_less_than_limb_constant_time() {$/;"	f	module:tests
test_limbs_minimal_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_limbs_minimal_bits() {$/;"	f	module:tests
test_macro_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/macros.rs	/^fn test_macro_key() {$/;"	f
test_macro_value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/macros.rs	/^fn test_macro_value() {$/;"	f
test_md5	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^    fn test_md5() {$/;"	f	module:tests
test_modulus_debug	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_modulus_debug() {$/;"	f	module:tests
test_nacl_vector	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_nacl_vector() {$/;"	f	module:test
test_openbsd_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_openbsd_vectors() {$/;"	f	module:test
test_openwall_test_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn test_openwall_test_vectors() {$/;"	f	module:test
test_parse_big_endian_and_pad_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^    fn test_parse_big_endian_and_pad_consttime() {$/;"	f	module:tests
test_pbkdf2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2() {$/;"	f	module:test
test_pbkdf2_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2_simple() {$/;"	f	module:test
test_poly1305	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    pub fn test_poly1305() {$/;"	f	module:tests
test_positive_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    fn test_positive_integer() {$/;"	f	module:tests
test_pss_padding_encode	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn test_pss_padding_encode() {$/;"	f	module:test
test_pss_padding_verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn test_pss_padding_verify() {$/;"	f	module:test
test_public_exponent_debug	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn test_public_exponent_debug() {$/;"	f	module:tests
test_salsa20_128bit_ecrypt_set_1_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_128bit_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_salsa20_256bit_ecrypt_set_1_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_salsa20_256bit_nacl_vector_2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_nacl_vector_2() {$/;"	f	module:test
test_scrypt	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt() {$/;"	f	module:test
test_scrypt_simple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple(log_n: u8, r: u32, p: u32) {$/;"	f	module:test
test_scrypt_simple_compact	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_compact() {$/;"	f	module:test
test_scrypt_simple_expanded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_expanded() {$/;"	f	module:test
test_seeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_seeded() {$/;"	f	module:tests
test_sha224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha224() {$/;"	f	module:tests
test_sha256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha256() {$/;"	f	module:tests
test_sha384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha384() {$/;"	f	module:tests
test_sha3_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_224() {$/;"	f	module:tests
test_sha3_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_256() {$/;"	f	module:tests
test_sha3_384	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_384() {$/;"	f	module:tests
test_sha3_512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_512() {$/;"	f	module:tests
test_sha3_shake128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake128() {$/;"	f	module:tests
test_sha3_shake256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake256() {$/;"	f	module:tests
test_sha512	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512() {$/;"	f	module:tests
test_sha512_224	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_224() {$/;"	f	module:tests
test_sha512_256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_256() {$/;"	f	module:tests
test_signature_rsa_pkcs1_sign_output_buffer_len	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^    fn test_signature_rsa_pkcs1_sign_output_buffer_len() {$/;"	f	module:tests
test_small_buffer_err	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    fn test_small_buffer_err() {$/;"	f	module:tests
test_small_nonnegative_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    fn test_small_nonnegative_integer() {$/;"	f	module:tests
test_sosemanuk_ecrypt_set_1_vector_0	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_1_vector_0() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_2_vector_63	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_63() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_2_vector_90	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_90() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_3_vector_135	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_135() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_3_vector_207	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_207() {$/;"	f	module:test
test_sosemanuk_ecrypt_set_6_vector_3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_6_vector_3() {$/;"	f	module:test
test_sosemanuk_vector128_test1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test1() {$/;"	f	module:test
test_sosemanuk_vector128_test2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test2() {$/;"	f	module:test
test_state_layout	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    pub fn test_state_layout() { check_state_layout(); }$/;"	f	module:tests
test_system_random_lengths	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^    fn test_system_random_lengths() {$/;"	f	module:tests
test_tls_vectors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_tls_vectors() {$/;"	f	module:test
test_to_base58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^    fn test_to_base58() {$/;"	f	module:tests
test_too_big_event	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_too_big_event() {$/;"	f	module:tests
test_use_unseeded	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_use_unseeded() {$/;"	f	module:tests
test_util	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^pub mod test_util {$/;"	n
test_xchacha20_basic	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_xchacha20_basic() {$/;"	f	module:test
test_xsalsa20_cryptopp	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_xsalsa20_cryptopp() {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    fn tests() {$/;"	f	module:tests
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    fn tests() {$/;"	f	module:test_check
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    fn tests() {$/;"	f	module:tests
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/aes_gcm.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/chacha20_poly1305.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bssl.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/constant_time.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdh.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/digest_scalar.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/signing.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/public_key.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/endian.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/limb.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/signing.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/test.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^    fn tests() -> Vec<Test> {$/;"	f	module:test
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs	/^mod tests {$/;"	n
tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^mod tests {$/;"	n
tests128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests128() -> Vec<Test> {$/;"	f	module:test
tests192	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests192() -> Vec<Test> {$/;"	f	module:test
tests256	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs	/^    fn tests256() -> Vec<Test> {$/;"	f	module:test
this	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    this: syn::Path,$/;"	m	struct:Parameters
this	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    this: syn::Path,$/;"	m	struct:Parameters
times_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x(self) -> Gf128 {$/;"	P	implementation:Gf128
times_x_reduce	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x_reduce(self) -> Gf128 {$/;"	P	implementation:Gf128
timestamp	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn timestamp(&self) -> u64 {$/;"	P	implementation:Block
timestamp	/home/lieroz/blockchain_rust/src/block.rs	/^    timestamp: u64,$/;"	m	struct:Block
tip	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    tip: String,$/;"	m	struct:Blockchain
tip	/home/lieroz/blockchain_rust/src/blockchain.rs	/^    tip: String,$/;"	m	struct:BlockchainIterator
to_base58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^    fn to_base58(&self) -> String {$/;"	P	implementation:u8
to_base58	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^    fn to_base58(&self) -> String;$/;"	P	interface:ToBase58
to_bits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^fn to_bits(x: u64) -> (u64, u64) {$/;"	f
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:Fe
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:GeP2
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	P	implementation:GeP3
to_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs	/^    fn to_bytes(&self) -> [u8; 16] {$/;"	P	implementation:Gf128
to_cached	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_cached(&self) -> GeCached {$/;"	P	implementation:GeP3
to_compile_errors	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^fn to_compile_errors(errors: Vec<syn::Error>) -> proc_macro2::TokenStream {$/;"	f
to_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn to_elem<L>(&self, l: &Modulus<L>) -> Elem<L, Unencoded>$/;"	P	implementation:Modulus
to_elem	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn to_elem<M>(&self, m: &Modulus<M>) -> Result<Elem<M, Unencoded>, error::Unspecified> {$/;"	P	implementation:Nonnegative
to_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p256.rs	/^    fn to_mont(a: &Scalar) -> Scalar<R> {$/;"	f	function:p256_scalar_inv_to_mont
to_mont	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/p384.rs	/^    fn to_mont(a: &Scalar<Unencoded>) -> Scalar<R> {$/;"	f	function:p384_scalar_inv_to_mont
to_p2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	P	implementation:GeP1P1
to_p2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	P	implementation:GeP3
to_p3	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p3(&self) -> GeP3 {$/;"	P	implementation:GeP1P1
to_string	/home/lieroz/blockchain_rust/src/transaction.rs	/^    fn to_string(&self) -> String {$/;"	P	implementation:Transaction
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeImplGenerics
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeTypeGenerics
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceImplGenerics
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceTypeGenerics
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Expr
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Match
to_tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Stmts
tokens	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    tokens: TokenStream,$/;"	m	struct:Attr
too_large	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn too_large() -> Self { KeyRejected("TooLarge") }$/;"	P	implementation:KeyRejected
too_long_input_test_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^        fn too_long_input_test_block(alg: &'static digest::Algorithm) {$/;"	f	module:tests::max_input
too_long_input_test_byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^        fn too_long_input_test_byte(alg: &'static digest::Algorithm) {$/;"	f	module:tests::max_input
too_small	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn too_small() -> Self { KeyRejected("TooSmall") }$/;"	P	implementation:KeyRejected
top_byte_mask	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    top_byte_mask: u8,$/;"	m	struct:PSSMetrics
total	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/internal.rs	/^    total: u64,$/;"	m	struct:CountSize
traits	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/lib.rs	/^mod traits;$/;"	n
transaction	/home/lieroz/blockchain_rust/src/main.rs	/^mod transaction;$/;"	n
transactions	/home/lieroz/blockchain_rust/src/block.rs	/^    pub fn transactions(&self) -> &[Transaction] {$/;"	P	implementation:Block
transactions	/home/lieroz/blockchain_rust/src/block.rs	/^    transactions: Vec<Transaction>,$/;"	m	struct:Block
transmute_slice	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^unsafe fn transmute_slice<A, T>(slice: &[T], expected_len: usize) -> Result<&A, TryFromSliceErro/;"	f
transmute_slice_mut	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^unsafe fn transmute_slice_mut<A, T>($/;"	f
transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Container
transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Field
transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Container
transparent	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Field
trimmed_copy	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn trimmed_copy(&self) -> Transaction {$/;"	P	implementation:Transaction
truncate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) { self.len -= amount; }$/;"	P	implementation:OwnedReadBuffer
truncate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) {$/;"	P	implementation:RefReadBuffer
truncate	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize);$/;"	P	interface:ReadBuffer
try	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/lib.rs	/^mod try;$/;"	n
try_assume_unique_for_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn try_assume_unique_for_key(value: &[u8]) -> Result<Self, error::Unspecified> {$/;"	P	implementation:Nonce
try_from_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    fn try_from_(value: T) -> Result<Self, Self::Error>;$/;"	P	interface:TryFrom_
try_into_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    fn try_into_(self) -> Result<T, Self::Error> { T::try_from_(self) }$/;"	f
try_into_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill/convert.rs	/^    fn try_into_(self) -> Result<T, Self::Error>;$/;"	P	interface:TryInto_
try_sub_1	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/bits.rs	/^    pub fn try_sub_1(self) -> Result<BitLength, error::Unspecified> {$/;"	P	implementation:BitLength
tuple_impls	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_impls	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value>$/;"	f
tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:VariantAccess
tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
twin_mul	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^fn twin_mul($/;"	f
tx_id	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn tx_id(&self) -> &str {$/;"	P	implementation:TXInput
tx_id	/home/lieroz/blockchain_rust/src/transaction.rs	/^    tx_id: String,$/;"	m	struct:TXInput
ty	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/ast.rs	/^    pub ty: &'a syn::Type,$/;"	m	struct:Field
type_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn type_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_from	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    type_from: Option<syn::Type>,$/;"	m	struct:Container
type_ident	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    type_ident: &'static str,$/;"	m	struct:TaggedSerializer
type_into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    pub fn type_into(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_into	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    type_into: Option<syn::Type>,$/;"	m	struct:Container
type_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
type_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
type_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_of_item	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^fn type_of_item(cont: &Container) -> syn::Type {$/;"	f
u128	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^struct u128 {$/;"	s
u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u16 {$/;"	c
u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for u32$/;"	c
u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'de, E> IdentifierDeserializer<'de, E> for u32$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl Default for u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl Not for u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^impl u32x4 {$/;"	c
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitAnd for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitOr for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl BitXor for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<u32x4> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<usize> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<u32x4> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<usize> for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Sub for u32x4 {$/;"	c	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u32x4(pub u32, pub u32, pub u32, pub u32);$/;"	s	module:fake
u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^impl SimdExt for fake::u32x4 {$/;"	c
u64_from_usize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^pub const fn u64_from_usize(x: usize) -> u64 { x as u64 }$/;"	f
u64s_be_to_native	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    pub fn u64s_be_to_native(&mut self) -> [u64; 2] {$/;"	P	implementation:Block
u64x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u64x2 {$/;"	c	module:fake
u64x2	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u64x2(pub u64, pub u64);$/;"	s	module:fake
u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/traits.rs	/^impl ToBase58 for [u8] {$/;"	c
u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a [u8] {$/;"	c
u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a [u8]$/;"	c
uint_to	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/from_primitive.rs	/^macro_rules! uint_to {$/;"	M
un_bit_slice_1x128_with_u32x4	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x128_with_u32x4(bs: Bs8State<u32x4>, output: &mut [u8]) {$/;"	f
un_bit_slice_1x16_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x16_with_u16(bs: &Bs8State<u16>, output: &mut [u8]) {$/;"	f
un_bit_slice_4x1_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x1_with_u16(bs: &Bs8State<u16>) -> u32 {$/;"	f
un_bit_slice_4x4_with_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x4_with_u16(bs: &Bs8State<u16>) -> (u32, u32, u32, u32) {$/;"	f
unary_op	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub fn unary_op<M, E: Encoding>($/;"	f
unary_op_assign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub fn unary_op_assign<M, E: Encoding>($/;"	f
unary_op_from_binary_op_assign	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^pub fn unary_op_from_binary_op_assign<M, E: Encoding>($/;"	f
unexpected	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn unexpected(&self) -> Unexpected {$/;"	P	implementation:content::Content
unexpected_eof	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/read.rs	/^    fn unexpected_eof() -> Box<::ErrorKind> {$/;"	P	implementation:SliceReader
unexpected_error	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn unexpected_error() -> Self { KeyRejected("UnexpectedError") }$/;"	P	implementation:KeyRejected
unit_only	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    pub fn unit_only<T, E>(t: T) -> (T, UnitOnly<E>) {$/;"	f	module:private
unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^    fn unit_variant(self) -> Result<()> {$/;"	f
unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn unit_variant(self) -> Result<(), Self::Error>;$/;"	P	interface:VariantAccess
unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^        fn unit_variant(self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn unit_variant(self) -> Result<(), E> {$/;"	f	module:content
unraw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/dummy.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unraw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unwrap_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^pub(crate) fn unwrap_key<'a>($/;"	f
unwrap_key_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^pub(crate) fn unwrap_key_<'a>($/;"	f
unwrap_key__	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^fn unwrap_key__<'a>($/;"	f
unwrap_pkcs8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/signing.rs	/^fn unwrap_pkcs8($/;"	f
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    pub fn update(&mut self, data: &[u8]) {$/;"	P	implementation:Context
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn update(&mut self, data: &[u8]) { self.inner.update(data); }$/;"	P	implementation:SigningContext
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	P	implementation:Blake2b
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	P	implementation:Blake2s
update	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs	/^    fn update(&mut self) {$/;"	P	implementation:ChaCha20
update_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    pub fn update_block(&mut self, a: Block) {$/;"	P	implementation:Context
update_block	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    pub fn update_block(&mut self, block: Block, pad: Pad) {$/;"	P	implementation:Context
update_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/gcm.rs	/^    pub fn update_blocks(&mut self, input: &[u8]) {$/;"	P	implementation:Context
update_blocks	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/poly1305.rs	/^    pub fn update_blocks(&mut self, input: &[u8]) {$/;"	P	implementation:Context
update_history	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^fn update_history(in_hist: &mut [u8], out_hist: &mut [u8], last_in: &[u8], last_out: &[u8]) {$/;"	f
urandom	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^mod urandom {$/;"	n
uses_key	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn uses_key(&self, pub_key_hash: &str) -> bool {$/;"	P	implementation:TXInput
usize	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^impl From<Tag> for usize {$/;"	c
usize_from_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^pub fn usize_from_u32(x: u32) -> usize { x as usize }$/;"	f
utf8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^mod utf8;$/;"	n
utf8_char_width	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^fn utf8_char_width(b: u8) -> usize {$/;"	f
util	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod util;$/;"	n
v_in	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn v_in(&self) -> &[TXInput] {$/;"	P	implementation:Transaction
v_in	/home/lieroz/blockchain_rust/src/transaction.rs	/^    v_in: Vec<TXInput>,$/;"	m	struct:Transaction
v_out	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn v_out(&self) -> &[TXOutput] {$/;"	P	implementation:Transaction
v_out	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn v_out(&self) -> i32 {$/;"	P	implementation:TXInput
v_out	/home/lieroz/blockchain_rust/src/transaction.rs	/^    v_out: Vec<TXOutput>,$/;"	m	struct:Transaction
v_out	/home/lieroz/blockchain_rust/src/transaction.rs	/^    v_out: i32,$/;"	m	struct:TXInput
validate	/home/lieroz/blockchain_rust/src/proofofwork.rs	/^    pub fn validate(&self) -> bool {$/;"	P	implementation:ProofOfWork
validate_address	/home/lieroz/blockchain_rust/src/wallet.rs	/^    pub fn validate_address(address: &str) -> bool {$/;"	P	implementation:Wallet
validate_args	/home/lieroz/blockchain_rust/src/cli.rs	/^    fn validate_args(&self) {$/;"	P	implementation:CLI
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/digest.rs	/^    value: Output,$/;"	m	struct:Digest
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^    value: [u8; MAX_LEN],$/;"	m	struct:Signature
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^pub mod value;$/;"	n
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: &'de [u8],$/;"	m	struct:BorrowedBytesDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: &'de str,$/;"	m	struct:BorrowedStrDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: Cow<'a, str>,$/;"	m	struct:CowStrDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: Option<Second<I::Item>>,$/;"	m	struct:MapDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: String,$/;"	m	struct:StringDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    value: u32,$/;"	m	struct:U32Deserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::EnumRefDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::MapRefDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::VariantRefDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::EnumDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::MapDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::VariantDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: PhantomData<Content<'de>>,$/;"	m	struct:content::ContentVisitor
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: PhantomData<TagOrContent<'de>>,$/;"	m	struct:content::TagOrContentVisitor
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        value: PhantomData<TaggedContent<'de, T>>,$/;"	m	struct:content::TaggedContentVisitor
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    value: &'a [u8],$/;"	m	struct:BytesDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    value: Option<T>,$/;"	m	struct:Attr
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/macros.rs	/^macro_rules! value {$/;"	M
value	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs	/^    value: no_panic::Slice<'a>$/;"	m	struct:Input
value	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn value(&self) -> i32 {$/;"	P	implementation:TXOutput
value	/home/lieroz/blockchain_rust/src/transaction.rs	/^    value: i32,$/;"	m	struct:TXOutput
values	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/internals/attr.rs	/^    values: Vec<T>,$/;"	m	struct:VecAttr
variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn variant<V>(self) -> Result<(V, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        variant: &'a Content<'de>,$/;"	m	struct:content::EnumRefDeserializer
variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        variant: Content<'de>,$/;"	m	struct:content::EnumDeserializer
variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeStructVariant
variant	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeTupleVariant
variant_ident	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    variant_ident: &'static str,$/;"	m	struct:TaggedSerializer
variant_identifier	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! variant_identifier {$/;"	M
variant_index	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeStructVariant
variant_index	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeTupleVariant
variant_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
variant_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
variant_name	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/ser.rs	/^    variant_name: &'static str,$/;"	m	struct:TaggedSerializer
variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/de/mod.rs	/^            fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant)>$/;"	f	function:deserialize_enum
variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/value.rs	/^    fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), E>$/;"	f	module:content
variant_seed	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	f	module:content
verification	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519.rs	/^pub mod verification;$/;"	n
verification	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa.rs	/^pub mod verification;$/;"	n
verification	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa.rs	/^pub mod verification;$/;"	n
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ed25519/verification.rs	/^    fn verify($/;"	P	implementation:EdDSAParameters
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    fn verify($/;"	P	implementation:Algorithm
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub fn verify($/;"	f
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pbkdf2.rs	/^pub fn verify($/;"	f
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn verify($/;"	P	implementation:PKCS1
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn verify($/;"	P	implementation:PSS
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/padding.rs	/^    fn verify($/;"	P	interface:Verification
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^    fn verify($/;"	P	implementation:Parameters
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^    fn verify($/;"	P	interface:VerificationAlgorithm
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/signature.rs	/^pub fn verify($/;"	f
verify	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn verify(message: &[u8], public_key: &[u8], signature: &[u8]) -> bool {$/;"	f
verify	/home/lieroz/blockchain_rust/src/transaction.rs	/^    pub fn verify(&self) {$/;"	P	implementation:Transaction
verify_affine_point_is_on_the_curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^fn verify_affine_point_is_on_the_curve($/;"	f
verify_affine_point_is_on_the_curve_scaled	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^fn verify_affine_point_is_on_the_curve_scaled($/;"	f
verify_digest	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ecdsa/verification.rs	/^    fn verify_digest($/;"	P	implementation:Algorithm
verify_inverses_consttime	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^pub fn verify_inverses_consttime<M>($/;"	f
verify_jacobian_point_is_on_the_curve	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b.rs	/^fn verify_jacobian_point_is_on_the_curve($/;"	f
verify_less_than	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn verify_less_than(&self, other: &Self) -> Result<(), error::Unspecified> {$/;"	P	implementation:Nonnegative
verify_less_than_modulus	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    pub fn verify_less_than_modulus<M>(&self, m: &Modulus<M>) -> Result<(), error::Unspecified> /;"	P	implementation:Nonnegative
verify_rsa	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^pub fn verify_rsa($/;"	f
verify_rsa_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/verification.rs	/^pub(crate) fn verify_rsa_($/;"	f
verify_slices_are_equal	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/constant_time.rs	/^pub fn verify_slices_are_equal(a: &[u8], b: &[u8]) -> Result<(), error::Unspecified> {$/;"	f
verify_with_own_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^pub fn verify_with_own_key($/;"	f
version_not_supported	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn version_not_supported() -> Self { KeyRejected("VersionNotSupported") }$/;"	P	implementation:KeyRejected
visit_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_bool<E>(self, x: bool) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	implementation:BoolVisitor
visit_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_borrowed_str<E>(self, v: &'de str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_byte_buf	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_bytes<E>(self, bytes: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_char	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_content_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn visit_content_map<'de, V, E>($/;"	f	module:content
visit_content_map_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn visit_content_map_ref<'a, 'de, V, E>($/;"	f	module:content
visit_content_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn visit_content_seq<'de, V, E>(content: Vec<Content<'de>>, visitor: V) -> Result<V::Value, /;"	f	module:content
visit_content_seq_ref	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^    fn visit_content_seq_ref<'a, 'de, V, E>($/;"	f	module:content
visit_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:OsStringVisitor
visit_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_enum<V>(self, _visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_enum	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_enum<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_f32<E>(self, v: f32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_f64<E>(self, x: f64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_f64<E>(self, v: f64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_field	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^        fn visit_field(&mut self, field: &'ast syn::Field) {$/;"	P	implementation:with_bound::FindTyParams
visit_float_method	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! visit_float_method {$/;"	M
visit_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_i16<E>(self, v: i16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_i32<E>(self, v: i32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_i64<E>(self, x: i64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_i64<E>(self, v: i64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_i8<E>(self, v: i8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_integer_method	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^macro_rules! visit_integer_method {$/;"	M
visit_macro	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^        fn visit_macro(&mut self, _mac: &'ast syn::Macro) {}$/;"	P	implementation:with_bound::FindTyParams
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_map<A>(self, map: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_map<M>(self, mut access: M) -> Result<(), M::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>$/;"	f	module:content
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_map	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_map<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_newtype_struct	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	f
visit_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_none	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_path	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^        fn visit_path(&mut self, path: &'ast syn::Path) {$/;"	P	implementation:with_bound::FindTyParams
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize_in_place
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_seq<A>(self, _: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:ArrayVisitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:CStringVisitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_seq<S>(self, _: S) -> Result<(), S::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>$/;"	f	module:content
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_seq<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_seq	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_seq<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
visit_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_some	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IpAddr::deserialize::IpAddrVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:SocketAddr::deserialize::SocketAddrVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagContentOtherFieldVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagOrContentFieldVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_str	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_string	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_u16<E>(self, v: u16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u16	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^                    fn visit_u32<E>(self, value: u32) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_u32<E>(self, v: u32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_u64<E>(self, x: u64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_u64<E>(self, v: u64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u64	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_u8<E>(self, v: u8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/ignored_any.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:PhantomDataVisitor
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:UnitVisitor
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	f
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/de/mod.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_unit<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_unit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
void	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.89/src/ser/impossible.rs	/^    void: Void,$/;"	m	struct:Impossible
wallet	/home/lieroz/blockchain_rust/src/main.rs	/^mod wallet;$/;"	n
wallets	/home/lieroz/blockchain_rust/src/main.rs	/^mod wallets;$/;"	n
wallets	/home/lieroz/blockchain_rust/src/wallets.rs	/^    wallets: HashMap<String, Wallet>,$/;"	m	struct:Wallets
which	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^        which: u32$/;"	m	struct:tests::CurveGen
whirlpool	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs	/^pub mod whirlpool;$/;"	n
whirlpool_1000000a_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_1000000a_test() {$/;"	f	module:test
whirlpool_static_test	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_static_test() {$/;"	f	module:test
width	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn width(&self) -> Width<M> { self.limbs.width() }$/;"	P	implementation:Modulus
width	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn width(&self) -> Width<M> {$/;"	P	implementation:BoxedLimbs
wikipedia_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs	/^    fn wikipedia_tests() {$/;"	f	module:test
with_bad_i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    fn with_bad_i<F, R>(value: &[u8], f: F)$/;"	f	module:tests
with_big_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn with_big_endian(self) -> WithOtherEndian<Self, BigEndian> {$/;"	P	interface:OptionsExt
with_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn with_bound($/;"	f
with_capacity	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    pub(super) fn with_capacity(capacity: LengthMeasurement) -> Self {$/;"	P	implementation:Writer
with_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/decode.rs	/^    pub fn with_check(mut self, expected_ver: Option<u8>) -> DecodeBuilder<'a, I> {$/;"	P	implementation:DecodeBuilder
with_check	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.2/src/encode.rs	/^    pub fn with_check(mut self) -> EncodeBuilder<'a, I> {$/;"	P	implementation:EncodeBuilder
with_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn with_deserializer<'a, A, R>(&self, reader: R, acceptor: A) -> A::Output$/;"	P	implementation:Config
with_deserializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn with_deserializer<'a, A, R>(reader: R, acceptor: A) -> A::Output$/;"	f
with_good_i	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der.rs	/^    fn with_good_i<F, R>(value: &[u8], f: F)$/;"	f	module:tests
with_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    pub fn with_key(signing_key: &SigningKey) -> SigningContext {$/;"	P	implementation:SigningContext
with_lifetime_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn with_lifetime_bound(generics: &syn::Generics, lifetime: &str) -> syn::Generics {$/;"	f
with_limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn with_limit(self, limit: u64) -> WithOtherLimit<Self, Bounded> {$/;"	P	interface:OptionsExt
with_little_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn with_little_endian(self) -> WithOtherEndian<Self, LittleEndian> {$/;"	P	interface:OptionsExt
with_native_endian	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn with_native_endian(self) -> WithOtherEndian<Self, NativeEndian> {$/;"	P	interface:OptionsExt
with_no_limit	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    fn with_no_limit(self) -> WithOtherLimit<Self, Infinite> {$/;"	P	interface:OptionsExt
with_self_bound	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn with_self_bound($/;"	f
with_serializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/config.rs	/^    pub fn with_serializer<A, W>(&self, writer: W, acceptor: A) -> A::Output$/;"	P	implementation:Config
with_serializer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/lib.rs	/^pub fn with_serializer<A, W>(writer: W, acceptor: A) -> A::Output$/;"	f
with_where_predicates	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn with_where_predicates($/;"	f
with_where_predicates_from_fields	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn with_where_predicates_from_fields($/;"	f
with_where_predicates_from_variants	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn with_where_predicates_from_variants($/;"	f
without_defaults	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/bound.rs	/^pub fn without_defaults(generics: &syn::Generics) -> syn::Generics {$/;"	f
word	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        word: usize,$/;"	m	struct:intel::Feature
wrap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> DecPadding<X> { DecPadding { padding: p } }$/;"	P	implementation:DecPadding
wrap	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> EncPadding<X> { EncPadding { padding: p } }$/;"	P	implementation:EncPadding
wrap_deserialize_field_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn wrap_deserialize_field_with($/;"	f
wrap_deserialize_variant_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn wrap_deserialize_variant_with($/;"	f
wrap_deserialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/de.rs	/^fn wrap_deserialize_with($/;"	f
wrap_in_const	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/dummy.rs	/^pub fn wrap_in_const(trait_: &str, ty: &Ident, code: TokenStream) -> TokenStream {$/;"	f
wrap_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^pub(crate) fn wrap_key(template: &Template, private_key: &[u8], public_key: &[u8]) -> Document {$/;"	f
wrap_key_	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/pkcs8.rs	/^fn wrap_key_(template: &Template, private_key: &[u8], public_key: &[u8], bytes: &mut [u8]) {$/;"	f
wrap_serialize_field_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn wrap_serialize_field_with($/;"	f
wrap_serialize_variant_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn wrap_serialize_variant_with($/;"	f
wrap_serialize_with	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.89/src/ser.rs	/^fn wrap_serialize_with($/;"	f
wrapped	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/hmac.rs	/^    wrapped: SigningKey,$/;"	m	struct:VerificationKey
wrapping_rotate_left_u32	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/polyfill.rs	/^pub fn wrapping_rotate_left_u32(x: core::num::Wrapping<u32>, n: u32) -> core::num::Wrapping<u32>/;"	f
write_all	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der_writer.rs	/^pub(crate) fn write_all(tag: Tag, write_value: &Fn(&mut Accumulator)) -> Box<[u8]> {$/;"	f
write_byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn write_byte(&mut self, _value: u8) { self.len += 1; }$/;"	P	implementation:LengthMeasurement
write_byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn write_byte(&mut self, value: u8) { self.bytes.push(value); }$/;"	P	implementation:Writer
write_byte	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn write_byte(&mut self, value: u8);$/;"	P	interface:Accumulator
write_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn write_bytes(&mut self, value: &[u8]) { self.bytes.extend(value); }$/;"	P	implementation:Writer
write_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn write_bytes(&mut self, value: &[u8]) { self.len += value.len(); }$/;"	P	implementation:LengthMeasurement
write_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    fn write_bytes(&mut self, value: &[u8]);$/;"	P	interface:Accumulator
write_copy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^pub fn write_copy(accumulator: &mut Accumulator, to_copy: untrusted::Input) {$/;"	f
write_hex_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^pub(crate) fn write_hex_bytes($/;"	f
write_hex_tuple	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/debug.rs	/^pub(crate) fn write_hex_tuple($/;"	f
write_positive_integer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der_writer.rs	/^pub(crate) fn write_positive_integer(output: &mut Accumulator, value: &Positive) {$/;"	f
write_row_major	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn write_row_major(block: u32x4, output: &mut [u8]) {$/;"	f	function:un_bit_slice_1x128_with_u32x4
write_tlv	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/der_writer.rs	/^fn write_tlv<F>(output: &mut Accumulator, tag: Tag, write_value: F)$/;"	f
write_to_persist	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/typedb-0.8.0/src/lib.rs	/^    fn write_to_persist(&mut self) -> KVResult {$/;"	f
write_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u32_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_be(dst: &mut [u8], mut input: u32) {$/;"	f
write_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u32_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_le(dst: &mut[u8], mut input: u32) {$/;"	f
write_u32v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32v_le (dst: &mut[u8], input: &[u32]) {$/;"	f
write_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u64_be	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_be(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()>;$/;"	P	interface:WriteExt
write_u64_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_le(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64v_le	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64v_le(dst: &mut[u8], input: &[u64]) {$/;"	f
write_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()> {$/;"	f
write_u8	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()>;$/;"	P	interface:WriteExt
writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.1.2/src/ser/mod.rs	/^    writer: W,$/;"	m	struct:Serializer
writer	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io.rs	/^mod writer;$/;"	n
wrong_algorithm	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/error.rs	/^    pub(crate) fn wrong_algorithm() -> Self { KeyRejected("WrongAlgorithm") }$/;"	P	implementation:KeyRejected
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    x: Elem<T>,$/;"	m	struct:ExtPoint
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    x: Elem<T>,$/;"	m	struct:Point
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP1P1
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP2
x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    x: Fe,$/;"	m	struct:GeP3
x25519	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519.rs	/^pub mod x25519;$/;"	n
x25519_check_private_key_bytes	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^fn x25519_check_private_key_bytes(bytes: &[u8]) -> Result<(), error::Unspecified> {$/;"	f
x25519_ecdh	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^fn x25519_ecdh($/;"	f
x25519_generate_private_key	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^fn x25519_generate_private_key($/;"	f
x25519_neon	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^fn x25519_neon(out: &mut ops::EncodedPoint, scalar: &ops::Scalar, point: &ops::EncodedPoint) {$/;"	f
x25519_public_from_private	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/x25519.rs	/^fn x25519_public_from_private($/;"	f
x86_64_tests	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^    mod x86_64_tests {$/;"	n	module:intel
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs2State<T>) -> Bs2State<T> {$/;"	P	implementation:Bs2State
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs4State<T>) -> Bs4State<T> {$/;"	P	implementation:Bs4State
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs8State<T>) -> Bs8State<T> {$/;"	P	implementation:Bs8State
xor	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs	/^fn xor(x: &[u8], y: &[u8], output: &mut [u8]) {$/;"	f
xor_keystream	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn xor_keystream(dst: &mut[u8], plaintext: &[u8], keystream: &[u8]) {$/;"	f
xor_x63	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor_x63(self) -> Bs8State<T> {$/;"	P	implementation:Bs8State
xy	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^        xy: [Limb; 2 * MAX_LIMBS],$/;"	m	struct:tests::AffinePoint
xy2d	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    xy2d: Fe,$/;"	m	struct:GePrecomp
xyz	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops.rs	/^    xyz: [Limb; 3 * MAX_LIMBS],$/;"	m	struct:Point
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    y: Elem<T>,$/;"	m	struct:ExtPoint
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    y: Elem<T>,$/;"	m	struct:Point
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP1P1
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP2
y	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y: Fe,$/;"	m	struct:GeP3
y_minus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_minus_x: Fe,$/;"	m	struct:GeCached
y_minus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_minus_x: Fe,$/;"	m	struct:GePrecomp
y_plus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_plus_x: Fe,$/;"	m	struct:GeCached
y_plus_x	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    y_plus_x: Fe,$/;"	m	struct:GePrecomp
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    z: Elem<T>,$/;"	m	struct:ExtPoint
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    z: Elem<T>,$/;"	m	struct:Point
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeCached
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP1P1
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP2
z	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    z: Fe,$/;"	m	struct:GeP3
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/block.rs	/^    pub fn zero() -> Self { Self { subblocks: [0, 0] } }$/;"	P	implementation:Block
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/aead/nonce.rs	/^    pub fn zero(nonce: Nonce) -> Self { Self::new(nonce, 0) }$/;"	f
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/curve25519/ops.rs	/^    fn zero() -> Self {$/;"	P	implementation:Elem
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/ec/suite_b/ops/elem.rs	/^    pub fn zero() -> Elem<M, E> {$/;"	P	implementation:Elem
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/io/writer.rs	/^    pub fn zero() -> Self { Self { len: 0 } }$/;"	P	implementation:LengthMeasurement
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn zero(&self) -> Elem<M, R> {$/;"	P	implementation:PartialModulus
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn zero(width: Width<M>) -> Self {$/;"	P	implementation:BoxedLimbs
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rsa/bigint.rs	/^    fn zero<E>(&self) -> Elem<M, E> {$/;"	P	implementation:Modulus
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn zero(dst: &mut [u8]) {$/;"	f
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP2 {$/;"	P	implementation:GeP2
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP3 {$/;"	P	implementation:GeP3
zero	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GePrecomp {$/;"	P	implementation:GePrecomp
zero_until	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn zero_until(&mut self, idx: usize);$/;"	P	interface:FixedBuffer
zx_cprng_draw	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/rand.rs	/^        fn zx_cprng_draw(buffer: *mut u8, length: usize);$/;"	f	module:fuchsia
zx_status_t	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^        type zx_status_t = i32;$/;"	t	function:arm::fuchsia_setup
zx_system_get_features	/home/lieroz/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.14.6/src/cpu.rs	/^            fn zx_system_get_features(kind: u32, features: *mut u32) -> zx_status_t;$/;"	f	function:arm::fuchsia_setup
